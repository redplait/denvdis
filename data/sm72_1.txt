ARCHITECTURE "Volta"

   PROCESSOR_ID Volta;
   ISSUE_SLOTS 1;
   WORD_SIZE 64;
   BRANCH_DELAY 0;
   ELF_ID 190;
   ELF_ABI 0x33;
   ELF_ABI_VERSION 7;


   ELF_VERSION 101;

   RELOCATORS
  { "R_CUDA_NONE", 0, False, False, 0,0, { { 0, 0} } }
  { "R_CUDA_32", 0xffffffffffffffff, False, False, 0,0, { { 0, 32} } }
  { "R_CUDA_64", 0xffffffffffffffff, False, False, 0,0, { { 0, 64} } }
  { "R_CUDA_G32", "R_CUDA_G32", 0xffffffffffffffff, False, False, 0,0, { { 0, 32} } }
  { "R_CUDA_G64", "R_CUDA_G64", 0xffffffffffffffff, False, False, 0,0, { { 0, 64} } }
  { "R_CUDA_ABS32_26", 0xffffffffffffffff, False, False, 0,0, { { 26, 32} } }
  { "R_CUDA_TEX_HEADER_INDEX", 0xffffffffffffffff, False, False, False, 0,0, { { 0, 20} } }
  { "R_CUDA_SAMP_HEADER_INDEX", 0xffffffffffffffff, False, False, False, 0,0, { { 20, 12} } }
  { "R_CUDA_SURF_HW_DESC", 4, 0, 32 }
  { "R_CUDA_SURF_HW_SW_DESC", 5, 0, 32 }
  { "R_CUDA_ABS32_LO_26", 0x00000000ffffffff, False, False, 0,0, { { 26, 32} } }
  { "R_CUDA_ABS32_HI_26", 0xffffffff00000000, False, False, 0,0, { { 26, 32} } }
  { "R_CUDA_ABS32_23", 0xffffffffffffffff, False, False, 0,0, { { 23, 32} } }
  { "R_CUDA_ABS32_LO_23", 0x00000000ffffffff, False, False, 0,0, { { 23, 32} } }
  { "R_CUDA_ABS32_HI_23", 0xffffffff00000000, False, False, 0,0, { { 23, 32} } }
  { "R_CUDA_ABS24_26", 0xffffffffffffffff, False, False, 0,0, { { 26, 24} } }
  { "R_CUDA_ABS24_23", 0xffffffffffffffff, False, False, 0,0, { { 23, 24} } }
  { "R_CUDA_ABS16_26", 0xffffffffffffffff, False, False, 0,0, { { 26, 16} } }
  { "R_CUDA_ABS16_23", 0xffffffffffffffff, False, False, 0,0, { { 23, 16} } }
  { "R_CUDA_TEX_SLOT", 0xffffffffffffffff, False, False, 0,0, { { 32, 8} } }
  { "R_CUDA_SAMP_SLOT", 0xffffffffffffffff, False, False, 0,0, { { 40, 5} } }
  { "R_CUDA_SURF_SLOT", 0xffffffffffffffff, False, False, 0,0, { { 26, 6} } }
  { "R_CUDA_TEX_BINDLESSOFF13_32", 0xffffffffffffffff, False, False, 0,2, { { 32, 13} } }
  { "R_CUDA_TEX_BINDLESSOFF13_47", 0xffffffffffffffff, False, False, 0,2, { { 47, 13} } }
  { "R_CUDA_CONST_FIELD19_28", 0xffffffffffffffff, "ConstBankAddress2", False, False, 0,0, { { 28, 18},
  { 26, 1} } }
  { "R_CUDA_CONST_FIELD19_23", 0xffffffffffffffff, "ConstBankAddress2", False, False, 0,0, { { 23, 19} } }
  { "R_CUDA_TEX_SLOT9_49", 0xffffffffffffffff, False, False, 0,0, { { 49, 9} } }
  { "R_CUDA_6_31", 0xffffffffffffffff, False, False, 0,0, { { 31, 6} } }
  { "R_CUDA_2_47", 0xffffffffffffffff, False, False, 0,0, { { 47, 2} } }
  { "R_CUDA_TEX_BINDLESSOFF13_41", 0xffffffffffffffff, False, False, 0,2, { { 41, 13} } }
  { "R_CUDA_TEX_BINDLESSOFF13_45", 0xffffffffffffffff, False, False, 0,2, { { 45, 13} } }
  { "R_CUDA_FUNC_DESC32_23", 0xffffffffffffffff, False, False, 0,0, { { 23, 32} } }
  { "R_CUDA_FUNC_DESC32_LO_23", 0x00000000ffffffff, False, False, 0,0, { { 23, 32} } }
  { "R_CUDA_FUNC_DESC32_HI_23", 0xffffffff00000000, False, False, 0,0, { { 23, 32} } }
  { "R_CUDA_FUNC_DESC_32", "R_CUDA_FUNC_DESC_32", 0xffffffffffffffff, False, False, 0,0, { { 0, 32} } }
  { "R_CUDA_FUNC_DESC_64", "R_CUDA_FUNC_DESC_64", 0xffffffffffffffff, False, False, 0,0, { { 0, 64} } }
  { "R_CUDA_CONST_FIELD21_26", 0xffffffffffffffff, "ConstBankAddress0", False, False, 0,0, { { 26, 21} } }
  { "R_CUDA_QUERY_DESC21_37", 0xffffffffffffffff, "ConstBankAddress0", False, False, 0,0, { { 37, 21} } }
  { "R_CUDA_CONST_FIELD19_26", 0xffffffffffffffff, "ConstBankAddress2", False, False, 0,0, { { 26, 19} } }
  { "R_CUDA_CONST_FIELD21_23", 0xffffffffffffffff, "ConstBankAddress0", False, False, 0,0, { { 23, 21} } }
  { "R_CUDA_PCREL_IMM24_26", 0xffffffffffffffff, True, False, 0,0, { { 26, 24} } }
  { "R_CUDA_PCREL_IMM24_23", 0xffffffffffffffff, True, False, 0,0, { { 23, 24} } }
  { "R_CUDA_ABS32_20", 0xffffffffffffffff, False, False, 0,0, { { 20, 32} } }
  { "R_CUDA_ABS32_LO_20", 0x00000000ffffffff, False, False, 0,0, { { 20, 32} } }
  { "R_CUDA_ABS32_HI_20", 0xffffffff00000000, False, False, 0,0, { { 20, 32} } }
  { "R_CUDA_ABS24_20", 0xffffffffffffffff, False, False, 0,0, { { 20, 24} } }
  { "R_CUDA_ABS16_20", 0xffffffffffffffff, False, False, 0,0, { { 20, 16} } }
  { "R_CUDA_FUNC_DESC32_20", 0xffffffffffffffff, False, False, 0,0, { { 20, 32} } }
  { "R_CUDA_FUNC_DESC32_LO_20", 0x00000000ffffffff, False, False, 0,0, { { 20, 32} } }
  { "R_CUDA_FUNC_DESC32_HI_20", 0xffffffff00000000, False, False, 0,0, { { 20, 32} } }
  { "R_CUDA_CONST_FIELD19_20", 0xffffffffffffffff, "ConstBankAddress2", False, False, 0,0, { { 20, 19} } }
  { "R_CUDA_BINDLESSOFF13_36", 0xffffffffffffffff, False, False, 0,2, { { 36, 13} } }
  { "R_CUDA_SURF_HEADER_INDEX", 0xffffffffffffffff, False, False, False, 0,0, { { 0, 20} } }
  { "R_CUDA_INSTRUCTION64", 17, 0, 64 }
  { "R_CUDA_CONST_FIELD21_20", 0xffffffffffffffff, "ConstBankAddress0", False, False, 0,0, { { 20, 21} } }
  { "R_CUDA_ABS32_32", 0xffffffffffffffff, False, False, 0,0, { { 32, 32} } }
  { "R_CUDA_ABS32_LO_32", 0x00000000ffffffff, False, False, 0,0, { { 32, 32} } }
  { "R_CUDA_ABS32_HI_32", 0xffffffff00000000, False, False, 0,0, { { 32, 32} } }
  { "R_CUDA_ABS47_34", 0xffffffffffffffff, False, False, 0,2, { { 34, 47} } }
  { "R_CUDA_ABS16_32", 0xffffffffffffffff, False, False, 0,0, { { 32, 16} } }
  { "R_CUDA_ABS24_32", 0xffffffffffffffff, False, False, 0,0, { { 32, 24} } }
  { "R_CUDA_FUNC_DESC32_32", 0xffffffffffffffff, False, False, 0,0, { { 32, 32} } }
  { "R_CUDA_FUNC_DESC32_LO_32", 0x00000000ffffffff, False, False, 0,0, { { 32, 32} } }
  { "R_CUDA_FUNC_DESC32_HI_32", 0xffffffff00000000, False, False, 0,0, { { 32, 32} } }
  { "R_CUDA_CONST_FIELD19_40", 0xffffffffffffffff, "ConstBankAddress2", False, False, 0,0, { { 40, 19} } }
  { "R_CUDA_BINDLESSOFF14_40", 0xffffffffffffffff, False, False, 0,2, { { 40, 14} } }
  { "R_CUDA_CONST_FIELD21_38", 0xffffffffffffffff, "ConstBankAddress0", False, False, 0,0, { { 38, 21} } }
  { "R_CUDA_INSTRUCTION128", 17, 0, 128 }
  { "R_CUDA_YIELD_OPCODE9_0", 18, 0, 9 }
  { "R_CUDA_YIELD_CLEAR_PRED4_87", 19, 87, 4 }
  { "R_CUDA_32_LO", 0x00000000ffffffff, False, False, 0,0, { { 0, 32} } }
  { "R_CUDA_32_HI", 0xffffffff00000000, False, False, 0,0, { { 0, 32} } }
  { "R_CUDA_UNUSED_CLEAR32", "R_CUDA_UNUSED_CLEAR32", 0xffffffffffffffff, False, False, 0,0, { { 0, 32} } }
  { "R_CUDA_UNUSED_CLEAR64", "R_CUDA_UNUSED_CLEAR64", 0xffffffffffffffff, False, False, 0,0, { { 0, 64} } }
  { "R_CUDA_ABS24_40", 0xffffffffffffffff, False, False, 0,0, { { 40, 24} } }
      ;

   OPTIONS DATA_IN_CODE,
                  CASE_INSENSITIVE_SYNTAX,
                  NOCHECK_OPCLASS_AMBIGUITY,
                  NO_QUALIFIER_REORDERING,
                  VLIW_BRACE_NOTATION;

   RELATIVE_ADDRESS_BASE CURRENT_INSTRUCTION + 16;

   EMPTY_INSTRUCTION = "NOP;";

   CONDITION TYPES
      ILLEGAL_INSTR_ENCODING_ERROR : ERROR
      OOR_REG_ERROR : ERROR
      MISALIGNED_REG_ERROR : ERROR
      INVALID_CONST_ADDR_ERROR : ERROR
      MISALIGNED_ADDR_ERROR : ERROR
      UNPREDICTABLE_BEHAVIOR_ERROR : ERROR
      PC_MISALIGNED_ERROR : ERROR

      ILLEGAL_INSTR_ENCODING_WARNING : WARNING
      OOR_REG_WARNING : WARNING
      MISALIGNED_REG_WARNING : WARNING
      INVALID_CONST_ADDR_WARNING : WARNING
      MISALIGNED_ADDR_WARNING : WARNING
      UNPREDICTABLE_BEHAVIOR_WARNING : WARNING

      ILLEGAL_INSTR_ENCODING_INFO : INFO
      OOR_REG_INFO : INFO
      MISALIGNED_REG_INFO : INFO
      INVALID_CONST_ADDR_INFO : INFO
      MISALIGNED_ADDR_INFO : INFO
      UNPREDICTABLE_BEHAVIOR_INFO : INFO

      ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR : ERROR
      INVALID_CONST_ADDR_SASS_ONLY_ERROR : ERROR

PARAMETERS
    MAX_REG_COUNT = 254
    SHADER_TYPE = 0
    MAX_CONST_BANK = 17
    ALLOW_F16_PARTIAL_WRITES = 1

CONSTANTS
    ITYPE_OTHER = 0
    ITYPE_ABC_REG = 1
    ITYPE_ABC_BCST = 2
    ITYPE_ABC_CCST = 3
    ITYPE_ABC_B20I = 4

    BRT_CALL = 1
    BRT_RETURN = 2
    BRT_BRANCH = 3
    BRT_BRANCHOUT = 4

    VQ_ADU = 0
    VQ_FMA64 = 1
    VQ_SHM = 2
    VQ_TEX = 3
    VQ_XU = 4
    VQ_GENERICS = 5
    VQ_REDIRECTABLE = 6
    VQ_UNORDERED = 7
    VQ_IPA_PASS = 8
    VQ_IPA = 8
    VQ_IPA_MUL = 9
    VQ_IPA_SC = 10
    VQ_REDIRECTABLE_FP16 = 11
    VQ_MUFU = 12
    VQ_CBU = 13
    VQ_SUST = 14
    VQ_AGU = 15
    VQ_AGU_UNORDERED_WR = 16
    VQ_SUATOM = 17
    VQ_HMMA = 18
    VQ_IMMA = 19
    VQ_I2I = 20

    MEMORY_LOAD = 1
    MEMORY_STORE = 2

    ST_UNKNOWN = 0
    ST_PS = 1
    ST_TI = 2
    ST_TS = 3
    ST_GS = 4
    ST_CS = 5
    ST_VSA = 6
    ST_VSB = 7
    ST_TRAP = 8

    ISHADER_VS = 0
    ISHADER_GS = 1
    ISHADER_TI = 2
    ISHADER_TS = 3
    ISHADER_CS = 4
    ISHADER_PS = 5
    ISHADER_TRAP = 6
    ISHADER_ALL = 0x7f

    IERROR_ILLEGAL_INSTR_DECODING = 0
    IERROR_MISALIGNED_REG = 1
    IERROR_ILLEGAL_SPH_INSTR_COMBINATION = 2
    IERROR_ILLEGAL_INSTR_PARAM = 3
    IERROR_ILLEGAL_INSTR_PARAM2 = 4
    IERROR_INVALID_CONST_ADDR_LDC = 5
    IERROR_OOR_REG = 6
    IERROR_OOR_ADDR = 7
    IERROR_MISALIGNED_ADDR = 8
    IERROR_INVALID_ADDR_SPACE = 9
    IERROR_GEOMETRY_SM_ERROR = 10
    IERROR_PC_WRAP = 11
    IERROR_PC_OVERFLOW = 12
    IERROR_PC_MISALIGNED = 13
    IERROR_API_STACK_ERROR = 14
    IERROR_PHYSICAL_ATTR_MISMATCH_ERROR = 15
    IERROR_ILLEGAL_INSTR_LSU = 16
    IERROR_PHYSICAL_STACK_OVERFLOW = 17

    IOPERAND_MAP_NON_EXISTENT_OPERAND = 30

    IOPERAND_TYPE_INTEGER = 0
    IOPERAND_TYPE_SIGNED_INTEGER = 1
    IOPERAND_TYPE_UNSIGNED_INTEGER = 2
    IOPERAND_TYPE_FLOAT = 3
    IOPERAND_TYPE_DOUBLE = 4
    IOPERAND_TYPE_GENERIC_ADDRESS = 5
    IOPERAND_TYPE_SHARED_ADDRESS = 6
    IOPERAND_TYPE_LOCAL_ADDRESS = 7
    IOPERAND_TYPE_TRAM_ADDRESS = 8
    IOPERAND_TYPE_LOGICAL_ATTR_ADDRESS = 9
    IOPERAND_TYPE_PHYSICAL_ATTR_ADDRESS = 10
    IOPERAND_TYPE_GENERIC = 11
    IOPERAND_TYPE_NON_EXISTENT_OPERAND = 12
    IOPERAND_TYPE_CONSTANT_ADDRESS = 13
    IOPERAND_TYPE_VILD_INDEX = 14
    IOPERAND_TYPE_VOTE_INDEX = 15
    IOPERAND_TYPE_STP_INDEX = 16
    IOPERAND_TYPE_PIXLD_INDEX = 17
    IOPERAND_TYPE_PATCH_OFFSET_ADDRESS = 18
    IOPERAND_TYPE_RAW_ISBE_ACCESS = 19
    IOPERAND_TYPE_GLOBAL_ADDRESS = 20
    IOPERAND_TYPE_TEX = 21
    IOPERAND_TYPE_GS_STATE = 22
    IOPERAND_TYPE_SURFACE_COORDINATES = 23
    IOPERAND_TYPE_FP16SIMD = 24

    INST_TYPE_MATH = 0
    INST_TYPE_COUPLED_MATH = 0
    INST_TYPE_MIO_RD_SCBD = 1
    INST_TYPE_DECOUPLED_RD_SCBD = 1
    INST_TYPE_MIO_RD_WR_SCBD = 2
    INST_TYPE_DECOUPLED_RD_WR_SCBD = 2
    INST_TYPE_COUPLED_EMULATABLE = 3
    INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD = 4
    INST_TYPE_DECOUPLED_WR_SCBD = 5
    INST_TYPE_DECOUPLED_RD_NOREQ_SCBD = 6
    INST_TYPE_DECOUPLED_WR_NOREQ_SCBD = 7
    INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_NOREQ_SCBD= 8






STRING_MAP
mfuse -> TTUMACROFUSE
vqueue -> VQ_TTU

REGISTERS



    UnaryInv noINV, INV;
    UnaryNeg noNEG, NEG;
    UnaryAbs noABS, ABS;

    SIDL_NAMES
        NO_CUSTOM_NAME,
        VOTE_VTG,
 TEXS16,
 TLDS16,
 TLD4S16,
  HFMA2_REG,
  HFMA2_IMM,
  HFMA2_BCST,
  HSET2_REG,
  HSET2_IMM,
  HSET2_BCST,
  HADD2_BCST,
  HADD2_IMM,
  HADD2_REG,
  HMUL2_REG,
  HMUL2_IMM,
  HMUL2_BCST,
  HFMA2_REG,
  HFMA2_IMM,
  HFMA2_BCST,
  HSET2_REG,
  HSET2_IMM,
  HSET2_BCST,
  HADD2_BCST,
  HADD2_IMM,
  HADD2_REG,
  HMUL2_REG,
  HMUL2_IMM,
  HMUL2_BCST,
    IDP_REG,
    IDP_BCST,
  ATOM,
  ATOM_CAS,
  ATOMS,
  ATOMS_CAS,
  FADD_Rb,
  FADD_Imm,
  FADD_c,
  FCHK_Rb,
  FCHK_Imm,
  FCHK_C,
  FFMA_Rb_Rc,
  FFMA_Imm_Rc,
  FFMA_Rb_Imm,
  FFMA_c_Rc,
  FFMA_Rb_c,
  FMNMX_Rb,
  FMNMX_Imm,
  FMNMX_C,
  FMUL_Rb,
  FMUL_Imm,
  FMUL_c,
  FSEL_Rb,
  FSEL_Imm,
  FSEL_C,
  FSETP_Rb,
  FSETP_Imm,
  FSETP_C,
  FSET_Rb,
  FSET_Imm,
  FSET_C,
  MUFU_Rb,
  MUFU_Imm,
  MUFU_c,
  DADD_Rc,
  DADD_Imm,
  DADD_C,
  DFMA_Rb_Rc,
  DFMA_Imm_Rc,
  DFMA_C_Rc,
  DFMA_Rb_Imm,
  DFMA_Rb_C,
  DMUL_Rb,
  DMUL_Imm,
  DMUL_C,
  DSETP_Rc,
  DSETP_Imm,
  DSETP_C,
  BMOV_clear_Rd,
  BMOV_clear_Bd,
  BMOV_pquad_R,
  BMOV_pquad_I,
  BMOV_pquad_C,
  BMOV_pquad_B,
  BMOV_dst64_I,
  BMOV_dst64_R,
  BMOV_dst64_C,
  CALL_ABS_C,
  CALL_ABS_I,
  CALL_ABS_R,
  CALL_REL_I,
  CALL_REL_R,
  JMP_I,
  JMP_C,
  NANOSLEEP_R,
  NANOSLEEP_I,
  NANOSLEEP_C,
  NANOTRAP_R,
  NANOTRAP_I,
  NANOTRAP_C,
  RPCMOV_dstPc,
  RPCMOV_dstPc_imm,
  RPCMOV_dstPc_const,
  RPCMOV_srcPc,
  RPCMOV_dstPc64_I,
  RPCMOV_dstPc64_C,
  WARPSYNC_Rb,
  WARPSYNC_Imm,
  WARPSYNC_C,
  HADD2_Rb,
  HADD2_Imm,
  HADD2_c,
  HFMA2_Rb_Rc,
  HFMA2_Imm_Rc,
  HFMA2_c_Rc,
  HFMA2_Rb_c,
  HFMA2_Rb_Imm,
  HMMA_Rb_Rc,
  HMUL2_Rb,
  HMUL2_Imm,
  HMUL2_c,
  HSET2_Rb,
  HSET2_Imm,
  HSET2_c,
  HSETP2_Rb,
  HSETP2_Imm,
  HSETP2_c,
  BMSK_Rb,
  BMSK_Imm,
  BMSK_C,
  BREV_Rb,
  BREV_Imm,
  BREV_C,
  FLO_Rb,
  FLO_Imm,
  FLO_C,
  IABS_Rb,
  IABS_Imm,
  IABS_C,
  IADD3_Rb,
  IADD3_C,
  IADD3_Imm,
  IDP_Rb,
  IDP_C,
  IMAD_Rb_Rc,
  IMAD_Imm_Rc,
  IMAD_C_Rc,
  IMAD_Rb_Imm,
  IMAD_Rb_C,
  IMAD_WIDE_Rb_Rc,
  IMAD_WIDE_Imm_Rc,
  IMAD_WIDE_C_Rc,
  IMAD_WIDE_Rb_C,
  ISETP_Rb,
  ISETP_Imm,
  ISETP_C,
  LEA_Rb_Rc,
  LEA_C_Rc,
  LEA_Imm_Rc,
  LEA_Rb_Imm,
  LOP3_Rb,
  LOP3_Imm,
  LOP3_C,
  MOV_Rb,
  MOV_Imm,
  MOV_c,
  P2R_Rb,
  P2R_Imm,
  P2R_C,
  PLOP3_0,
  PLOP3_1_R,
  PLOP3_1_C,
  PLOP3_2_R,
  PLOP3_2_C,
  PLOP3_3_R,
  PLOP3_3_C,
  POPC_Rb,
  POPC_Imm,
  POPC_C,
  PRMT_Rb_Rc,
  PRMT_Imm_Rc,
  PRMT_C_Rc,
  PRMT_Rb_Imm,
  PRMT_Rb_C,
  R2P_Rb,
  R2P_Imm,
  R2P_C,
  SEL_Rb,
  SEL_Imm,
  SEL_C,
  SGXT_Rb,
  SGXT_Imm,
  SGXT_C,
  SHF_Rb_Rc,
  SHF_Imm_Rc,
  SHF_Rb_Imm,
  SHF_C_Rc,
  SHF_Rb_C,
  VABSDIFF_Rb_Rc,
  VABSDIFF_Imm_Rc,
  VABSDIFF_C_Rc,
  VABSDIFF_Rb_Imm,
  VABSDIFF_Rb_C,
  VABSDIFF4_Rb_Rc,
  VABSDIFF4_Imm_Rc,
  VABSDIFF4_C_Rc,
  VABSDIFF4_Rb_Imm,
  VABSDIFF4_Rb_C,
  F2F_R,
  F2F_C,
  F2F_Imm,
  F2F64_R,
  F2F64_C,
  F2F64_Imm,
  F2I_R,
  F2I_C,
  F2I_I,
  F2I64_R,
  F2I64_C,
  F2I64_I,
  FRND_R,
  FRND_C,
  FRND_I,
  FRND64_R,
  FRND64_C,
  FRND64_I,
  I2F_R,
  I2F_C,
  I2F_I,
  I2F64_R,
  I2F64_C,
  I2F64_I,
  IPA_Rb,
  IPA_Imm,
  IPA_c,
  OUT_R,
  OUT_I,
  ATOMG,
  ATOMG_CAS,
  CCTLT_Rb,
  CCTLT_C,
  SHFL_Rb_Rc,
  SHFL_Imm_Rc,
  SHFL_Rb_Imm,
  SHFL_Imm_Imm,
  BAR_R,
  BAR_R_Imm,
  BAR_Imm_R,
  BAR_Imm_Imm,
  SUATOM_I,
  SUATOM_TID,
  SUATOM_R,
  SUATOM_I_CAS,
  SUATOM_TID_CAS,
  SUATOM_R_CAS,
  SULD_D_I,
  SULD_D_TID,
  SULD_D_R,
  SULD_P_I,
  SULD_P_TID,
  SULD_P_R,
  SURED_I,
  SURED_TID,
  SURED_R,
  SUST_D_I,
  SUST_D_TID,
  SUST_D_R,
  SUST_P_I,
  SUST_P_TID,
  SUST_P_R,
  TEX,
  TEX_B_noConst,
  TEX_B,
  TLD,
  TLD_B_noConst,
  TLD_B,
  TLD4,
  TLD4_B_noConst,
  TLD4_B,
  TMML,
  TMML_B_noConst,
  TMML_B,
  TXD,
  TXD_B_noConst,
  TXD_B,
  TXQ,
  TXQ_B_noConst,
  TXQ_B,
  ATOM,
  ATOM_CAS,
  ATOMS,
  ATOMS_CAS,
  BMOV_clear_Rd,
  BMOV_clear_Bd,
  BMOV_pquad_R,
  BMOV_pquad_I,
  BMOV_pquad_C,
  BMOV_pquad_B,
  BMOV_dst64_I,
  BMOV_dst64_R,
  BMOV_dst64_C,
  CALL_ABS_C,
  CALL_ABS_I,
  CALL_ABS_R,
  CALL_REL_I,
  CALL_REL_R,
  JMP_I,
  JMP_C,
  NANOSLEEP_R,
  NANOSLEEP_I,
  NANOSLEEP_C,
  NANOTRAP_R,
  NANOTRAP_I,
  NANOTRAP_C,
  RPCMOV_dstPc,
  RPCMOV_dstPc_imm,
  RPCMOV_dstPc_const,
  RPCMOV_srcPc,
  RPCMOV_dstPc64_I,
  RPCMOV_dstPc64_C,
  WARPSYNC_Rb,
  WARPSYNC_Imm,
  WARPSYNC_C,
  F2F_R,
  F2F_C,
  F2F_Imm,
  F2F64_R,
  F2F64_C,
  F2F64_Imm,
  F2I_R,
  F2I_C,
  F2I_I,
  F2I64_R,
  F2I64_C,
  F2I64_I,
  FRND_R,
  FRND_C,
  FRND_I,
  FRND64_R,
  FRND64_C,
  FRND64_I,
  I2F_R,
  I2F_C,
  I2F_I,
  I2F64_R,
  I2F64_C,
  I2F64_I,
  HADD2_Rb,
  HADD2_Imm,
  HADD2_c,
  HFMA2_Rb_Rc,
  HFMA2_Imm_Rc,
  HFMA2_c_Rc,
  HFMA2_Rb_c,
  HFMA2_Rb_Imm,
  HMMA_Rb_Rc,
  HMUL2_Rb,
  HMUL2_Imm,
  HMUL2_c,
  HSET2_Rb,
  HSET2_Imm,
  HSET2_c,
  HSETP2_Rb,
  HSETP2_Imm,
  HSETP2_c,
  FADD_Rb,
  FADD_Imm,
  FADD_c,
  FCHK_Rb,
  FCHK_Imm,
  FCHK_C,
  FFMA_Rb_Rc,
  FFMA_Imm_Rc,
  FFMA_Rb_Imm,
  FFMA_c_Rc,
  FFMA_Rb_c,
  FMNMX_Rb,
  FMNMX_Imm,
  FMNMX_C,
  FMUL_Rb,
  FMUL_Imm,
  FMUL_c,
  FSEL_Rb,
  FSEL_Imm,
  FSEL_C,
  FSET_Rb,
  FSET_Imm,
  FSET_C,
  FSETP_Rb,
  FSETP_Imm,
  FSETP_C,
  MUFU_Rb,
  MUFU_Imm,
  MUFU_c,
  DADD_Rc,
  DADD_Imm,
  DADD_C,
  DFMA_Rb_Rc,
  DFMA_Imm_Rc,
  DFMA_C_Rc,
  DFMA_Rb_Imm,
  DFMA_Rb_C,
  DMUL_Rb,
  DMUL_Imm,
  DMUL_C,
  DSETP_Rc,
  DSETP_Imm,
  DSETP_C,
  IPA_Rb,
  IPA_Imm,
  IPA_c,
  OUT_R,
  OUT_I,
  BMSK_Rb,
  BMSK_Imm,
  BMSK_C,
  BREV_Rb,
  BREV_Imm,
  BREV_C,
  FLO_Rb,
  FLO_Imm,
  FLO_C,
  I2I_Rb,
  I2I_Cb,
  I2I_Ib,
  I2IP_Rb,
  I2IP_Cb,
  I2IP_Ib,
  IABS_Rb,
  IABS_Imm,
  IABS_C,
  IADD3_Rb,
  IADD3_C,
  IADD3_Imm,
  IDP_Rb,
  IDP_C,
  IMAD_Rb_Rc,
  IMAD_Imm_Rc,
  IMAD_C_Rc,
  IMAD_Rb_Imm,
  IMAD_Rb_C,
  IMAD_WIDE_Rb_Rc,
  IMAD_WIDE_Imm_Rc,
  IMAD_WIDE_C_Rc,
  IMAD_WIDE_Rb_C,
  IMAD_HI_Rb_Rc,
  IMAD_HI_Imm_Rc,
  IMAD_HI_C_Rc,
  IMAD_HI_Rb_C,
  IMMA_Rb_Rc,
  IMNMX_Rb,
  IMNMX_Cb,
  IMNMX_Ib,
  ISETP_Rb,
  ISETP_Imm,
  ISETP_C,
  LEA_Rb_Rc,
  LEA_C_Rc,
  LEA_Imm_Rc,
  LEA_Rb_Imm,
  LOP3_Rb,
  LOP3_Imm,
  LOP3_C,
  PLOP3_0,
  PLOP3_1_R,
  PLOP3_1_C,
  PLOP3_2_R,
  PLOP3_2_C,
  PLOP3_3_R,
  PLOP3_3_C,
  MOV_Rb,
  MOV_Imm,
  MOV_c,
  P2R_Rb,
  P2R_Imm,
  P2R_C,
  POPC_Rb,
  POPC_Imm,
  POPC_C,
  PRMT_Rb_Rc,
  PRMT_Imm_Rc,
  PRMT_C_Rc,
  PRMT_Rb_Imm,
  PRMT_Rb_C,
  R2P_Rb,
  R2P_Imm,
  R2P_C,
  SEL_Rb,
  SEL_Imm,
  SEL_C,
  SGXT_Rb,
  SGXT_Imm,
  SGXT_C,
  SHF_Rb_Rc,
  SHF_Imm_Rc,
  SHF_Rb_Imm,
  SHF_C_Rc,
  SHF_Rb_C,
  VABSDIFF4_Rb_Rc,
  VABSDIFF4_Imm_Rc,
  VABSDIFF4_C_Rc,
  VABSDIFF4_Rb_Imm,
  VABSDIFF4_Rb_C,
  VABSDIFF_Rb_Rc,
  VABSDIFF_Imm_Rc,
  VABSDIFF_C_Rc,
  VABSDIFF_Rb_Imm,
  VABSDIFF_Rb_C,
  ATOMG,
  ATOMG_CAS,
  CCTLT_Rb,
  CCTLT_C,
  SHFL_Rb_Rc,
  SHFL_Imm_Rc,
  SHFL_Rb_Imm,
  SHFL_Imm_Imm,
  BAR_R,
  BAR_R_Imm,
  BAR_Imm_R,
  BAR_Imm_Imm,
  SUATOM_I,
  SUATOM_TID,
  SUATOM_R,
  SUATOM_I_CAS,
  SUATOM_TID_CAS,
  SUATOM_R_CAS,
  SULD_D_I,
  SULD_D_TID,
  SULD_D_R,
  SULD_P_I,
  SULD_P_TID,
  SULD_P_R,
  SURED_I,
  SURED_TID,
  SURED_R,
  SUST_D_I,
  SUST_D_TID,
  SUST_D_R,
  SUST_P_I,
  SUST_P_TID,
  SUST_P_R,
  TEX,
  TEX_B_noConst,
  TEX_B,
  TLD4,
  TLD4_B_noConst,
  TLD4_B,
  TLD,
  TLD_B_noConst,
  TLD_B,
  TMML,
  TMML_B_noConst,
  TMML_B,
  TXD,
  TXD_B_noConst,
  TXD_B,
  TXQ,
  TXQ_B_noConst,
  TXQ_B,
    BMOV_Rd_Rpc,
    BMOV_Rpc_Rb,
    BMOV_Rpc_Imm,
    BMOV_Rd_CBU,
    BMOV_CBU_Rb,
    BMOV_CBU_Ba,
    BMOV_CBU_Imm,
    JMP_CONST,
 DUMMY ;

    BarrierRegister B(0..63)=(0..63);






    REQ req*;
    RD rd*;
    WR wr*;


    SpecialRegister SR(0..255)=(0..255),

                      SR_LANEID = 0,
                      SR_CLOCK,
                      SR_VIRTCFG,
                      SR_VIRTID,


                      SR_ORDERING_TICKET=15,
                      SR_PRIM_TYPE,
                      SR_INVOCATION_ID,
                      SR_Y_DIRECTION,
                      SR_THREAD_KILL,
                      SM_SHADER_TYPE,
                      SR_DIRECTCBEWRITEADDRESSLOW=21,
                      SR_DIRECTCBEWRITEADDRESSHIGH=22,
                      SR_DIRECTCBEWRITEENABLED=23,
                      SR_MACHINE_ID_(0..3)=(24..27),
                      SR_AFFINITY,
                      SR_INVOCATION_INFO,
                      SR_WSCALEFACTOR_XY,
                      SR_WSCALEFACTOR_Z,
                      SR_TID=32, "SR_TID.X", "SR_TID.Y", "SR_TID.Z",

                      "SR_CTAID.X"=37, "SR_CTAID.Y", "SR_CTAID.Z",
                      SR_NTID,
                      SR_CirQueueIncrMinusOne, SR_NLATC,

                      SR_SM_SPA_VERSION=44,
                      SR_MULTIPASSSHADERINFO=45,
                      SR_LWINHI=46, SR_SWINHI,
                      SR_SWINLO=48, SR_SWINSZ,
                      SR_SMEMSZ, SR_SMEMBANKS,
                      SR_LWINLO, SR_LWINSZ,
                      SR_LMEMLOSZ, SR_LMEMHIOFF,
                      SR_EQMASK, SR_LTMASK, SR_LEMASK, SR_GTMASK, SR_GEMASK,
                      SR_REGALLOC, SR_BARRIERALLOC,

                      SR_GLOBALERRORSTATUS=64,

                      SR_WARPERRORSTATUS=66, SR_VIRTUALSMID,
                      SR_VIRTUALENGINEID,


                      SR_CLOCKLO=80, SR_CLOCKHI,
                      SR_GLOBALTIMERLO, SR_GLOBALTIMERHI,
                      SR_ESR_PC, SR_ESR_PC_HI,

                      SR_HWTASKID=96, SR_CIRCULARQUEUEENTRYINDEX,
                      SR_CIRCULARQUEUEENTRYADDRESSLOW,
                      SR_CIRCULARQUEUEENTRYADDRESSHIGH,
                      SR_PM0, SR_PM_HI0, SR_PM1, SR_PM_HI1, SR_PM2, SR_PM_HI2,
                      SR_PM3, SR_PM_HI3, SR_PM4, SR_PM_HI4, SR_PM5, SR_PM_HI5,
                      SR_PM6, SR_PM_HI6, SR_PM7, SR_PM_HI7,
                      SR_SNAP_PM0, SR_SNAP_PM_HI0, SR_SNAP_PM1, SR_SNAP_PM_HI1,
                      SR_SNAP_PM2, SR_SNAP_PM_HI2, SR_SNAP_PM3, SR_SNAP_PM_HI3,
                      SR_SNAP_PM4, SR_SNAP_PM_HI4, SR_SNAP_PM5, SR_SNAP_PM_HI5,
                      SR_SNAP_PM6, SR_SNAP_PM_HI6, SR_SNAP_PM7, SR_SNAP_PM_HI7,

                      SRZ=255;






    F2FRound1 PASS=1, PASS, PASS, RN, RM, RP, RZ, PASS=0, ROUND=4, FLOOR, CEIL, TRUNC;
    F2FRound2 PASS, ROUND=0, FLOOR, CEIL, TRUNC, RN=0, RM, RP, RZ;

    IPAOp PASS, MUL, CONSTANT, SC;
    IDXOnly IDX;


    AtomOp INVALIDATOMOP(0..15), ADD=0,MIN,MAX,INC,DEC,AND,OR,XOR,EXCH,SAFEADD=10;
    AtomsSz "32"=0, U32=0, S32=1, "64"=2, U64=2, S64=3;

    VMadScale PASS,SHR_7,SHR_15,INVALIDVMADSCALE3;
    INC NOINC,INC;
    IPAOpN MUL, SC;
    POP F, T, Z, NZ;
    PopcFmt "32", "16_V2", "8_V4", "INVALIDPOPCFMT3";

    CC CC=1;
    optCC noCC, CC;
    CCPR PR=0, CC=1;

    Float INVALIDFPDEST0, INVALIDFPSRC0=0, F16, F32, F64;

    F32 F32;
    FP16 noFP16=0, FP16=1;
    F2Ffmts1 "INVALIDFPDEST0.INVALIDFPSRC0"=0, "F32.F32"=10;
    F2Ffmts1_16 "F16.F16"=5;
    F2Ffmts1_64 "F64.F64"=15;

    Integer8 U8 = 0, S8 = 1;
    Invalid8 INVALID0 = 0, INVALID1 = 1;
    Integer16 U16 = 2, S16 = 3;
    Invalid16 INVALID2 = 2, INVALID3 = 3;
    Integer32 U32 = 4, S32 = 5;
    Invalid32 INVALID4 = 4, INVALID5 = 5;
    Integer64 U64 = 6, S64 = 7;
    Invalid64 INVALID6 = 6, INVALID7 = 7;
    Integer128 U128= 8, S128= 9;


    UInteger8 U8 = 0;
    UInteger16 U16 = 2;
    UInteger32 U32 = 4;
    UInteger64 U64 = 6;
    UInteger128 U128= 8;

    SInteger8 S8 = 1;
    SInteger16 S16 = 3;
    SInteger32 S32 = 5;
    SInteger64 S64 = 7;
    SInteger128 S128= 9;

    U8 U8 = 0;
    U16 U16 = 2;
    S16 S16 = 3;
    U32 U32 = 4, INVALIDASEL7=6, INVALIDBSEL7=6, INVALIDSEL7=6;
    IntegerSPA U32, S32, U24, S24, U16H0, S16H0, U16H1, S16H1;
    IntegerSPB U16H0, S16H0, U24, S24;
    IntegerSPC U32, S32, U24, S24, U16H0, S16H0;
    IMADSP_SD SD=3;
    VInteger32 U32 = 4, S32 = 5, INVALIDASEL7=7, INVALIDASEL6=6,
                      INVALIDBSEL7=7, INVALIDBSEL6=6, INVALIDSEL7=7, INVALIDSEL6=6;

    Integer = Integer8 + Integer16 + Integer32 + Integer64;
    UInteger_old = U8 + U16 + U32;
    LInteger = Integer8 + Integer16 + Integer32 + Integer64 + Integer128;
    Integer1632 = Integer16 + Integer32;
    IntegerNo8 = Invalid8 + Integer16 + Integer32 + Integer64;
    IntegerInv8No64 = Invalid8 + Integer16 + Integer32;
    IntegerNo16 = Integer8 + Integer32 + Integer64;
    IntegerNo64 = Integer8 + Integer16 + Integer32;
    IntegerNo16Inv64 = Integer8 + Integer32 + Invalid64;
    IntegerNo16No64 = Integer8 + Integer32;


    UInteger = UInteger8 + UInteger16 + UInteger32 + UInteger64;
    ULInteger = UInteger8 + UInteger16 + UInteger32 + UInteger64 + UInteger128;
    UInteger1632 = UInteger16 + UInteger32;
    UIntegerNo8 = Invalid8 + UInteger16 + UInteger32 + UInteger64;
    UIntegerInv8No64 = Invalid8 + UInteger16 + UInteger32;
    UIntegerNo16 = UInteger8 + UInteger32 + UInteger64;
    UIntegerNo64 = UInteger8 + UInteger16 + UInteger32;
    UIntegerNo16Inv64 = UInteger8 + UInteger32 + Invalid64;
    UIntegerNo16No64 = UInteger8 + UInteger32;
    UIntegerNo32No64 = UInteger8 + UInteger16;

    SInteger = SInteger8 + SInteger16 + SInteger32 + SInteger64;
    SLInteger = SInteger8 + SInteger16 + SInteger32 + SInteger64 + SInteger128;
    SInteger1632 = SInteger16 + SInteger32;
    SIntegerNo8 = Invalid8 + SInteger16 + SInteger32 + SInteger64;
    SIntegerInv8No64 = Invalid8 + SInteger16 + SInteger32;
    SIntegerNo16 = SInteger8 + SInteger32 + SInteger64;
    SIntegerNo64 = SInteger8 + SInteger16 + SInteger32;
    SIntegerNo16Inv64 = SInteger8 + SInteger32 + Invalid64;
    SIntegerNo16No64 = SInteger8 + SInteger32;
    SIntegerNo32No64 = SInteger8 + SInteger16;




    CInteger SD=0, "8"=0, "16"=2, U8=0, S8, U16, S16, "32", "64", "128", INVALIDSIZE7;

    CInteger_n64_n128 SD=0, "8"=0, "16"=2, U8=0, S8=1, U16=2, S16=3, "32"=4, INVALIDSIZE6=6, INVALIDSIZE7=7;
    CInteger_64 "64"=5;

    BQInteger "64", "128";
    SQInteger U8=7, S8=7, U16=7, S16=7, S128=7, F16=7, F64=7,
                      INVALIDATOMICSIZE13=7, INVALIDATOMICSIZE14=7, INVALIDATOMICSIZE15=7,
                      "32"=0, "64"=2, F32, "F16x2.FTZ.RN", "F16x2.RN"=4, U32=0, S32, U64, "F32.FTZ.RN", S64=5, "F64.RN", INVALIDATOMICSIZE7;
    AtomicInteger "32"=0, "64"=2, F32,
        "U32" = 0, "S32", "U64", "F32.FTZ.RN", "F16x2.FTZ.RN", "F16x2.RN"=4, "S64", "SD32", "SD64";
    CASInteger U32, U64, S32=0, S64, "32"=0, "64";
    ISBERDInteger U8, U16, "32";
    maxShift "32"=0, INVALIDMAXSHIFT3, U64, S64;
    DFormat UD,SD;

    F16RoundMode RTNE=0, RTZ;







    Test FALSE=0, ZFF=5, ZF0=5, LEG=7, U=8, ZFT=10, ZF1=10, TRUE=15, NOT_OVERFLOW=16, "0FF"=16,
              CFF=17, CARRY=17, ABOVE=18, SF0=18, SIGN=19, SF1=21, CFT=22, CF1=22, OF1=23, OVERFLOW=23,
              NOT_SIGN=28, BELOW_OR_EQUAL=29, NOT_CARRY=30, "1E"=30, "1F"=31,
              F=0, LT, EQ, LE, GT, NE, GE, NUM, NAN, LTU, EQU, LEU, GTU,
              NEU, GEU, T, OFF, LO, SFF, LS, HI, SFT, HS, OFT, CSM_TA,
              CSM_TR, CSM_MX, FCSM_TA, FCSM_TR, FCSM_MX, RLE, RGT;

    ICmpU LO=1, LS=3, HI=4, HS=6;


    IDEActionENOnly EN=0;
    IDEActionDIOnly DI=1;

    TPhase noPhase,T,P,INVALIDPHASE3;
    ITypeI I;
    ITypeF F;

    Partsel "32", H0, H1;
    B1B0 H0, H1=2, B(0..3)=(0..3);

    I2XH H0=0, INVALIDSIZE1, H1=2, INVALIDSIZE3;

    IDXRFOnly IDXRF;

    XMode noX, XLO, XMED, XHI;
    SHFXMode NONE, HI, X, XHI;
    XXHI noX, INVALIDSHRXMODE1, X, XHI;
    SHF_L L;
    SHF_R R;


    LDGcop1 CT;
    LDGcop2 CG, CS;
    XMADcop C32, CLO, CHI, CSFU, CBCC;
    XMADcop2 C32, CLO, CHI, CSFU;


    C C, c=0;
    V V, v=0;
    A A, a=0;
    B noB, B;
    CAST CAST;
    VTG VTG;
    LDG_E noE, E=2;
    S noS, S;

    noMSOnly noMS;
    MSOnly MS=1;

    PO noPO, PO;
    PSL noPSL, PSL;

    MRG noMRG, MRG;

    LMT noLMT, LMT;
    AVRG noAVRG, AVRG;
    TOFF1 noTOFF, AOFFI;
    TOFF2 noTOFF, AOFFI, PTP=2, INVALIDBTOFF03;
    BREV noBREV, BREV;
    LOD noLOD, LZ, LB, LL, INVALIDBLOD(4..5), LBA, LLA;
    LOD1 LZ,LL;
    LOD2 noLOD, LZ, LL;


    BPTMode DRAIN_ILLEGAL,CAL,PAUSE,TRAP,INT,DRAIN,PAUSE_QUIET;
    BPTModeN DRAIN,CAL,PAUSE;
    BPTModeN2 TRAP=3;




    MN MN,MX;


    Barmd BAR, RESULT, WARP, INVALID;

    OutType INVALIDOUTSTYPE0, EMIT, CUT, EMIT_THEN_CUT;

    PixMode MSCOUNT,COVMASK,COVERED,OFFSET,CENTROID_OFFSET,MY_INDEX,INVALIDPIXMODE(6..7),INVALID(0..1)=(6..7);

    BarSyncArv SYNC, ARV;

    Arv SYNC,ARV;
    RTTOp POPCRS, TERMINATE, FALLTHROUGH, PREEMPTED;
    RROOp SINCOS, EX2;
    Trig TRIG = 1;
    STPMode noWAIT, WAIT;
    ISBERDIO I, O;

    OnlyNoDep NODEP;


    LLoadCacheOp CS=0, CA=0, LU=1, CI=2, CV=3;

    OnlyQry QRY1;
    CCTLOp PF1=1, PF1.5, PF2, WB, IV, RS=7, RSLB=9, INVALIDCCTLOP(10..15);
    CCTLTOpIVALL IVALL=0;

    CCTLOpRSLB RSLB=9;
    OnlyIvall IVALL=6;
    CCTLLOp2 IVALL=6;


    RGBA2 INVALIDRGBA2MASK(1..7)=(1..7),
                   R=1, RG=3, RGBA=7;
    TEXWmsk2C R=0, G, B, A, RG, RA, GA, BA;
    TEXWmsk34C RGB=0, RGA, RBA, GBA, RGBA, INVALID5=5, INVALID6=6, INVALID7=7;
    Dim "1D", "2D", INVALIDSURFACEDIM2, "3D"=2, "E2D";
    BDim "1D", "MD";
    ThreeD "2D", "3D";
    TXQMode TEX_HEADER_DIMENSION, TEX_HEADER_TEXTURE_TYPE, TEX_HEADER_SAMPLER_POS, "3", "4", "5", "6", "7",
                   TEX_SAMPLER_FILTER, TEX_SAMPLER_LOD, TEX_SAMPLER_WRAP, TEX_SAMPLER_BORDER_COLOR, "12", "13",
                   "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29",
                   "30", "31";

    ParamA "_1D" = 0b00_0,
                   "1D" = 0b00_0,
                   RECT = 0b01_0,
                   "_2D" = 0b01_0,
                   "2D" = 0b01_0,
                   "_3D" = 0b10_0,
                   "3D" = 0b10_0,
                   CUBE = 0b11_0,
                   ARRAY_1D = 0b00_1,
                   ARRAY_RECT = 0b01_1,
                   ARRAY_2D = 0b01_1,
                   ARRAY_3D = 0b10_1,
                   CUBEARRAY = 0b11_1,
                   ARRAY_CUBE = 0b11_1;

    MemBarLevel CTA,GL,SYS,VC;
    MemBarIvall NOIVALL, IVALLD, IVALLT, IVALLTD;

    Cache3 D,U,C,I,CRS,INVALIDCCTLCACHEOP5=5,INVALIDCCTLCACHEOP6=6,INVALIDCCTLCACHEOP7=7,INVALIDCACHETYPE5=5,INVALIDCACHETYPE6=6,INVALIDCACHETYPE7=7;
    Cache3NoCI D,U,CRS=4,INVALIDCCTLCACHEOP5=5,INVALIDCCTLCACHEOP6=6,INVALIDCCTLCACHEOP7=7,INVALIDCACHETYPE5=5,INVALIDCACHETYPE6=6,INVALIDCACHETYPE7=7;

    CRSOnly CRS=1;




    LaneMask2
        X = 0b01,
        Y = 0b10,
        XY = 0b11;

    LaneMask4
        X = 0b0100,
        Y = 0b1000,
        Z = 0b0001,
        W = 0b0010,
        XW = 0b0110,
        YW = 0b1010,
        ZW = 0b0011,
        XZ = 0b0101,
        YZ = 0b1001,
        XY = 0b1100,
        YZW = 0b1011,
        XZW = 0b0111,
        XYW = 0b1110,
        XYZ = 0b1101,
        XYZW = 0b1111
        ;




   ASel4
        "0000","1111","2222","3333","3210","4321","5432","6543","3201","3012","0213","3120","1230","2310",
        ASEL4E, ASEL4F, INVALIDASEL4E=14, INVALIDASEL4F;

   BSel4
        "4444","5555","6666","7777","7654","6543","5432","4321","4567","6745","5476",BSEL4B,BSEL4C,BSEL4D,
        BSEL4E, INVALIDBSEL4B=11, INVALIDBSEL4C, INVALIDBSEL4D, INVALIDBSEL4E;

   Sel2
        "00","01","02","03",
        "10","11","12","13",
        "20","21","22","23",
        "30","31","32","33";


   Sel2hi
        "00","01",
        "10","11";


    PNWord
        PPPPPPPP,PPPPPPNP,PPPPPPPN,PPPPPPZP,PPPPNPPP,PPPPNPNP,PPPPNPPN,PPPPNPZP,
        PPPPPNPP,PPPPPNNP,PPPPPNPN,PPPPPNZP,PPPPZPPP,PPPPZPNP,PPPPZPPN,PPPPZPZP,
        PPNPPPPP,PPNPPPNP,PPNPPPPN,PPNPPPZP,PPNPNPPP,PPNPNPNP,PPNPNPPN,PPNPNPZP,
        PPNPPNPP,PPNPPNNP,PPNPPNPN,PPNPPNZP,PPNPZPPP,PPNPZPNP,PPNPZPPN,PPNPZPZP,
        PPPNPPPP,PPPNPPNP,PPPNPPPN,PPPNPPZP,PPPNNPPP,PPPNNPNP,PPPNNPPN,PPPNNPZP,
        PPPNPNPP,PPPNPNNP,PPPNPNPN,PPPNPNZP,PPPNZPPP,PPPNZPNP,PPPNZPPN,PPPNZPZP,
        PPZPPPPP,PPZPPPNP,PPZPPPPN,PPZPPPZP,PPZPNPPP,PPZPNPNP,PPZPNPPN,PPZPNPZP,
        PPZPPNPP,PPZPPNNP,PPZPPNPN,PPZPPNZP,PPZPZPPP,PPZPZPNP,PPZPZPPN,PPZPZPZP,
        NPPPPPPP,NPPPPPNP,NPPPPPPN,NPPPPPZP,NPPPNPPP,NPPPNPNP,NPPPNPPN,NPPPNPZP,
        NPPPPNPP,NPPPPNNP,NPPPPNPN,NPPPPNZP,NPPPZPPP,NPPPZPNP,NPPPZPPN,NPPPZPZP,
        NPNPPPPP,NPNPPPNP,NPNPPPPN,NPNPPPZP,NPNPNPPP,NPNPNPNP,NPNPNPPN,NPNPNPZP,
        NPNPPNPP,NPNPPNNP,NPNPPNPN,NPNPPNZP,NPNPZPPP,NPNPZPNP,NPNPZPPN,NPNPZPZP,
        NPPNPPPP,NPPNPPNP,NPPNPPPN,NPPNPPZP,NPPNNPPP,NPPNNPNP,NPPNNPPN,NPPNNPZP,
        NPPNPNPP,NPPNPNNP,NPPNPNPN,NPPNPNZP,NPPNZPPP,NPPNZPNP,NPPNZPPN,NPPNZPZP,
        NPZPPPPP,NPZPPPNP,NPZPPPPN,NPZPPPZP,NPZPNPPP,NPZPNPNP,NPZPNPPN,NPZPNPZP,
        NPZPPNPP,NPZPPNNP,NPZPPNPN,NPZPPNZP,NPZPZPPP,NPZPZPNP,NPZPZPPN,NPZPZPZP,
        PNPPPPPP,PNPPPPNP,PNPPPPPN,PNPPPPZP,PNPPNPPP,PNPPNPNP,PNPPNPPN,PNPPNPZP,
        PNPPPNPP,PNPPPNNP,PNPPPNPN,PNPPPNZP,PNPPZPPP,PNPPZPNP,PNPPZPPN,PNPPZPZP,
        PNNPPPPP,PNNPPPNP,PNNPPPPN,PNNPPPZP,PNNPNPPP,PNNPNPNP,PNNPNPPN,PNNPNPZP,
        PNNPPNPP,PNNPPNNP,PNNPPNPN,PNNPPNZP,PNNPZPPP,PNNPZPNP,PNNPZPPN,PNNPZPZP,
        PNPNPPPP,PNPNPPNP,PNPNPPPN,PNPNPPZP,PNPNNPPP,PNPNNPNP,PNPNNPPN,PNPNNPZP,
        PNPNPNPP,PNPNPNNP,PNPNPNPN,PNPNPNZP,PNPNZPPP,PNPNZPNP,PNPNZPPN,PNPNZPZP,
        PNZPPPPP,PNZPPPNP,PNZPPPPN,PNZPPPZP,PNZPNPPP,PNZPNPNP,PNZPNPPN,PNZPNPZP,
        PNZPPNPP,PNZPPNNP,PNZPPNPN,PNZPPNZP,PNZPZPPP,PNZPZPNP,PNZPZPPN,PNZPZPZP,
        ZPPPPPPP,ZPPPPPNP,ZPPPPPPN,ZPPPPPZP,ZPPPNPPP,ZPPPNPNP,ZPPPNPPN,ZPPPNPZP,
        ZPPPPNPP,ZPPPPNNP,ZPPPPNPN,ZPPPPNZP,ZPPPZPPP,ZPPPZPNP,ZPPPZPPN,ZPPPZPZP,
        ZPNPPPPP,ZPNPPPNP,ZPNPPPPN,ZPNPPPZP,ZPNPNPPP,ZPNPNPNP,ZPNPNPPN,ZPNPNPZP,
        ZPNPPNPP,ZPNPPNNP,ZPNPPNPN,ZPNPPNZP,ZPNPZPPP,ZPNPZPNP,ZPNPZPPN,ZPNPZPZP,
        ZPPNPPPP,ZPPNPPNP,ZPPNPPPN,ZPPNPPZP,ZPPNNPPP,ZPPNNPNP,ZPPNNPPN,ZPPNNPZP,
        ZPPNPNPP,ZPPNPNNP,ZPPNPNPN,ZPPNPNZP,ZPPNZPPP,ZPPNZPNP,ZPPNZPPN,ZPPNZPZP,
        ZPZPPPPP,ZPZPPPNP,ZPZPPPPN,ZPZPPPZP,ZPZPNPPP,ZPZPNPNP,ZPZPNPPN,ZPZPNPZP,
        ZPZPPNPP,ZPZPPNNP,ZPZPPNPN,ZPZPPNZP,ZPZPZPPP,ZPZPZPNP,ZPZPZPPN,ZPZPZPZP;


COLONLY "COL"=1;



ISWZ "H1_H1"=3 , "H1_H0"=0 , "F32"=1 , "H0_H0"=2;



ROWONLY "ROW"=0;



SIGNONLY "SIGN"=0;



TNSPA "ROW"=0 , "COL"=1;



TNSPA_hmma "notnspa_hmma"=0 , "T"=1;


B3B0 "B0"=0 , "B1"=1 , "B2"=2 , "B3"=3;


HSEL "H0"=0 , "H1"=1 , "INVALID2"=2 , "INVALID3"=3;


REUSE "noreuse"=0 , "reuse"=1;


RelOpt "REL";

ABSONLY "ABS";

ABSONLY_ret "ABS"=1;

AIO "I"=0 , "O"=1;

AInteger "_128"=3 , "128"=3 , "_32"=0 , "32"=0 , "_64"=1 , "64"=1 , "_96"=2 , "96"=2;

ALLOnly "ALL"=0;

ANYONLY "ANY"=1;

AOFFI "noaoffi"=0 , "AOFFI"=1;

ATEXIT_PCONLY "ATEXIT_PC";

ATOMCASSZ "U32"=0 , "_32"=0 , "32"=0 , "S32"=1 , "U64"=2 , "_64"=2 , "64"=2 , "INVALID3"=3 , "INVALID4"=4 , "INVALID5"=5 , "INVALID6"=6 , "INVALID7"=7;

ATOMGOP_DIST "AND"=5 , "ADD"=0 , "SAFEADD"=9 , "XOR"=7 , "MIN"=1 , "MAX"=2 , "DEC"=4 , "OR"=6 , "EXCH"=8 , "INC"=3 , "INVALID10"=10 , "INVALID11"=11 , "INVALID12"=12 , "INVALID13"=13 , "INVALID14"=14 , "INVALID15"=15;

AdMode "IA"=0 , "IL"=1 , "IS"=2 , "ISL"=3;

AtomsOp "ADD"=0 , "MIN"=1 , "MAX"=2 , "INC"=3 , "DEC"=4 , "AND"=5 , "OR"=6 , "XOR"=7 , "EXCH"=8 , "INVALID9"=9 , "INVALID10"=10 , "INVALID11"=11 , "INVALID12"=12 , "INVALID13"=13 , "INVALID14"=14 , "INVALID15"=15;

AtomsSPIN "noatomsspin"=0 , "SPIN"=1;

BA "noba"=0 , "BA"=1;

BASE "MAP"=0 , "PRIM"=2 , "ATTR"=3 , "PATCH"=1;

BATCH_T "BARRIER_EXEMPT"=5 , "BATCH_START_TILE"=2 , "BATCH_END"=4 , "REQ_BAR"=3 , "NOP"=0 , "BATCH_START"=1;

BD "B10"=10 , "B11"=11 , "B14"=14 , "B4"=4 , "B5"=5 , "B6"=6 , "B7"=7 , "B0"=0 , "B1"=1 , "B2"=2 , "B3"=3 , "B15"=15 , "B12"=12 , "B8"=8 , "B9"=9 , "B13"=13;

BFONLY "BF"=0;

BONLY "B"=1;

BPT_INT_DRAIN "INT"=4 , "DRAIN"=5;

BPT_PAUSE_TRAP_PAUSE_QUIET "PAUSE"=2 , "TRAP"=3 , "PAUSE_QUIET"=6;

BVal "BM"=0 , "BF"=1;

BarArv "ARV"=1;

BarRED "RED"=2;

BarSCAN "SCAN"=3;

BarSYNCALL "SYNCALL"=4;

BarSync "SYNC"=0;

BarmdBAR "BAR"=0;

BarmdRESULT "RESULT"=1;

BarmdWARP "WARP"=2;

Bop "AND"=0 , "OR"=1 , "XOR"=2 , "INVALID3"=3;

CACHE_D_U "D"=0 , "U"=1;

CALL_DEPTH "NOINC"=1 , "INC"=0;

CAS "CAS"=0;

CASTONLY "CAST"=1;

CBU_STATE_DIST "MACTIVE"=26 , "MKILL"=25 , "B14"=14 , "B15"=15 , "B12"=12 , "B13"=13 , "B10"=10 , "B11"=11 , "MEXITED"=24 , "MATEXIT"=27 , "ATEXIT_PC.LO"=30 , "ATEXIT_PC.HI"=31 , "OPT_STACK"=28 , "TRAP_RETURN_MASK"=23 , "TRAP_RETURN_PC.LO"=21 , "TRAP_RETURN_PC.HI"=22 , "THREAD_STATE_ENUM.4"=20 , "THREAD_STATE_ENUM.3"=19 , "THREAD_STATE_ENUM.2"=18 , "THREAD_STATE_ENUM.1"=17 , "THREAD_STATE_ENUM.0"=16 , "B4"=4 , "B5"=5 , "B6"=6 , "B7"=7 , "B0"=0 , "B1"=1 , "B2"=2 , "B3"=3 , "B8"=8 , "B9"=9 , "API_CALL_DEPTH"=29;

CBU_STATE_NONBAR_DIST "MACTIVE"=26 , "MKILL"=25 , "MEXITED"=24 , "MATEXIT"=27 , "ATEXIT_PC.LO"=30 , "ATEXIT_PC.HI"=31 , "OPT_STACK"=28 , "TRAP_RETURN_MASK"=23 , "TRAP_RETURN_PC.LO"=21 , "TRAP_RETURN_PC.HI"=22 , "THREAD_STATE_ENUM.4"=20 , "THREAD_STATE_ENUM.3"=19 , "THREAD_STATE_ENUM.2"=18 , "THREAD_STATE_ENUM.1"=17 , "THREAD_STATE_ENUM.0"=16 , "API_CALL_DEPTH"=29;

CCMP_DIST "F"=0 , "CSM_TA"=1 , "CSM_TR"=2 , "CSM_MX"=3 , "T"=4 , "FCSM_TA"=5 , "FCSM_TR"=6 , "FCSM_MX"=7;

CCTLTOp "IVTH"=1;

CL "nocl"=0 , "CL"=1;

CLEARONLY "CLEAR"=1;

CLEAR_DIST "noclear_dist"=0 , "CLEAR"=1;

COND "nocond"=0 , "U"=1 , "DIV"=2 , "CONV"=3;

CONLY "C"=2;

COP "EF"=0 , "EN"=1 , "EL"=2 , "LU"=3 , "EU"=4 , "NA"=5 , "INVALID6"=6 , "INVALID7"=7;

COP_IVALL_IVALLP_WBALL_WBALLP "IVALL"=4 , "IVALLP"=6 , "WBALL"=7 , "WBALLP"=8;

COP_IVALL_WBALL "IVALL"=4 , "WBALL"=7;

COP_PF1_PF2_WB_IV_RS "PF1"=0 , "PF2"=1 , "WB"=2 , "IV"=3 , "RS"=5;

CTA_DIM "X"=0 , "Y"=1 , "Z"=2 , "ALL"=3;

CUTONLY "CUT"=2;

CWMode "C"=0 , "W"=1;

Cache "D"=0 , "U"=1 , "C"=2 , "I"=3;

ChkMode "DIVIDE"=0;

Clamp1 "IGN"=0 , "NEAR"=1 , "TRAP"=2 , "INVALID3"=3;

DC "nodc"=0 , "DC"=1;

DEFER_BLOCKINGONLY "DEFER_BLOCKING"=1;

DEPTH "nodepth"=0 , "INC"=1 , "DEC"=2 , "INVALID3"=3;

DOnly "D"=0;

DSETP_FCMP "MIN"=0 , "LT"=1 , "EQ"=2 , "LE"=3 , "GT"=4 , "NE"=5 , "GE"=6 , "NUM"=7 , "NAN"=8 , "LTU"=9 , "EQU"=10 , "LEU"=11 , "GTU"=12 , "NEU"=13 , "GEU"=14 , "MAX"=15;

DSTFMT "U8"=0 , "S8"=1 , "U16"=2 , "S16"=3;

DSTFMT_F16_F32 "F16"=1 , "F32"=2;

DSTFMT_U64_S64 "U64"=6 , "S64"=7;

DSTFMT_U8_S8_U16_S16_U32_S32 "U8"=0 , "S8"=1 , "U16"=2 , "S16"=3 , "U32"=4 , "S32"=5;

Dim1 "_1D"=0 , "1D"=0 , "_1D_BUFFER"=1 , "1D_BUFFER"=1 , "_1D_ARRAY"=2 , "1D_ARRAY"=2 , "_2D"=3 , "2D"=3 , "_2D_ARRAY"=4 , "2D_ARRAY"=4 , "_3D"=5 , "3D"=5 , "INVALID6"=6 , "INVALID7"=7;

E "noe"=0 , "E"=1;

EX "noex"=0 , "EX"=1;

EXIT_MODE "noexit_mode"=0 , "KEEPREFCOUNT"=1 , "PREEMPTED"=2 , "INVALID3"=3;

F16ONLY "F16"=5;

F16ONLY_hmma "F16"=0;

F16RM "nof16rm"=0 , "F16.RN"=1 , "F16.RZ"=2 , "INVALID3"=3;

F2Ffmts2 "F16.F32"=9;

F2Ffmts2_16 "F32.F16"=6;

F2Ffmts2_64 "F16.F64"=13 , "F32.F64"=14;

F2Ffmts2_64_16 "F64.F16"=7;

F2Ffmts2_64_32 "F64.F32"=11;

F32ONLY "F32"=10;

F32ONLY_hmma "F32"=1;

F64ONLY "F64"=15;

FCMP "F"=0 , "LT"=1 , "EQ"=2 , "LE"=3 , "GT"=4 , "NE"=5 , "GE"=6 , "NUM"=7 , "NAN"=8 , "LTU"=9 , "EQU"=10 , "LEU"=11 , "GTU"=12 , "NEU"=13 , "GEU"=14 , "T"=15;

FINALONLY "FINAL"=0;

FMT "U32"=0 , "S32"=1;

FMT_S32_U32 "S32"=2 , "U32"=3 , "INVALID0"=0 , "INVALID1"=1;

FMT_shf "S64"=0 , "U64"=1 , "S32"=2 , "U32"=3;

FMZ "nofmz"=0 , "FMZ"=1 , "FTZ"=2 , "INVALID3"=3;

FTZ "noftz"=0 , "FTZ"=1;

Float16 "F16"=1;

Float32 "F32"=2;

Float64 "F64"=3;

FloatNo64 "F32"=1 , "F16"=0;

HILO "LO"=0 , "HI"=1;

HIONLY "HI"=2;

HIONLY_lea "HI"=1;

H_AND "noh_and"=0 , "H_AND"=1;

ICmpAll "F"=0 , "LT"=1 , "EQ"=2 , "LE"=3 , "GT"=4 , "NE"=5 , "GE"=6 , "T"=7;

IDEAction "EN"=0 , "DI"=1;

IONLY "I"=3;

ISBERD_SZ "_32"=2 , "32"=2 , "U8"=0 , "U16"=1 , "INVALID3"=3;

IVALLONLY "IVALL"=2;

LC "nolc"=0 , "LC"=1;

LDSSIZE_DIST "U.S16"=11 , "S8"=1 , "U8"=0 , "U.U8"=8 , "_64"=5 , "64"=5 , "_128"=6 , "128"=6 , "U.S8"=9 , "U16"=2 , "U.128"=14 , "_32"=4 , "32"=4 , "S16"=3 , "U.32"=12 , "U"=12 , "U.U16"=10 , "U.64"=13;

LEONLY "LE"=1;

LODLC "nolodlc"=0 , "LB"=2 , "LC"=4 , "LL"=3 , "LB.LC"=5 , "LZ"=1 , "INVALID6"=6 , "INVALID7"=7;

LODLC_LL_LZ "LL"=3 , "LZ"=1 , "INVALID0"=0 , "INVALID2"=2 , "INVALID4"=4 , "INVALID5"=5 , "INVALID6"=6 , "INVALID7"=7;

LODOnly "LOD"=0;

LOOnly "LO"=0;

LOP "AND"=0 , "OR"=1 , "XOR"=2 , "PASS_B"=3;

LOP_POP "POR"=0 , "PAND"=1;

LUTOnly "LUT"=0;

MATCH_SZ "U64"=1 , "U32"=0;

MEMBAR_MMIO "nomembar_mmio"=0 , "MMIO"=1;

MEMBAR_SCO "CTA"=0 , "SM"=1 , "GPU"=2 , "SYS"=3 , "VC"=5 , "INVALID4"=4 , "INVALID6"=6 , "INVALID7"=7;

MEMBAR_SEM "SC"=0 , "ALL"=1 , "nomembar_sem"=2 , "INVALID3"=3;

MODE "PASS"=0 , "CONSTANT"=1 , "STATE"=2 , "INVALID3"=3;

MODE_2ALO_2AHI "_2A.LO"=1 , "2A.LO"=1 , "_2A.HI"=3 , "2A.HI"=3;

MODE_BAR_WARP "BAR"=0 , "WARP"=2 , "INVALID1"=1 , "INVALID3"=3;

MS "noms"=0 , "MS"=1;

MSI_CENTER_CENTROID "CENTER"=0 , "CENTROID"=1;

MufuOp "COS"=0 , "SIN"=1 , "EX2"=2 , "LG2"=3 , "RCP"=4 , "RSQ"=5 , "RCP64H"=6 , "RSQ64H"=7 , "SQRT"=8 , "INVALID9"=9 , "INVALID10"=10 , "INVALID11"=11 , "INVALID12"=12 , "INVALID13"=13 , "INVALID14"=14 , "INVALID15"=15;

NDV "nondv"=0 , "NDV"=1;

NODEP "nonodep"=0 , "NODEP"=1;

NO_ATEXIT "nono_atexit"=0 , "NO_ATEXIT"=1;

NP "PPPPPPPP"=0 , "PPPPPPPN"=1 , "PPPPPPNP"=2 , "PPPPPPZP"=3 , "PPPPPNPP"=4 , "PPPPPNPN"=5 , "PPPPPNNP"=6 , "PPPPPNZP"=7 , "PPPPNPPP"=8 , "PPPPNPPN"=9 , "PPPPNPNP"=10 , "PPPPNPZP"=11 , "PPPPZPPP"=12 , "PPPPZPPN"=13 , "PPPPZPNP"=14 , "PPPPZPZP"=15 , "PPPNPPPP"=16 , "PPPNPPPN"=17 , "PPPNPPNP"=18 , "PPPNPPZP"=19 , "PPPNPNPP"=20 , "PPPNPNPN"=21 , "PPPNPNNP"=22 , "PPPNPNZP"=23 , "PPPNNPPP"=24 , "PPPNNPPN"=25 , "PPPNNPNP"=26 , "PPPNNPZP"=27 , "PPPNZPPP"=28 , "PPPNZPPN"=29 , "PPPNZPNP"=30 , "PPPNZPZP"=31 , "PPNPPPPP"=32 , "PPNPPPPN"=33 , "PPNPPPNP"=34 , "PPNPPPZP"=35 , "PPNPPNPP"=36 , "PPNPPNPN"=37 , "PPNPPNNP"=38 , "PPNPPNZP"=39 , "PPNPNPPP"=40 , "PPNPNPPN"=41 , "PPNPNPNP"=42 , "PPNPNPZP"=43 , "PPNPZPPP"=44 , "PPNPZPPN"=45 , "PPNPZPNP"=46 , "PPNPZPZP"=47 , "PPZPPPPP"=48 , "PPZPPPPN"=49 , "PPZPPPNP"=50 , "PPZPPPZP"=51 , "PPZPPNPP"=52 , "PPZPPNPN"=53 , "PPZPPNNP"=54 , "PPZPPNZP"=55 , "PPZPNPPP"=56 , "PPZPNPPN"=57 , "PPZPNPNP"=58 , "PPZPNPZP"=59 , "PPZPZPPP"=60 , "PPZPZPPN"=61 , "PPZPZPNP"=62 , "PPZPZPZP"=63 , "PNPPPPPP"=64 , "PNPPPPPN"=65 , "PNPPPPNP"=66 , "PNPPPPZP"=67 , "PNPPPNPP"=68 , "PNPPPNPN"=69 , "PNPPPNNP"=70 , "PNPPPNZP"=71 , "PNPPNPPP"=72 , "PNPPNPPN"=73 , "PNPPNPNP"=74 , "PNPPNPZP"=75 , "PNPPZPPP"=76 , "PNPPZPPN"=77 , "PNPPZPNP"=78 , "PNPPZPZP"=79 , "PNPNPPPP"=80 , "PNPNPPPN"=81 , "PNPNPPNP"=82 , "PNPNPPZP"=83 , "PNPNPNPP"=84 , "PNPNPNPN"=85 , "PNPNPNNP"=86 , "PNPNPNZP"=87 , "PNPNNPPP"=88 , "PNPNNPPN"=89 , "PNPNNPNP"=90 , "PNPNNPZP"=91 , "PNPNZPPP"=92 , "PNPNZPPN"=93 , "PNPNZPNP"=94 , "PNPNZPZP"=95 , "PNNPPPPP"=96 , "PNNPPPPN"=97 , "PNNPPPNP"=98 , "PNNPPPZP"=99 , "PNNPPNPP"=100 , "PNNPPNPN"=101 , "PNNPPNNP"=102 , "PNNPPNZP"=103 , "PNNPNPPP"=104 , "PNNPNPPN"=105 , "PNNPNPNP"=106 , "PNNPNPZP"=107 , "PNNPZPPP"=108 , "PNNPZPPN"=109 , "PNNPZPNP"=110 , "PNNPZPZP"=111 , "PNZPPPPP"=112 , "PNZPPPPN"=113 , "PNZPPPNP"=114 , "PNZPPPZP"=115 , "PNZPPNPP"=116 , "PNZPPNPN"=117 , "PNZPPNNP"=118 , "PNZPPNZP"=119 , "PNZPNPPP"=120 , "PNZPNPPN"=121 , "PNZPNPNP"=122 , "PNZPNPZP"=123 , "PNZPZPPP"=124 , "PNZPZPPN"=125 , "PNZPZPNP"=126 , "PNZPZPZP"=127 , "NPPPPPPP"=128 , "NPPPPPPN"=129 , "NPPPPPNP"=130 , "NPPPPPZP"=131 , "NPPPPNPP"=132 , "NPPPPNPN"=133 , "NPPPPNNP"=134 , "NPPPPNZP"=135 , "NPPPNPPP"=136 , "NPPPNPPN"=137 , "NPPPNPNP"=138 , "NPPPNPZP"=139 , "NPPPZPPP"=140 , "NPPPZPPN"=141 , "NPPPZPNP"=142 , "NPPPZPZP"=143 , "NPPNPPPP"=144 , "NPPNPPPN"=145 , "NPPNPPNP"=146 , "NPPNPPZP"=147 , "NPPNPNPP"=148 , "NPPNPNPN"=149 , "NPPNPNNP"=150 , "NPPNPNZP"=151 , "NPPNNPPP"=152 , "NPPNNPPN"=153 , "NPPNNPNP"=154 , "NPPNNPZP"=155 , "NPPNZPPP"=156 , "NPPNZPPN"=157 , "NPPNZPNP"=158 , "NPPNZPZP"=159 , "NPNPPPPP"=160 , "NPNPPPPN"=161 , "NPNPPPNP"=162 , "NPNPPPZP"=163 , "NPNPPNPP"=164 , "NPNPPNPN"=165 , "NPNPPNNP"=166 , "NPNPPNZP"=167 , "NPNPNPPP"=168 , "NPNPNPPN"=169 , "NPNPNPNP"=170 , "NPNPNPZP"=171 , "NPNPZPPP"=172 , "NPNPZPPN"=173 , "NPNPZPNP"=174 , "NPNPZPZP"=175 , "NPZPPPPP"=176 , "NPZPPPPN"=177 , "NPZPPPNP"=178 , "NPZPPPZP"=179 , "NPZPPNPP"=180 , "NPZPPNPN"=181 , "NPZPPNNP"=182 , "NPZPPNZP"=183 , "NPZPNPPP"=184 , "NPZPNPPN"=185 , "NPZPNPNP"=186 , "NPZPNPZP"=187 , "NPZPZPPP"=188 , "NPZPZPPN"=189 , "NPZPZPNP"=190 , "NPZPZPZP"=191 , "ZPPPPPPP"=192 , "ZPPPPPPN"=193 , "ZPPPPPNP"=194 , "ZPPPPPZP"=195 , "ZPPPPNPP"=196 , "ZPPPPNPN"=197 , "ZPPPPNNP"=198 , "ZPPPPNZP"=199 , "ZPPPNPPP"=200 , "ZPPPNPPN"=201 , "ZPPPNPNP"=202 , "ZPPPNPZP"=203 , "ZPPPZPPP"=204 , "ZPPPZPPN"=205 , "ZPPPZPNP"=206 , "ZPPPZPZP"=207 , "ZPPNPPPP"=208 , "ZPPNPPPN"=209 , "ZPPNPPNP"=210 , "ZPPNPPZP"=211 , "ZPPNPNPP"=212 , "ZPPNPNPN"=213 , "ZPPNPNNP"=214 , "ZPPNPNZP"=215 , "ZPPNNPPP"=216 , "ZPPNNPPN"=217 , "ZPPNNPNP"=218 , "ZPPNNPZP"=219 , "ZPPNZPPP"=220 , "ZPPNZPPN"=221 , "ZPPNZPNP"=222 , "ZPPNZPZP"=223 , "ZPNPPPPP"=224 , "ZPNPPPPN"=225 , "ZPNPPPNP"=226 , "ZPNPPPZP"=227 , "ZPNPPNPP"=228 , "ZPNPPNPN"=229 , "ZPNPPNNP"=230 , "ZPNPPNZP"=231 , "ZPNPNPPP"=232 , "ZPNPNPPN"=233 , "ZPNPNPNP"=234 , "ZPNPNPZP"=235 , "ZPNPZPPP"=236 , "ZPNPZPPN"=237 , "ZPNPZPNP"=238 , "ZPNPZPZP"=239 , "ZPZPPPPP"=240 , "ZPZPPPPN"=241 , "ZPZPPPNP"=242 , "ZPZPPPZP"=243 , "ZPZPPNPP"=244 , "ZPZPPNPN"=245 , "ZPZPPNNP"=246 , "ZPZPPNZP"=247 , "ZPZPNPPP"=248 , "ZPZPNPPN"=249 , "ZPZPNPNP"=250 , "ZPZPNPZP"=251 , "ZPZPZPPP"=252 , "ZPZPZPPN"=253 , "ZPZPZPNP"=254 , "ZPZPZPZP"=255;

NTZ "nontz"=0 , "NTZ"=1;

NonZeroRegister "R147"=147 , "R146"=146 , "R145"=145 , "R144"=144 , "R143"=143 , "R142"=142 , "R141"=141 , "R140"=140 , "R254"=254 , "R253"=253 , "R178"=178 , "R149"=149 , "R148"=148 , "R179"=179 , "R38"=38 , "R39"=39 , "R34"=34 , "R35"=35 , "R36"=36 , "R37"=37 , "R30"=30 , "R31"=31 , "R32"=32 , "R33"=33 , "R4"=4 , "R5"=5 , "R6"=6 , "R7"=7 , "R0"=0 , "R1"=1 , "R2"=2 , "R3"=3 , "R8"=8 , "R9"=9 , "R89"=89 , "R88"=88 , "R170"=170 , "R171"=171 , "R176"=176 , "R177"=177 , "R174"=174 , "R175"=175 , "R81"=81 , "R80"=80 , "R83"=83 , "R82"=82 , "R85"=85 , "R84"=84 , "R87"=87 , "R86"=86 , "R51"=51 , "R43"=43 , "R73"=73 , "R129"=129 , "R169"=169 , "R168"=168 , "R98"=98 , "R99"=99 , "R96"=96 , "R97"=97 , "R94"=94 , "R95"=95 , "R92"=92 , "R93"=93 , "R90"=90 , "R91"=91 , "R16"=16 , "R17"=17 , "R14"=14 , "R15"=15 , "R12"=12 , "R13"=13 , "R10"=10 , "R11"=11 , "R47"=47 , "R18"=18 , "R19"=19 , "R46"=46 , "R251"=251 , "R41"=41 , "R250"=250 , "R40"=40 , "R200"=200 , "R201"=201 , "R202"=202 , "R203"=203 , "R204"=204 , "R205"=205 , "R206"=206 , "R207"=207 , "R208"=208 , "R209"=209 , "R42"=42 , "R118"=118 , "R119"=119 , "R110"=110 , "R111"=111 , "R112"=112 , "R113"=113 , "R114"=114 , "R115"=115 , "R116"=116 , "R117"=117 , "R63"=63 , "R62"=62 , "R61"=61 , "R60"=60 , "R67"=67 , "R66"=66 , "R65"=65 , "R64"=64 , "R150"=150 , "R69"=69 , "R68"=68 , "R151"=151 , "R213"=213 , "R212"=212 , "R211"=211 , "R210"=210 , "R217"=217 , "R216"=216 , "R215"=215 , "R214"=214 , "R219"=219 , "R218"=218 , "R109"=109 , "R108"=108 , "R103"=103 , "R102"=102 , "R101"=101 , "R100"=100 , "R107"=107 , "R106"=106 , "R105"=105 , "R104"=104 , "R70"=70 , "R71"=71 , "R158"=158 , "R252"=252 , "R72"=72 , "R159"=159 , "R190"=190 , "R191"=191 , "R192"=192 , "R193"=193 , "R194"=194 , "R75"=75 , "R76"=76 , "R77"=77 , "R78"=78 , "R74"=74 , "R243"=243 , "R195"=195 , "R136"=136 , "R137"=137 , "R134"=134 , "R135"=135 , "R132"=132 , "R133"=133 , "R130"=130 , "R131"=131 , "R226"=226 , "R227"=227 , "R224"=224 , "R197"=197 , "R222"=222 , "R223"=223 , "R220"=220 , "R139"=139 , "R198"=198 , "R196"=196 , "R79"=79 , "R221"=221 , "R183"=183 , "R182"=182 , "R181"=181 , "R180"=180 , "R187"=187 , "R186"=186 , "R185"=185 , "R184"=184 , "R189"=189 , "R188"=188 , "R49"=49 , "R48"=48 , "R121"=121 , "R238"=238 , "R123"=123 , "R122"=122 , "R125"=125 , "R124"=124 , "R127"=127 , "R126"=126 , "R231"=231 , "R128"=128 , "R233"=233 , "R232"=232 , "R235"=235 , "R234"=234 , "R237"=237 , "R236"=236 , "R165"=165 , "R164"=164 , "R239"=239 , "R167"=167 , "R166"=166 , "R228"=228 , "R161"=161 , "R229"=229 , "R199"=199 , "R160"=160 , "R58"=58 , "R59"=59 , "R138"=138 , "R163"=163 , "R52"=52 , "R53"=53 , "R50"=50 , "R162"=162 , "R56"=56 , "R57"=57 , "R54"=54 , "R55"=55 , "R120"=120 , "R45"=45 , "R225"=225 , "R154"=154 , "R155"=155 , "R156"=156 , "R157"=157 , "R248"=248 , "R249"=249 , "R152"=152 , "R153"=153 , "R244"=244 , "R245"=245 , "R246"=246 , "R247"=247 , "R240"=240 , "R241"=241 , "R242"=242 , "R44"=44 , "R172"=172 , "R230"=230 , "R173"=173 , "R29"=29 , "R28"=28 , "R27"=27 , "R26"=26 , "R25"=25 , "R24"=24 , "R23"=23 , "R22"=22 , "R21"=21 , "R20"=20;


OFFSETONLY "OFFSET"=2;

OFMT "F32"=1 , "F16_V2"=0;

ONLY32 "_32"=0 , "32"=0;

ONLY444 "_444"=1 , "444"=1;

ONLY4A "_4A"=0 , "4A"=0;

ONLY64 "_64"=0 , "64"=0;

ONLY848 "_848"=0 , "848"=0;

ONLY8816 "_8816"=0 , "8816"=0;

ONLY884 "_884"=0 , "884"=0;

OPTIONAL_WARP "nooptional_warp"=0 , "WARP"=1;

PARAMA_ARRAY_2D_ARRAY_1D_2D_1D "ARRAY_2D"=5 , "ARRAY_1D"=4 , "_2D"=1 , "2D"=1 , "_1D"=0 , "1D"=0 , "INVALID2"=2 , "INVALID3"=3 , "INVALID6"=6 , "INVALID7"=7;

PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D "ARRAY_2D"=5 , "ARRAY_1D"=4 , "_2D"=1 , "2D"=1 , "_1D"=0 , "1D"=0 , "_3D"=2 , "3D"=2 , "INVALID3"=3 , "INVALID6"=6 , "INVALID7"=7;

PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D "ARRAY_2D"=5 , "CUBE"=3 , "ARRAY_CUBE"=7 , "_2D"=1 , "2D"=1 , "INVALID0"=0 , "INVALID2"=2 , "INVALID4"=4 , "INVALID6"=6;

PC_REG "Rpc.LO"=0 , "Rpc.HI"=1;

PHYSONLY "PHYS"=1;

PIXLD_MODE "MSCOUNT"=0 , "COVMASK"=1 , "CENTROID_OFFSET"=2 , "MY_INDEX"=3 , "INNER_COVERAGE"=4;

PLOP_OP_NOREG "AND"=32768 , "OR"=65024 , "XOR"=38400 , "SEL"=51712;

PMode "IDX"=0 , "F4E"=1 , "B4E"=2 , "RC8"=3 , "ECL"=4 , "ECR"=5 , "RC16"=6 , "INVALID7"=7;

PONLY "P"=1;

PQUAD "nopquad"=0 , "PQUAD"=1;

PR "PR"=0;

PRIVATE "noprivate"=0 , "PRIVATE"=1;

PSEUDO_OPCODE "nopseudo_opcode"=0 , "SHL"=0 , "ISCADD"=0 , "IADD"=0 , "MOV"=0;


PSEUDO_OPCODE1 "nopseudo_opcode"=0 , "SHL"=1 , "ISCADD"=2 , "IADD"=3 , "MOV"=4;

Predicate "P2"=2 , "P3"=3 , "P0"=0 , "P1"=1 , "P6"=6 , "P7"=7 , "P4"=4 , "P5"=5 , "PT"=7;

QInteger "_32"=0 , "32"=0 , "_64"=1 , "64"=1;

QUERY_SPACE "S"=2 , "L"=1 , "G"=0 , "INVALID3"=3;

RAND "norand"=0 , "RAND"=1;

REDATOMSIZE "U32"=0 , "_32"=0 , "32"=0 , "S32"=1 , "U64"=2 , "_64"=2 , "64"=2 , "S64"=5 , "F32.FTZ.RN"=3 , "F16x2.RN"=4 , "F64.RN"=6 , "INVALID7"=7;

RELONLY "REL"=0;

RET_ADDR_DIST "REL"=0 , "ABS"=1;

RET_DEPTH "NODEC"=1 , "DEC"=0;

RGBA "R"=1 , "RG"=3 , "RGBA"=15 , "INVALID0"=0 , "INVALID2"=2 , "INVALID4"=4 , "INVALID5"=5 , "INVALID6"=6 , "INVALID7"=7 , "INVALID8"=8 , "INVALID9"=9 , "INVALID10"=10 , "INVALID11"=11 , "INVALID12"=12 , "INVALID13"=13 , "INVALID14"=14;

RPCONLY "Rpc"=0;

Red "POPC"=0 , "AND"=1 , "OR"=2 , "INVALID3"=3;

RedOp "AND"=5 , "ADD"=0 , "XOR"=7 , "MIN"=1 , "MAX"=2 , "DEC"=4 , "OR"=6 , "INC"=3;

Register "R147"=147 , "R146"=146 , "R145"=145 , "R144"=144 , "R143"=143 , "R142"=142 , "R141"=141 , "R140"=140 , "R254"=254 , "R253"=253 , "R178"=178 , "R149"=149 , "R148"=148 , "R231"=231 , "R179"=179 , "RZ"=255 , "R183"=183 , "R38"=38 , "R39"=39 , "R34"=34 , "R35"=35 , "R36"=36 , "R37"=37 , "R30"=30 , "R31"=31 , "R32"=32 , "R33"=33 , "R4"=4 , "R5"=5 , "R6"=6 , "R7"=7 , "R0"=0 , "R1"=1 , "R2"=2 , "R3"=3 , "R8"=8 , "R9"=9 , "R182"=182 , "R89"=89 , "R88"=88 , "R170"=170 , "R171"=171 , "R176"=176 , "R177"=177 , "R174"=174 , "R175"=175 , "R81"=81 , "R80"=80 , "R83"=83 , "R82"=82 , "R85"=85 , "R84"=84 , "R87"=87 , "R86"=86 , "R205"=205 , "R248"=248 , "R169"=169 , "R168"=168 , "R98"=98 , "R99"=99 , "R96"=96 , "R97"=97 , "R94"=94 , "R95"=95 , "R92"=92 , "R93"=93 , "R90"=90 , "R91"=91 , "R16"=16 , "R17"=17 , "R14"=14 , "R15"=15 , "R12"=12 , "R13"=13 , "R10"=10 , "R11"=11 , "R181"=181 , "R18"=18 , "R19"=19 , "R180"=180 , "R251"=251 , "R187"=187 , "R250"=250 , "R186"=186 , "R200"=200 , "R201"=201 , "R202"=202 , "R203"=203 , "R204"=204 , "R185"=185 , "R206"=206 , "R207"=207 , "R208"=208 , "R209"=209 , "R184"=184 , "R118"=118 , "R119"=119 , "R110"=110 , "R111"=111 , "R112"=112 , "R113"=113 , "R114"=114 , "R115"=115 , "R116"=116 , "R117"=117 , "R63"=63 , "R62"=62 , "R61"=61 , "R60"=60 , "R67"=67 , "R66"=66 , "R65"=65 , "R64"=64 , "R193"=193 , "R69"=69 , "R68"=68 , "R162"=162 , "R249"=249 , "R213"=213 , "R212"=212 , "R211"=211 , "R210"=210 , "R217"=217 , "R216"=216 , "R215"=215 , "R214"=214 , "R219"=219 , "R218"=218 , "R109"=109 , "R108"=108 , "R194"=194 , "R103"=103 , "R102"=102 , "R101"=101 , "R100"=100 , "R107"=107 , "R106"=106 , "R105"=105 , "R104"=104 , "R190"=190 , "R247"=247 , "R220"=220 , "R191"=191 , "R240"=240 , "R252"=252 , "R192"=192 , "R241"=241 , "R70"=70 , "R71"=71 , "R72"=72 , "R73"=73 , "R74"=74 , "R75"=75 , "R76"=76 , "R77"=77 , "R78"=78 , "R79"=79 , "R195"=195 , "R136"=136 , "R137"=137 , "R134"=134 , "R135"=135 , "R132"=132 , "R133"=133 , "R130"=130 , "R131"=131 , "R226"=226 , "R227"=227 , "R224"=224 , "R197"=197 , "R222"=222 , "R223"=223 , "R138"=138 , "R139"=139 , "R238"=238 , "R198"=198 , "R196"=196 , "R199"=199 , "R45"=45 , "R44"=44 , "R47"=47 , "R46"=46 , "R41"=41 , "R40"=40 , "R43"=43 , "R42"=42 , "R189"=189 , "R188"=188 , "R49"=49 , "R48"=48 , "R121"=121 , "R120"=120 , "R123"=123 , "R122"=122 , "R125"=125 , "R124"=124 , "R127"=127 , "R126"=126 , "R129"=129 , "R128"=128 , "R233"=233 , "R232"=232 , "R235"=235 , "R234"=234 , "R237"=237 , "R236"=236 , "R165"=165 , "R164"=164 , "R239"=239 , "R167"=167 , "R166"=166 , "R228"=228 , "R161"=161 , "R229"=229 , "R160"=160 , "R58"=58 , "R59"=59 , "R163"=163 , "R52"=52 , "R53"=53 , "R50"=50 , "R51"=51 , "R56"=56 , "R57"=57 , "R54"=54 , "R55"=55 , "R225"=225 , "R154"=154 , "R155"=155 , "R156"=156 , "R157"=157 , "R150"=150 , "R151"=151 , "R152"=152 , "R153"=153 , "R244"=244 , "R245"=245 , "R246"=246 , "R221"=221 , "R158"=158 , "R159"=159 , "R242"=242 , "R243"=243 , "R172"=172 , "R230"=230 , "R173"=173 , "R29"=29 , "R28"=28 , "R27"=27 , "R26"=26 , "R25"=25 , "R24"=24 , "R23"=23 , "R22"=22 , "R21"=21 , "R20"=20;

Round1 "RN"=0 , "RM"=1 , "RP"=2 , "RZ"=3;

Round3 "ROUND"=0 , "FLOOR"=1 , "CEIL"=2 , "TRUNC"=3;

S32ONLY "S32"=5;

S32ONLY_i2i "S32"=0;

S64ONLY "S64"=7;

SAT "nosat"=0 , "SAT"=1;

SATFINITE "nosatfinite"=0 , "SATFINITE"=1;

SATONLY "SAT"=0;

SCO "CTA"=0 , "SM"=1 , "VC"=2 , "GPU"=2 , "SYS"=3;

SCRONLY "SCR"=1;

SDIR "L"=0 , "R"=1;

SEM "CONSTANT"=0 , "WEAK"=1 , "STRONG"=2 , "MMIO"=3;

SEM_WEAK_STRONG "WEAK"=1 , "STRONG"=2 , "INVALID0"=0 , "INVALID3"=3;

SEM_WEAK_STRONG_MMIO "WEAK"=1 , "STRONG"=2 , "MMIO"=3 , "INVALID0"=0;

SH "nosh"=0 , "SH"=1;

SIZE3 "U8"=0 , "S8"=1 , "U16"=2 , "S16"=3 , "_32"=4 , "32"=4 , "_64"=5 , "64"=5 , "_128"=6 , "128"=6 , "U.128"=7;

SKEW "noskew"=0 , "SKEW"=1;

SRCFMT16A "S16"=1 , "U16"=0;

SRCFMT_U16_S16 "U16"=2 , "S16"=3;

SRCFMT_U32_S32 "U32"=4 , "S32"=5;

SRCFMT_U8_S8 "U8"=0 , "S8"=1;

STEPS "STEP0"=0 , "STEP1"=1 , "STEP2"=2 , "STEP3"=3;

STEP_STEP0_STEP1 "STEP0"=0 , "STEP1"=1 , "INVALID2"=2 , "INVALID3"=3;

SURFACESIZE "_32"=0 , "32"=0 , "U32"=0 , "S32"=1 , "_64"=2 , "64"=2 , "U64"=2 , "S64"=5 , "F32.FTZ.RN"=3 , "F16x2.RN"=4 , "SD32"=6 , "SD64"=7;

SX32ONLY "SX32"=1;

SZ_U8_S8_U16_S16_32_64 "U8"=0 , "S8"=1 , "U16"=2 , "S16"=3 , "_32"=4 , "32"=4 , "_64"=5 , "64"=5 , "INVALID6"=6 , "INVALID7"=7;

SZ_U8_S8_U16_S16_32_64_128 "U8"=0 , "S8"=1 , "U16"=2 , "S16"=3 , "_32"=4 , "32"=4 , "_64"=5 , "64"=5 , "_128"=6 , "128"=6 , "INVALID7"=7;

Scale "D8"=1 , "D4"=2 , "D2"=3 , "noscale"=4 , "M2"=5 , "M4"=6 , "M8"=7 , "INVALID0"=0;

Scoreboard "SB0"=0 , "SB1"=1 , "SB2"=2 , "SB3"=3 , "SB4"=4 , "SB5"=5 , "INVALID6"=6 , "INVALID7"=7;

Shflmd "IDX"=0 , "UP"=1 , "DOWN"=2 , "BFLY"=3;

TEXPARAMA "ARRAY_2D"=5 , "CUBE"=3 , "ARRAY_1D"=4 , "ARRAY_CUBE"=7 , "_2D"=1 , "2D"=1 , "_1D"=0 , "1D"=0 , "_3D"=2 , "3D"=2 , "INVALID6"=6;

TOFF "notoff"=0 , "AOFFI"=1 , "PTP"=2 , "INVALID3"=3;

TXQQUERY "TEX_HEADER_SAMPLER_POS"=2 , "TEX_HEADER_DIMENSION"=0 , "TEX_HEADER_TEXTURE_TYPE"=1 , "INVALID3"=3;

TYPE_EMIT_THEN_CUT_EMIT "EMIT_THEN_CUT"=3 , "EMIT"=1;

TexComp "A"=3 , "B"=2 , "R"=0 , "G"=1;

U32ONLY "U32"=4;

U64ONLY "U64"=6;

USCHED_INFO
    OFF_DECK_DRAIN=0,



    DRAIN *= 0,

    W1EG=1,
    WAIT1_END_GROUP=1,
    W2EG=2,
    WAIT2_END_GROUP=2,
    W3EG=3,
    WAIT3_END_GROUP=3,
    W4EG=4,
    WAIT4_END_GROUP=4,
    W5EG=5,
    WAIT5_END_GROUP=5,
    W6EG=6,
    WAIT6_END_GROUP=6,
    W7EG=7,
    WAIT7_END_GROUP=7,
    W8EG=8,
    WAIT8_END_GROUP=8,
    W9EG=9,
    WAIT9_END_GROUP=9,
    W10EG=10,
    WAIT10_END_GROUP=10,
    W11EG=11,
    WAIT11_END_GROUP=11,
    W12EG=12,
    WAIT12_END_GROUP=12,
    W13EG=13,
    WAIT13_END_GROUP=13,
    W14EG=14,
    WAIT14_END_GROUP=14,
    W15EG=15,
    WAIT15_END_GROUP=15,
    W1=17,
    trans1=17,
    W2=18,
    trans2=18,
    W3=19,
    trans3=19,
    W4=20,
    trans4=20,
    W5=21,
    trans5=21,
    W6=22,
    trans6=22,
    W7=23,
    trans7=23,
    W8=24,
    trans8=24,
    W9=25,
    trans9=25,
    W10=26,
    trans10=26,
    W11=27,
    trans11=27;

VOP "R"=1 , "A"=2 , "RA"=3 , "INVALID0"=0;

VRed2 "SIMD_MRG"=0 , "ACC"=1;

VoteOp "ALL"=0 , "ANY"=1 , "EQ"=2 , "INVALID3"=3;

WEAKONLY "WEAK"=1;

WIDEONLY "WIDE"=1;

XONLY "X"=1;

ZDONLY "ZD"=1;

ZeroRegister "RZ"=255;





TABLES

   FixLatDestMap
         '&' 0 -> 0
         '&' 1 -> 1
         '&' 2 -> 2
         '&' 3 -> 3
         '&' 4 -> 4
         '&' 5 -> 5
         '&' 6 -> 6
         '&' 7 -> 6
         '&' 8 -> 7
         '/' 0 -> 8
         '/' 1 -> 9
         '/' 2 -> 10
         '/' 3 -> 11
         '/' 4 -> 12
         '/' 5 -> 13
         '/' 6 -> 14
         '/' 7 -> 14
         '/' 8 -> 7
         ;



    VarLatOperandEnc
         0 -> 0
         1 -> 1
         2 -> 2
         3 -> 3
         4 -> 4
         5 -> 5
         6 -> 6
         7 -> 7
         0xffff -> 7
         ;

    DestPred
        Predicate@P0 -> 7
        Predicate@P1 -> 6
        Predicate@P2 -> 5
        Predicate@P3 -> 4
        Predicate@P4 -> 3
        Predicate@P5 -> 2
        Predicate@P6 -> 1
        Predicate@P7 -> 0
        Predicate@PT -> 0
        ;

   IntSize
          Integer@U8 -> 0b0_00
          Integer@S8 -> 0b1_00
          Integer@U16 -> 0b0_01
          Integer@S16 -> 0b1_01
          Integer@U32 -> 0b0_10
          Integer@S32 -> 0b1_10
          Integer@U64 -> 0b0_11
          Integer@S64 -> 0b1_11
          ;

   IsSigned16
          Integer16@U16 -> 0
          Integer16@S16 -> 1
   ;

   IsSigned
          Integer32@U32 -> 0
          Integer32@S32 -> 1
          ;

   IsSPASigned
          IntegerSPA@U32 -> 0
          IntegerSPA@U24 -> 0
          IntegerSPA@U16H0 -> 0
          IntegerSPA@U16H1 -> 0
          IntegerSPA@S32 -> 1
          IntegerSPA@S24 -> 1
          IntegerSPA@S16H0 -> 1
          IntegerSPA@S16H1 -> 1
          ;

   IsSPBSigned
          IntegerSPB@U24 -> 0
          IntegerSPB@U16H0 -> 0
          IntegerSPB@S24 -> 1
          IntegerSPB@S16H0 -> 1
          ;

   IsSPCSigned
          IntegerSPC@U32 -> 0
          IntegerSPC@U24 -> 0
          IntegerSPC@U16H0 -> 0
          IntegerSPC@S32 -> 1
          IntegerSPC@S24 -> 1
          IntegerSPC@S16H0 -> 1
          ;

   GetSPExtract
          IntegerSPC@U32 IntegerSPA@U32 IntegerSPB@U24 -> 0b00_00_000
          IntegerSPC@U32 IntegerSPA@U32 IntegerSPB@U16H0 -> 0b10_00_000
          IntegerSPC@U32 IntegerSPA@U24 IntegerSPB@U24 -> 0b00_00_010
          IntegerSPC@U32 IntegerSPA@U24 IntegerSPB@U16H0 -> 0b10_00_010
          IntegerSPC@U32 IntegerSPA@U16H0 IntegerSPB@U24 -> 0b00_00_100
          IntegerSPC@U32 IntegerSPA@U16H0 IntegerSPB@U16H0 -> 0b10_00_100
          IntegerSPC@U32 IntegerSPA@U16H1 IntegerSPB@U24 -> 0b00_00_110
          IntegerSPC@U32 IntegerSPA@U16H1 IntegerSPB@U16H0 -> 0b10_00_110

          IntegerSPC@U24 IntegerSPA@U32 IntegerSPB@U24 -> 0b00_01_000
          IntegerSPC@U24 IntegerSPA@U32 IntegerSPB@U16H0 -> 0b10_01_000
          IntegerSPC@U24 IntegerSPA@U24 IntegerSPB@U24 -> 0b00_01_010
          IntegerSPC@U24 IntegerSPA@U24 IntegerSPB@U16H0 -> 0b10_01_010
          IntegerSPC@U24 IntegerSPA@U16H0 IntegerSPB@U24 -> 0b00_01_100
          IntegerSPC@U24 IntegerSPA@U16H0 IntegerSPB@U16H0 -> 0b10_01_100
          IntegerSPC@U24 IntegerSPA@U16H1 IntegerSPB@U24 -> 0b00_01_110
          IntegerSPC@U24 IntegerSPA@U16H1 IntegerSPB@U16H0 -> 0b10_01_110

          IntegerSPC@U16H0 IntegerSPA@U32 IntegerSPB@U24 -> 0b00_10_000
          IntegerSPC@U16H0 IntegerSPA@U32 IntegerSPB@U16H0 -> 0b10_10_000
          IntegerSPC@U16H0 IntegerSPA@U24 IntegerSPB@U24 -> 0b00_10_010
          IntegerSPC@U16H0 IntegerSPA@U24 IntegerSPB@U16H0 -> 0b10_10_010
          IntegerSPC@U16H0 IntegerSPA@U16H0 IntegerSPB@U24 -> 0b00_10_100
          IntegerSPC@U16H0 IntegerSPA@U16H0 IntegerSPB@U16H0 -> 0b10_10_100
          IntegerSPC@U16H0 IntegerSPA@U16H1 IntegerSPB@U24 -> 0b00_10_110
          IntegerSPC@U16H0 IntegerSPA@U16H1 IntegerSPB@U16H0 -> 0b10_10_110

          IntegerSPC@S32 IntegerSPA@U32 IntegerSPB@S24 -> 0b01_00_000
          IntegerSPC@S32 IntegerSPA@U32 IntegerSPB@S16H0 -> 0b11_00_000
          IntegerSPC@S32 IntegerSPA@U24 IntegerSPB@S24 -> 0b01_00_010
          IntegerSPC@S32 IntegerSPA@U24 IntegerSPB@S16H0 -> 0b11_00_010
          IntegerSPC@S32 IntegerSPA@U16H0 IntegerSPB@S24 -> 0b01_00_100
          IntegerSPC@S32 IntegerSPA@U16H0 IntegerSPB@S16H0 -> 0b11_00_100
          IntegerSPC@S32 IntegerSPA@U16H1 IntegerSPB@S24 -> 0b01_00_110
          IntegerSPC@S32 IntegerSPA@U16H1 IntegerSPB@S16H0 -> 0b11_00_110

          IntegerSPC@S32 IntegerSPA@S32 IntegerSPB@U24 -> 0b00_00_001
          IntegerSPC@S32 IntegerSPA@S32 IntegerSPB@U16H0 -> 0b10_00_001
          IntegerSPC@S32 IntegerSPA@S24 IntegerSPB@U24 -> 0b00_00_011
          IntegerSPC@S32 IntegerSPA@S24 IntegerSPB@U16H0 -> 0b10_00_011
          IntegerSPC@S32 IntegerSPA@S16H0 IntegerSPB@U24 -> 0b00_00_101
          IntegerSPC@S32 IntegerSPA@S16H0 IntegerSPB@U16H0 -> 0b10_00_101
          IntegerSPC@S32 IntegerSPA@S16H1 IntegerSPB@U24 -> 0b00_00_111
          IntegerSPC@S32 IntegerSPA@S16H1 IntegerSPB@U16H0 -> 0b10_00_111

          IntegerSPC@S32 IntegerSPA@S32 IntegerSPB@S24 -> 0b01_00_001
          IntegerSPC@S32 IntegerSPA@S32 IntegerSPB@S16H0 -> 0b11_00_001
          IntegerSPC@S32 IntegerSPA@S24 IntegerSPB@S24 -> 0b01_00_011
          IntegerSPC@S32 IntegerSPA@S24 IntegerSPB@S16H0 -> 0b11_00_011
          IntegerSPC@S32 IntegerSPA@S16H0 IntegerSPB@S24 -> 0b01_00_101
          IntegerSPC@S32 IntegerSPA@S16H0 IntegerSPB@S16H0 -> 0b11_00_101
          IntegerSPC@S32 IntegerSPA@S16H1 IntegerSPB@S24 -> 0b01_00_111
          IntegerSPC@S32 IntegerSPA@S16H1 IntegerSPB@S16H0 -> 0b11_00_111

          IntegerSPC@S24 IntegerSPA@U32 IntegerSPB@S24 -> 0b01_01_000
          IntegerSPC@S24 IntegerSPA@U32 IntegerSPB@S16H0 -> 0b11_01_000
          IntegerSPC@S24 IntegerSPA@U24 IntegerSPB@S24 -> 0b01_01_010
          IntegerSPC@S24 IntegerSPA@U24 IntegerSPB@S16H0 -> 0b11_01_010
          IntegerSPC@S24 IntegerSPA@U16H0 IntegerSPB@S24 -> 0b01_01_100
          IntegerSPC@S24 IntegerSPA@U16H0 IntegerSPB@S16H0 -> 0b11_01_100
          IntegerSPC@S24 IntegerSPA@U16H1 IntegerSPB@S24 -> 0b01_01_110
          IntegerSPC@S24 IntegerSPA@U16H1 IntegerSPB@S16H0 -> 0b11_01_110

          IntegerSPC@S24 IntegerSPA@S32 IntegerSPB@U24 -> 0b00_01_001
          IntegerSPC@S24 IntegerSPA@S32 IntegerSPB@U16H0 -> 0b10_01_001
          IntegerSPC@S24 IntegerSPA@S24 IntegerSPB@U24 -> 0b00_01_011
          IntegerSPC@S24 IntegerSPA@S24 IntegerSPB@U16H0 -> 0b10_01_011
          IntegerSPC@S24 IntegerSPA@S16H0 IntegerSPB@U24 -> 0b00_01_101
          IntegerSPC@S24 IntegerSPA@S16H0 IntegerSPB@U16H0 -> 0b10_01_101
          IntegerSPC@S24 IntegerSPA@S16H1 IntegerSPB@U24 -> 0b00_01_111
          IntegerSPC@S24 IntegerSPA@S16H1 IntegerSPB@U16H0 -> 0b10_01_111

          IntegerSPC@S24 IntegerSPA@S32 IntegerSPB@S24 -> 0b01_01_001
          IntegerSPC@S24 IntegerSPA@S32 IntegerSPB@S16H0 -> 0b11_01_001
          IntegerSPC@S24 IntegerSPA@S24 IntegerSPB@S24 -> 0b01_01_011
          IntegerSPC@S24 IntegerSPA@S24 IntegerSPB@S16H0 -> 0b11_01_011
          IntegerSPC@S24 IntegerSPA@S16H0 IntegerSPB@S24 -> 0b01_01_101
          IntegerSPC@S24 IntegerSPA@S16H0 IntegerSPB@S16H0 -> 0b11_01_101
          IntegerSPC@S24 IntegerSPA@S16H1 IntegerSPB@S24 -> 0b01_01_111
          IntegerSPC@S24 IntegerSPA@S16H1 IntegerSPB@S16H0 -> 0b11_01_111

          IntegerSPC@S16H0 IntegerSPA@U32 IntegerSPB@S24 -> 0b01_10_000
          IntegerSPC@S16H0 IntegerSPA@U32 IntegerSPB@S16H0 -> 0b11_10_000
          IntegerSPC@S16H0 IntegerSPA@U24 IntegerSPB@S24 -> 0b01_10_010
          IntegerSPC@S16H0 IntegerSPA@U24 IntegerSPB@S16H0 -> 0b11_10_010
          IntegerSPC@S16H0 IntegerSPA@U16H0 IntegerSPB@S24 -> 0b01_10_100
          IntegerSPC@S16H0 IntegerSPA@U16H0 IntegerSPB@S16H0 -> 0b11_10_100
          IntegerSPC@S16H0 IntegerSPA@U16H1 IntegerSPB@S24 -> 0b01_10_110
          IntegerSPC@S16H0 IntegerSPA@U16H1 IntegerSPB@S16H0 -> 0b11_10_110

          IntegerSPC@S16H0 IntegerSPA@S32 IntegerSPB@U24 -> 0b00_10_001
          IntegerSPC@S16H0 IntegerSPA@S32 IntegerSPB@U16H0 -> 0b10_10_001
          IntegerSPC@S16H0 IntegerSPA@S24 IntegerSPB@U24 -> 0b00_10_011
          IntegerSPC@S16H0 IntegerSPA@S24 IntegerSPB@U16H0 -> 0b10_10_011
          IntegerSPC@S16H0 IntegerSPA@S16H0 IntegerSPB@U24 -> 0b00_10_101
          IntegerSPC@S16H0 IntegerSPA@S16H0 IntegerSPB@U16H0 -> 0b10_10_101
          IntegerSPC@S16H0 IntegerSPA@S16H1 IntegerSPB@U24 -> 0b00_10_111
          IntegerSPC@S16H0 IntegerSPA@S16H1 IntegerSPB@U16H0 -> 0b10_10_111

          IntegerSPC@S16H0 IntegerSPA@S32 IntegerSPB@S24 -> 0b01_10_001
          IntegerSPC@S16H0 IntegerSPA@S32 IntegerSPB@S16H0 -> 0b11_10_001
          IntegerSPC@S16H0 IntegerSPA@S24 IntegerSPB@S24 -> 0b01_10_011
          IntegerSPC@S16H0 IntegerSPA@S24 IntegerSPB@S16H0 -> 0b11_10_011
          IntegerSPC@S16H0 IntegerSPA@S16H0 IntegerSPB@S24 -> 0b01_10_101
          IntegerSPC@S16H0 IntegerSPA@S16H0 IntegerSPB@S16H0 -> 0b11_10_101
          IntegerSPC@S16H0 IntegerSPA@S16H1 IntegerSPB@S24 -> 0b01_10_111
          IntegerSPC@S16H0 IntegerSPA@S16H1 IntegerSPB@S16H0 -> 0b11_10_111


          IntegerSPC@U32 IntegerSPA@U32 IntegerSPB@S24 -> 0b01_00_000
          IntegerSPC@U32 IntegerSPA@U32 IntegerSPB@S16H0 -> 0b11_00_000
          IntegerSPC@U32 IntegerSPA@U24 IntegerSPB@S24 -> 0b01_00_010
          IntegerSPC@U32 IntegerSPA@U24 IntegerSPB@S16H0 -> 0b11_00_010
          IntegerSPC@U32 IntegerSPA@U16H0 IntegerSPB@S24 -> 0b01_00_100
          IntegerSPC@U32 IntegerSPA@U16H0 IntegerSPB@S16H0 -> 0b11_00_100
          IntegerSPC@U32 IntegerSPA@U16H1 IntegerSPB@S24 -> 0b01_00_110
          IntegerSPC@U32 IntegerSPA@U16H1 IntegerSPB@S16H0 -> 0b11_00_110

          IntegerSPC@U32 IntegerSPA@S32 IntegerSPB@U24 -> 0b00_00_001
          IntegerSPC@U32 IntegerSPA@S32 IntegerSPB@U16H0 -> 0b10_00_001
          IntegerSPC@U32 IntegerSPA@S24 IntegerSPB@U24 -> 0b00_00_011
          IntegerSPC@U32 IntegerSPA@S24 IntegerSPB@U16H0 -> 0b10_00_011
          IntegerSPC@U32 IntegerSPA@S16H0 IntegerSPB@U24 -> 0b00_00_101
          IntegerSPC@U32 IntegerSPA@S16H0 IntegerSPB@U16H0 -> 0b10_00_101
          IntegerSPC@U32 IntegerSPA@S16H1 IntegerSPB@U24 -> 0b00_00_111
          IntegerSPC@U32 IntegerSPA@S16H1 IntegerSPB@U16H0 -> 0b10_00_111

          IntegerSPC@U32 IntegerSPA@S32 IntegerSPB@S24 -> 0b01_00_001
          IntegerSPC@U32 IntegerSPA@S32 IntegerSPB@S16H0 -> 0b11_00_001
          IntegerSPC@U32 IntegerSPA@S24 IntegerSPB@S24 -> 0b01_00_011
          IntegerSPC@U32 IntegerSPA@S24 IntegerSPB@S16H0 -> 0b11_00_011
          IntegerSPC@U32 IntegerSPA@S16H0 IntegerSPB@S24 -> 0b01_00_101
          IntegerSPC@U32 IntegerSPA@S16H0 IntegerSPB@S16H0 -> 0b11_00_101
          IntegerSPC@U32 IntegerSPA@S16H1 IntegerSPB@S24 -> 0b01_00_111
          IntegerSPC@U32 IntegerSPA@S16H1 IntegerSPB@S16H0 -> 0b11_00_111

          IntegerSPC@U24 IntegerSPA@U32 IntegerSPB@S24 -> 0b01_01_000
          IntegerSPC@U24 IntegerSPA@U32 IntegerSPB@S16H0 -> 0b11_01_000
          IntegerSPC@U24 IntegerSPA@U24 IntegerSPB@S24 -> 0b01_01_010
          IntegerSPC@U24 IntegerSPA@U24 IntegerSPB@S16H0 -> 0b11_01_010
          IntegerSPC@U24 IntegerSPA@U16H0 IntegerSPB@S24 -> 0b01_01_100
          IntegerSPC@U24 IntegerSPA@U16H0 IntegerSPB@S16H0 -> 0b11_01_100
          IntegerSPC@U24 IntegerSPA@U16H1 IntegerSPB@S24 -> 0b01_01_110
          IntegerSPC@U24 IntegerSPA@U16H1 IntegerSPB@S16H0 -> 0b11_01_110

          IntegerSPC@U24 IntegerSPA@S32 IntegerSPB@U24 -> 0b00_01_001
          IntegerSPC@U24 IntegerSPA@S32 IntegerSPB@U16H0 -> 0b10_01_001
          IntegerSPC@U24 IntegerSPA@S24 IntegerSPB@U24 -> 0b00_01_011
          IntegerSPC@U24 IntegerSPA@S24 IntegerSPB@U16H0 -> 0b10_01_011
          IntegerSPC@U24 IntegerSPA@S16H0 IntegerSPB@U24 -> 0b00_01_101
          IntegerSPC@U24 IntegerSPA@S16H0 IntegerSPB@U16H0 -> 0b10_01_101
          IntegerSPC@U24 IntegerSPA@S16H1 IntegerSPB@U24 -> 0b00_01_111
          IntegerSPC@U24 IntegerSPA@S16H1 IntegerSPB@U16H0 -> 0b10_01_111

          IntegerSPC@U24 IntegerSPA@S32 IntegerSPB@S24 -> 0b01_01_001
          IntegerSPC@U24 IntegerSPA@S32 IntegerSPB@S16H0 -> 0b11_01_001
          IntegerSPC@U24 IntegerSPA@S24 IntegerSPB@S24 -> 0b01_01_011
          IntegerSPC@U24 IntegerSPA@S24 IntegerSPB@S16H0 -> 0b11_01_011
          IntegerSPC@U24 IntegerSPA@S16H0 IntegerSPB@S24 -> 0b01_01_101
          IntegerSPC@U24 IntegerSPA@S16H0 IntegerSPB@S16H0 -> 0b11_01_101
          IntegerSPC@U24 IntegerSPA@S16H1 IntegerSPB@S24 -> 0b01_01_111
          IntegerSPC@U24 IntegerSPA@S16H1 IntegerSPB@S16H0 -> 0b11_01_111

          IntegerSPC@U16H0 IntegerSPA@U32 IntegerSPB@S24 -> 0b01_10_000
          IntegerSPC@U16H0 IntegerSPA@U32 IntegerSPB@S16H0 -> 0b11_10_000
          IntegerSPC@U16H0 IntegerSPA@U24 IntegerSPB@S24 -> 0b01_10_010
          IntegerSPC@U16H0 IntegerSPA@U24 IntegerSPB@S16H0 -> 0b11_10_010
          IntegerSPC@U16H0 IntegerSPA@U16H0 IntegerSPB@S24 -> 0b01_10_100
          IntegerSPC@U16H0 IntegerSPA@U16H0 IntegerSPB@S16H0 -> 0b11_10_100
          IntegerSPC@U16H0 IntegerSPA@U16H1 IntegerSPB@S24 -> 0b01_10_110
          IntegerSPC@U16H0 IntegerSPA@U16H1 IntegerSPB@S16H0 -> 0b11_10_110

          IntegerSPC@U16H0 IntegerSPA@S32 IntegerSPB@U24 -> 0b00_10_001
          IntegerSPC@U16H0 IntegerSPA@S32 IntegerSPB@U16H0 -> 0b10_10_001
          IntegerSPC@U16H0 IntegerSPA@S24 IntegerSPB@U24 -> 0b00_10_011
          IntegerSPC@U16H0 IntegerSPA@S24 IntegerSPB@U16H0 -> 0b10_10_011
          IntegerSPC@U16H0 IntegerSPA@S16H0 IntegerSPB@U24 -> 0b00_10_101
          IntegerSPC@U16H0 IntegerSPA@S16H0 IntegerSPB@U16H0 -> 0b10_10_101
          IntegerSPC@U16H0 IntegerSPA@S16H1 IntegerSPB@U24 -> 0b00_10_111
          IntegerSPC@U16H0 IntegerSPA@S16H1 IntegerSPB@U16H0 -> 0b10_10_111

          IntegerSPC@U16H0 IntegerSPA@S32 IntegerSPB@S24 -> 0b01_10_001
          IntegerSPC@U16H0 IntegerSPA@S32 IntegerSPB@S16H0 -> 0b11_10_001
          IntegerSPC@U16H0 IntegerSPA@S24 IntegerSPB@S24 -> 0b01_10_011
          IntegerSPC@U16H0 IntegerSPA@S24 IntegerSPB@S16H0 -> 0b11_10_011
          IntegerSPC@U16H0 IntegerSPA@S16H0 IntegerSPB@S24 -> 0b01_10_101
          IntegerSPC@U16H0 IntegerSPA@S16H0 IntegerSPB@S16H0 -> 0b11_10_101
          IntegerSPC@U16H0 IntegerSPA@S16H1 IntegerSPB@S24 -> 0b01_10_111
          IntegerSPC@U16H0 IntegerSPA@S16H1 IntegerSPB@S16H0 -> 0b11_10_111

          IntegerSPC@S32 IntegerSPA@U32 IntegerSPB@U24 -> 0b00_00_000
          IntegerSPC@S32 IntegerSPA@U32 IntegerSPB@U16H0 -> 0b10_00_000
          IntegerSPC@S32 IntegerSPA@U24 IntegerSPB@U24 -> 0b00_00_010
          IntegerSPC@S32 IntegerSPA@U24 IntegerSPB@U16H0 -> 0b10_00_010
          IntegerSPC@S32 IntegerSPA@U16H0 IntegerSPB@U24 -> 0b00_00_100
          IntegerSPC@S32 IntegerSPA@U16H0 IntegerSPB@U16H0 -> 0b10_00_100
          IntegerSPC@S32 IntegerSPA@U16H1 IntegerSPB@U24 -> 0b00_00_110
          IntegerSPC@S32 IntegerSPA@U16H1 IntegerSPB@U16H0 -> 0b10_00_110

          IntegerSPC@S24 IntegerSPA@U32 IntegerSPB@U24 -> 0b00_01_000
          IntegerSPC@S24 IntegerSPA@U32 IntegerSPB@U16H0 -> 0b10_01_000
          IntegerSPC@S24 IntegerSPA@U24 IntegerSPB@U24 -> 0b00_01_010
          IntegerSPC@S24 IntegerSPA@U24 IntegerSPB@U16H0 -> 0b10_01_010
          IntegerSPC@S24 IntegerSPA@U16H0 IntegerSPB@U24 -> 0b00_01_100
          IntegerSPC@S24 IntegerSPA@U16H0 IntegerSPB@U16H0 -> 0b10_01_100
          IntegerSPC@S24 IntegerSPA@U16H1 IntegerSPB@U24 -> 0b00_01_110
          IntegerSPC@S24 IntegerSPA@U16H1 IntegerSPB@U16H0 -> 0b10_01_110

          IntegerSPC@S16H0 IntegerSPA@U32 IntegerSPB@U24 -> 0b00_10_000
          IntegerSPC@S16H0 IntegerSPA@U32 IntegerSPB@U16H0 -> 0b10_10_000
          IntegerSPC@S16H0 IntegerSPA@U24 IntegerSPB@U24 -> 0b00_10_010
          IntegerSPC@S16H0 IntegerSPA@U24 IntegerSPB@U16H0 -> 0b10_10_010
          IntegerSPC@S16H0 IntegerSPA@U16H0 IntegerSPB@U24 -> 0b00_10_100
          IntegerSPC@S16H0 IntegerSPA@U16H0 IntegerSPB@U16H0 -> 0b10_10_100
          IntegerSPC@S16H0 IntegerSPA@U16H1 IntegerSPB@U24 -> 0b00_10_110
          IntegerSPC@S16H0 IntegerSPA@U16H1 IntegerSPB@U16H0 -> 0b10_10_110
        ;

   IsSameSigned
          Integer32@U32 Integer32@U32 -> 0
          Integer32@S32 Integer32@S32 -> 1
          Integer32@S32 Integer32@U32 -> 0
          Integer32@U32 Integer32@S32 -> 0
          ;

   I2I_N_Sizes
          Integer1632@U16 Integer1632@U16 -> 0b0000
          Integer1632@S16 Integer1632@U16 -> 0b0010
          Integer1632@U32 Integer1632@U16 -> 0b0100
          Integer1632@S32 Integer1632@U16 -> 0b0110

          Integer1632@U16 Integer1632@S16 -> 0b0001
          Integer1632@S16 Integer1632@S16 -> 0b0011
          Integer1632@U32 Integer1632@S16 -> 0b0101
          Integer1632@S32 Integer1632@S16 -> 0b0111

          Integer1632@U16 Integer1632@U32 -> 0b1000
          Integer1632@S16 Integer1632@U32 -> 0b1010
          Integer1632@U32 Integer1632@U32 -> 0b1100
          Integer1632@S32 Integer1632@U32 -> 0b1110

          Integer1632@U16 Integer1632@S32 -> 0b1001
          Integer1632@S16 Integer1632@S32 -> 0b1011
          Integer1632@U32 Integer1632@S32 -> 0b1101
          Integer1632@S32 Integer1632@S32 -> 0b1111
          ;

Integer8Signed
          Integer8@U8 -> 0
          Integer8@S8 -> 1
          ;

Integer16Signed
          Integer16@U16 -> 0
          Integer16@S16 -> 1
          ;

IntegerSigned
          Integer@U16 -> 0
          Integer@S16 -> 1
          Integer@U8 -> 0
          Integer@S8 -> 1
          Integer@U32 -> 0
          Integer@S32 -> 1
          Integer@U64 -> 0
          Integer@S64 -> 1
          ;

Integer8x8Signed
          Integer8@U8 Integer8@U8 -> 0
          Integer8@S8 Integer8@S8 -> 1
          Integer8@S8 Integer8@U8 -> 0
          Integer8@U8 Integer8@S8 -> 0
          ;

Integer16x16Signed
          Integer16@U16 Integer16@U16 -> 0
          Integer16@S16 Integer16@S16 -> 1
          Integer16@S16 Integer16@U16 -> 0
          Integer16@U16 Integer16@S16 -> 0
          ;

    PSign
       PO@noPO 0 0 -> 0b00
       PO@noPO 0 1 -> 0b01
       PO@noPO 1 0 -> 0b10
       PO@noPO 1 1 -> 0b00
         PO@PO 0 0 -> 0b11
         PO@PO 0 1 -> 0b11
         PO@PO 1 0 -> 0b11
         PO@PO 1 1 -> 0b11
          ;

    VMode
        AVRG@noAVRG 0 0 -> 0
        AVRG@noAVRG 0 1 -> 1
        AVRG@noAVRG 1 0 -> 2
        AVRG@noAVRG 1 1 -> 0
          AVRG@AVRG 0 0 -> 3
          AVRG@AVRG 0 1 -> 3
          AVRG@AVRG 1 0 -> 3
          AVRG@AVRG 1 1 -> 3
          ;

    PSign32
        PO@noPO 0 -> 0b00
        PO@noPO 1 -> 0b10
          PO@PO 0 -> 0b11
          PO@PO 1 -> 0b00
          ;

    PSignFFMA
          0 0 -> 0
          0 1 -> 1
          1 0 -> 1
          1 1 -> 0
          ;

    PSignMAD
       PO@noPO 0 0 0 -> 0b00
       PO@noPO 1 1 0 -> 0b00
       PO@noPO 0 0 1 -> 0b01
       PO@noPO 1 0 0 -> 0b10
       PO@noPO 0 1 0 -> 0b10
       PO@noPO 1 1 1 -> 0b01
       PO@noPO 0 1 1 -> 0b00
       PO@noPO 1 0 1 -> 0b00
         PO@PO 0 0 0 -> 0b11
         PO@PO 0 0 1 -> 0b11
         PO@PO 0 1 0 -> 0b11
         PO@PO 0 1 1 -> 0b11
         PO@PO 1 0 0 -> 0b11
         PO@PO 1 0 1 -> 0b11
         PO@PO 1 1 0 -> 0b11
         PO@PO 1 1 1 -> 0b11
          ;

    CombineBP
          1 0 -> 0
          0 1 -> 1
          0 0 -> 0
          1 1 -> 0
          ;

    RCIConstBank
          0 -> 0b010
          1 -> 0b100
         16 -> 0b110
          2 -> 0b010
          3 -> 0b010
          4 -> 0b010
          5 -> 0b010
          6 -> 0b010
          7 -> 0b010
          8 -> 0b010
          9 -> 0b010
         10 -> 0b010
         11 -> 0b010
         12 -> 0b010
         13 -> 0b010
         14 -> 0b010
         15 -> 0b010
         17 -> 0b010
         18 -> 0b010
         19 -> 0b010
         20 -> 0b010
         21 -> 0b010
         22 -> 0b010
         23 -> 0b010
         24 -> 0b010
         25 -> 0b010
         26 -> 0b010
         27 -> 0b010
         28 -> 0b010
         29 -> 0b010
         30 -> 0b010
         31 -> 0b010
          ;

    CNSConstBank
          0 -> 0b01
          1 -> 0b10
         16 -> 0b11
          2 -> 0b01
          3 -> 0b01
          4 -> 0b01
          5 -> 0b01
          6 -> 0b01
          7 -> 0b01
          8 -> 0b01
          9 -> 0b01
         10 -> 0b01
         11 -> 0b01
         12 -> 0b01
         13 -> 0b01
         14 -> 0b01
         15 -> 0b01
         17 -> 0b01
         18 -> 0b01
         19 -> 0b01
         20 -> 0b01
         21 -> 0b01
         22 -> 0b01
         23 -> 0b01
         24 -> 0b01
         25 -> 0b01
         26 -> 0b01
         27 -> 0b01
         28 -> 0b01
         29 -> 0b01
         30 -> 0b01
         31 -> 0b01
          ;

    LDCNConstBank
          0 -> 0b000
          1 -> 0b001
          2 -> 0b010
          3 -> 0b011
          4 -> 0b100
          5 -> 0b101
          6 -> 0b110
         16 -> 0b111
          7 -> 0b000
          8 -> 0b000
          9 -> 0b000
         10 -> 0b000
         11 -> 0b000
         12 -> 0b000
         13 -> 0b000
         14 -> 0b000
         15 -> 0b000
         17 -> 0b000
         18 -> 0b000
         19 -> 0b000
         20 -> 0b000
         21 -> 0b000
         22 -> 0b000
         23 -> 0b000
         24 -> 0b000
         25 -> 0b000
         26 -> 0b000
         27 -> 0b000
         28 -> 0b000
         29 -> 0b000
         30 -> 0b000
         31 -> 0b000
          ;

    CRegAlignment
          CInteger@U8 -> 1
          CInteger@S8 -> 1
          CInteger@U16 -> 1
          CInteger@S16 -> 1
          CInteger@"32" -> 1
          CInteger@"64" -> 2
          CInteger@"128" -> 4
          CInteger@INVALIDSIZE7 -> 1
          ;

    LDGSizeMask
          CInteger@U8 -> 0b0000000000_000_0001
          CInteger@S8 -> 0b0000000000_001_0001
          CInteger@U16 -> 0b0000000000_010_0001
          CInteger@S16 -> 0b0000000000_011_0001
          CInteger@"32" -> 0b0000000000_100_0001
          CInteger@"64" -> 0b0000000000_101_0011
          CInteger@"128" -> 0b0000000000_110_1111
          CInteger@INVALIDSIZE7 -> 0b0000000000_111_0001
          ;

    BQRegAlignment
          BQInteger@"64" -> 2
          BQInteger@"128" -> 4
          ;

    ARegAlignment
          AInteger@"32" -> 1
          AInteger@"64" -> 2
          AInteger@"96" -> 4
          AInteger@"128" -> 4
          ;

    QRegAlignment
          QInteger@"32" -> 1
          QInteger@"64" -> 2
          ;

    SQRegAlignment
          SQInteger@U32 -> 1
          SQInteger@S32 -> 1
          SQInteger@"F32.FTZ.RN" -> 1
          SQInteger@"F16x2.FTZ.RN" -> 1
          SQInteger@"F64.RN" -> 2
          SQInteger@INVALIDATOMICSIZE7 -> 1
          SQInteger@U64 -> 2
          SQInteger@S64 -> 2
          ;

    CASRegAlignment
          CASInteger@"32" -> 1
          CASInteger@"64" -> 2
          ;

    CIntSize
          CInteger@U8 -> 1
          CInteger@S8 -> 1
          CInteger@U16 -> 2
          CInteger@S16 -> 2
          CInteger@"32" -> 4
          CInteger@"64" -> 8
          CInteger@"128" -> 16
          ;

    Video4ImmSel
          ASel4@"0000" -> 1
          ASel4@"1111" -> 1
          ASel4@"2222" -> 1
          ASel4@"3333" -> 1
          ASel4@"3210" -> 1
          ASel4@"4321" -> 1
          ASel4@"5432" -> 1
          ASel4@"6543" -> 1
          ASel4@"3201" -> 1
          ASel4@"3012" -> 1
          ASel4@"0213" -> 1
          ASel4@"3120" -> 1
          ASel4@"1230" -> 1
          ASel4@"2310" -> 1
          ASel4@INVALIDASEL4E -> 1
          ASel4@INVALIDASEL4F -> 1
          ;

    TXQModeDim
          TXQMode@TEX_HEADER_DIMENSION -> 0b00000_1
          TXQMode@TEX_HEADER_TEXTURE_TYPE -> 0b00001_0
          TXQMode@TEX_HEADER_SAMPLER_POS -> 0b00010_1
          TXQMode@"3" -> 0b00011_0
          TXQMode@"4" -> 0b00100_0
          TXQMode@"5" -> 0b00101_0
          TXQMode@"6" -> 0b00110_0
          TXQMode@"7" -> 0b00111_0
          TXQMode@TEX_SAMPLER_FILTER -> 0b01000_0
          TXQMode@TEX_SAMPLER_LOD -> 0b01001_0
          TXQMode@TEX_SAMPLER_WRAP -> 0b01010_0
          TXQMode@TEX_SAMPLER_BORDER_COLOR -> 0b01011_0
          TXQMode@"12" -> 0b01100_0
          TXQMode@"13" -> 0b01101_0
          TXQMode@"14" -> 0b01110_0
          TXQMode@"15" -> 0b01111_0
          TXQMode@"16" -> 0b10000_0
          TXQMode@"17" -> 0b10001_0
          TXQMode@"18" -> 0b10010_0
          TXQMode@"19" -> 0b10011_0
          TXQMode@"20" -> 0b10100_0
          TXQMode@"21" -> 0b10101_0
          TXQMode@"22" -> 0b10110_0
          TXQMode@"23" -> 0b10111_0
          TXQMode@"24" -> 0b11000_0
          TXQMode@"25" -> 0b11001_0
          TXQMode@"26" -> 0b11010_0
          TXQMode@"27" -> 0b11011_0
          TXQMode@"28" -> 0b11100_0
          TXQMode@"29" -> 0b11101_0
          TXQMode@"30" -> 0b11110_0
          TXQMode@"31" -> 0b11111_0
          ;

    abSize
          CInteger@U8 CInteger@U8 -> 0
          CInteger@U8 CInteger@S8 -> 1
          CInteger@U8 CInteger@U16 -> 2
          CInteger@U8 CInteger@S16 -> 3
          CInteger@U8 CInteger@"32" -> 4

          CInteger@S8 CInteger@U8 -> 5
          CInteger@S8 CInteger@S8 -> 6
          CInteger@S8 CInteger@U16 -> 7
          CInteger@S8 CInteger@S16 -> 8
          CInteger@S8 CInteger@"32" -> 9

          CInteger@U16 CInteger@U8 -> 10
          CInteger@U16 CInteger@S8 -> 11
          CInteger@U16 CInteger@U16 -> 12
          CInteger@U16 CInteger@S16 -> 13
          CInteger@U16 CInteger@"32" -> 14

          CInteger@S16 CInteger@U8 -> 15
          CInteger@S16 CInteger@S8 -> 16
          CInteger@S16 CInteger@U16 -> 17
          CInteger@S16 CInteger@S16 -> 18
          CInteger@S16 CInteger@"32" -> 19

          CInteger@"32" CInteger@U8 -> 20
          CInteger@"32" CInteger@S8 -> 21
          CInteger@"32" CInteger@U16 -> 22
          CInteger@"32" CInteger@S16 -> 23
          CInteger@"32" CInteger@"32" -> 24
          CInteger@"32" CInteger@"64" -> 25
          CInteger@"32" CInteger@"128" -> 26

          CInteger@"64" CInteger@"32" -> 27
          CInteger@"64" CInteger@"64" -> 28
          CInteger@"64" CInteger@"128" -> 29

          CInteger@"128" CInteger@"32" -> 30
          CInteger@"128" CInteger@"64" -> 31

          CInteger@U8 CInteger@"64" -> 0
          CInteger@U8 CInteger@"128" -> 0
          CInteger@S8 CInteger@"64" -> 0
          CInteger@S8 CInteger@"128" -> 0
          CInteger@U16 CInteger@"64" -> 0
          CInteger@U16 CInteger@"128" -> 0
          CInteger@S16 CInteger@"64" -> 0
          CInteger@S16 CInteger@"128" -> 0
          CInteger@"64" CInteger@U8 -> 0
          CInteger@"64" CInteger@S8 -> 0
          CInteger@"64" CInteger@U16 -> 0
          CInteger@"64" CInteger@S16 -> 0
          CInteger@"128" CInteger@U8 -> 0
          CInteger@"128" CInteger@S8 -> 0
          CInteger@"128" CInteger@U16 -> 0
          CInteger@"128" CInteger@S16 -> 0
          CInteger@"128" CInteger@"128" -> 0
          ;

    VFormat8
          Integer@U8 B1B0@B0 -> 0b0_000
          Integer@U8 B1B0@B1 -> 0b0_001
          Integer@U8 B1B0@B2 -> 0b0_010
          Integer@U8 B1B0@B3 -> 0b0_011
          Integer@S8 B1B0@B0 -> 0b1_000
          Integer@S8 B1B0@B1 -> 0b1_001
          Integer@S8 B1B0@B2 -> 0b1_010
          Integer@S8 B1B0@B3 -> 0b1_011
          ;

    VFormat32
          VInteger32@U32 -> 0b0_110
          VInteger32@S32 -> 0b1_110
          6 -> 0b0_111
          7 -> 0b1_111
          ;

    VFormatU8
          U8@U8 B1B0@B0 -> 0b000
          U8@U8 B1B0@B1 -> 0b001
          U8@U8 B1B0@B2 -> 0b010
          U8@U8 B1B0@B3 -> 0b011
          ;

    VFormatU32
          U32@U32 -> 0b110
          U32@INVALIDSEL7 -> 0b111
          ;






    VFormat8_N
          Integer@U8 B1B0@B0 Integer@U8 B1B0@B0 -> 0b0_0_00000
          Integer@U8 B1B0@B0 Integer@U8 B1B0@B1 -> 0b0_0_00001
          Integer@U8 B1B0@B0 Integer@U8 B1B0@B2 -> 0b0_0_00010
          Integer@U8 B1B0@B0 Integer@U8 B1B0@B3 -> 0b0_0_00011
          Integer@U8 B1B0@B1 Integer@U8 B1B0@B0 -> 0b0_0_00100
          Integer@U8 B1B0@B1 Integer@U8 B1B0@B1 -> 0b0_0_00101
          Integer@U8 B1B0@B1 Integer@U8 B1B0@B2 -> 0b0_0_00110
          Integer@U8 B1B0@B1 Integer@U8 B1B0@B3 -> 0b0_0_00111
          Integer@U8 B1B0@B2 Integer@U8 B1B0@B0 -> 0b0_0_01000
          Integer@U8 B1B0@B2 Integer@U8 B1B0@B1 -> 0b0_0_01001
          Integer@U8 B1B0@B2 Integer@U8 B1B0@B2 -> 0b0_0_01010
          Integer@U8 B1B0@B2 Integer@U8 B1B0@B3 -> 0b0_0_01011
          Integer@U8 B1B0@B3 Integer@U8 B1B0@B0 -> 0b0_0_01100
          Integer@U8 B1B0@B3 Integer@U8 B1B0@B1 -> 0b0_0_01101
          Integer@U8 B1B0@B3 Integer@U8 B1B0@B2 -> 0b0_0_01110
          Integer@U8 B1B0@B3 Integer@U8 B1B0@B3 -> 0b0_0_01111
          Integer@U8 B1B0@B0 Integer@S8 B1B0@B0 -> 0b0_1_00000
          Integer@U8 B1B0@B0 Integer@S8 B1B0@B1 -> 0b0_1_00001
          Integer@U8 B1B0@B0 Integer@S8 B1B0@B2 -> 0b0_1_00010
          Integer@U8 B1B0@B0 Integer@S8 B1B0@B3 -> 0b0_1_00011
          Integer@U8 B1B0@B1 Integer@S8 B1B0@B0 -> 0b0_1_00100
          Integer@U8 B1B0@B1 Integer@S8 B1B0@B1 -> 0b0_1_00101
          Integer@U8 B1B0@B1 Integer@S8 B1B0@B2 -> 0b0_1_00110
          Integer@U8 B1B0@B1 Integer@S8 B1B0@B3 -> 0b0_1_00111
          Integer@U8 B1B0@B2 Integer@S8 B1B0@B0 -> 0b0_1_01000
          Integer@U8 B1B0@B2 Integer@S8 B1B0@B1 -> 0b0_1_01001
          Integer@U8 B1B0@B2 Integer@S8 B1B0@B2 -> 0b0_1_01010
          Integer@U8 B1B0@B2 Integer@S8 B1B0@B3 -> 0b0_1_01011
          Integer@U8 B1B0@B3 Integer@S8 B1B0@B0 -> 0b0_1_01100
          Integer@U8 B1B0@B3 Integer@S8 B1B0@B1 -> 0b0_1_01101
          Integer@U8 B1B0@B3 Integer@S8 B1B0@B2 -> 0b0_1_01110
          Integer@U8 B1B0@B3 Integer@S8 B1B0@B3 -> 0b0_1_01111
          Integer@S8 B1B0@B0 Integer@U8 B1B0@B0 -> 0b1_0_00000
          Integer@S8 B1B0@B0 Integer@U8 B1B0@B1 -> 0b1_0_00001
          Integer@S8 B1B0@B0 Integer@U8 B1B0@B2 -> 0b1_0_00010
          Integer@S8 B1B0@B0 Integer@U8 B1B0@B3 -> 0b1_0_00011
          Integer@S8 B1B0@B1 Integer@U8 B1B0@B0 -> 0b1_0_00100
          Integer@S8 B1B0@B1 Integer@U8 B1B0@B1 -> 0b1_0_00101
          Integer@S8 B1B0@B1 Integer@U8 B1B0@B2 -> 0b1_0_00110
          Integer@S8 B1B0@B1 Integer@U8 B1B0@B3 -> 0b1_0_00111
          Integer@S8 B1B0@B2 Integer@U8 B1B0@B0 -> 0b1_0_01000
          Integer@S8 B1B0@B2 Integer@U8 B1B0@B1 -> 0b1_0_01001
          Integer@S8 B1B0@B2 Integer@U8 B1B0@B2 -> 0b1_0_01010
          Integer@S8 B1B0@B2 Integer@U8 B1B0@B3 -> 0b1_0_01011
          Integer@S8 B1B0@B3 Integer@U8 B1B0@B0 -> 0b1_0_01100
          Integer@S8 B1B0@B3 Integer@U8 B1B0@B1 -> 0b1_0_01101
          Integer@S8 B1B0@B3 Integer@U8 B1B0@B2 -> 0b1_0_01110
          Integer@S8 B1B0@B3 Integer@U8 B1B0@B3 -> 0b1_0_01111
          Integer@S8 B1B0@B0 Integer@S8 B1B0@B0 -> 0b1_1_00000
          Integer@S8 B1B0@B0 Integer@S8 B1B0@B1 -> 0b1_1_00001
          Integer@S8 B1B0@B0 Integer@S8 B1B0@B2 -> 0b1_1_00010
          Integer@S8 B1B0@B0 Integer@S8 B1B0@B3 -> 0b1_1_00011
          Integer@S8 B1B0@B1 Integer@S8 B1B0@B0 -> 0b1_1_00100
          Integer@S8 B1B0@B1 Integer@S8 B1B0@B1 -> 0b1_1_00101
          Integer@S8 B1B0@B1 Integer@S8 B1B0@B2 -> 0b1_1_00110
          Integer@S8 B1B0@B1 Integer@S8 B1B0@B3 -> 0b1_1_00111
          Integer@S8 B1B0@B2 Integer@S8 B1B0@B0 -> 0b1_1_01000
          Integer@S8 B1B0@B2 Integer@S8 B1B0@B1 -> 0b1_1_01001
          Integer@S8 B1B0@B2 Integer@S8 B1B0@B2 -> 0b1_1_01010
          Integer@S8 B1B0@B2 Integer@S8 B1B0@B3 -> 0b1_1_01011
          Integer@S8 B1B0@B3 Integer@S8 B1B0@B0 -> 0b1_1_01100
          Integer@S8 B1B0@B3 Integer@S8 B1B0@B1 -> 0b1_1_01101
          Integer@S8 B1B0@B3 Integer@S8 B1B0@B2 -> 0b1_1_01110
          Integer@S8 B1B0@B3 Integer@S8 B1B0@B3 -> 0b1_1_01111
          ;

    VFormat32_8_N
          Integer@U32 Integer@U8 B1B0@B0 -> 0b0_0_10000
          Integer@U32 Integer@U8 B1B0@B1 -> 0b0_0_10001
          Integer@U32 Integer@U8 B1B0@B2 -> 0b0_0_10010
          Integer@U32 Integer@U8 B1B0@B3 -> 0b0_0_10011
          Integer@U32 Integer@S8 B1B0@B0 -> 0b0_1_10000
          Integer@U32 Integer@S8 B1B0@B1 -> 0b0_1_10001
          Integer@U32 Integer@S8 B1B0@B2 -> 0b0_1_10010
          Integer@U32 Integer@S8 B1B0@B3 -> 0b0_1_10011
          Integer@S32 Integer@U8 B1B0@B0 -> 0b1_0_10000
          Integer@S32 Integer@U8 B1B0@B1 -> 0b1_0_10001
          Integer@S32 Integer@U8 B1B0@B2 -> 0b1_0_10010
          Integer@S32 Integer@U8 B1B0@B3 -> 0b1_0_10011
          Integer@S32 Integer@S8 B1B0@B0 -> 0b1_1_10000
          Integer@S32 Integer@S8 B1B0@B1 -> 0b1_1_10001
          Integer@S32 Integer@S8 B1B0@B2 -> 0b1_1_10010
          Integer@S32 Integer@S8 B1B0@B3 -> 0b1_1_10011
          ;

    VFormat8_32_N
          Integer@U8 B1B0@B0 Integer@U32 -> 0b0_0_10100
          Integer@U8 B1B0@B1 Integer@U32 -> 0b0_0_10101
          Integer@U8 B1B0@B2 Integer@U32 -> 0b0_0_10110
          Integer@U8 B1B0@B3 Integer@U32 -> 0b0_0_10111
          Integer@U8 B1B0@B0 Integer@S32 -> 0b0_1_10100
          Integer@U8 B1B0@B1 Integer@S32 -> 0b0_1_10101
          Integer@U8 B1B0@B2 Integer@S32 -> 0b0_1_10110
          Integer@U8 B1B0@B3 Integer@S32 -> 0b0_1_10111
          Integer@S8 B1B0@B0 Integer@U32 -> 0b1_0_10100
          Integer@S8 B1B0@B1 Integer@U32 -> 0b1_0_10101
          Integer@S8 B1B0@B2 Integer@U32 -> 0b1_0_10110
          Integer@S8 B1B0@B3 Integer@U32 -> 0b1_0_10111
          Integer@S8 B1B0@B0 Integer@S32 -> 0b1_1_10100
          Integer@S8 B1B0@B1 Integer@S32 -> 0b1_1_10101
          Integer@S8 B1B0@B2 Integer@S32 -> 0b1_1_10110
          Integer@S8 B1B0@B3 Integer@S32 -> 0b1_1_10111
          ;

    ConsecutiveReg8
          Register@R0 Register@R1 CASInteger@"32" -> 0b0_00000000
          Register@R1 Register@R2 CASInteger@"32" -> 0b0_00000001
          Register@R2 Register@R3 CASInteger@"32" -> 0b0_00000010
          Register@R3 Register@R4 CASInteger@"32" -> 0b0_00000011
          Register@R4 Register@R5 CASInteger@"32" -> 0b0_00000100
          Register@R5 Register@R6 CASInteger@"32" -> 0b0_00000101
          Register@R6 Register@R7 CASInteger@"32" -> 0b0_00000110
          Register@R7 Register@R8 CASInteger@"32" -> 0b0_00000111
          Register@R8 Register@R9 CASInteger@"32" -> 0b0_00001000
          Register@R9 Register@R10 CASInteger@"32" -> 0b0_00001001
          Register@R10 Register@R11 CASInteger@"32" -> 0b0_00001010
          Register@R11 Register@R12 CASInteger@"32" -> 0b0_00001011
          Register@R12 Register@R13 CASInteger@"32" -> 0b0_00001100
          Register@R13 Register@R14 CASInteger@"32" -> 0b0_00001101
          Register@R14 Register@R15 CASInteger@"32" -> 0b0_00001110
          Register@R15 Register@R16 CASInteger@"32" -> 0b0_00001111
          Register@R16 Register@R17 CASInteger@"32" -> 0b0_00010000
          Register@R17 Register@R18 CASInteger@"32" -> 0b0_00010001
          Register@R18 Register@R19 CASInteger@"32" -> 0b0_00010010
          Register@R19 Register@R20 CASInteger@"32" -> 0b0_00010011
          Register@R20 Register@R21 CASInteger@"32" -> 0b0_00010100
          Register@R21 Register@R22 CASInteger@"32" -> 0b0_00010101
          Register@R22 Register@R23 CASInteger@"32" -> 0b0_00010110
          Register@R23 Register@R24 CASInteger@"32" -> 0b0_00010111
          Register@R24 Register@R25 CASInteger@"32" -> 0b0_00011000
          Register@R25 Register@R26 CASInteger@"32" -> 0b0_00011001
          Register@R26 Register@R27 CASInteger@"32" -> 0b0_00011010
          Register@R27 Register@R28 CASInteger@"32" -> 0b0_00011011
          Register@R28 Register@R29 CASInteger@"32" -> 0b0_00011100
          Register@R29 Register@R30 CASInteger@"32" -> 0b0_00011101
          Register@R30 Register@R31 CASInteger@"32" -> 0b0_00011110
          Register@R31 Register@R32 CASInteger@"32" -> 0b0_00011111
          Register@R32 Register@R33 CASInteger@"32" -> 0b0_00100000
          Register@R33 Register@R34 CASInteger@"32" -> 0b0_00100001
          Register@R34 Register@R35 CASInteger@"32" -> 0b0_00100010
          Register@R35 Register@R36 CASInteger@"32" -> 0b0_00100011
          Register@R36 Register@R37 CASInteger@"32" -> 0b0_00100100
          Register@R37 Register@R38 CASInteger@"32" -> 0b0_00100101
          Register@R38 Register@R39 CASInteger@"32" -> 0b0_00100110
          Register@R39 Register@R40 CASInteger@"32" -> 0b0_00100111
          Register@R40 Register@R41 CASInteger@"32" -> 0b0_00101000
          Register@R41 Register@R42 CASInteger@"32" -> 0b0_00101001
          Register@R42 Register@R43 CASInteger@"32" -> 0b0_00101010
          Register@R43 Register@R44 CASInteger@"32" -> 0b0_00101011
          Register@R44 Register@R45 CASInteger@"32" -> 0b0_00101100
          Register@R45 Register@R46 CASInteger@"32" -> 0b0_00101101
          Register@R46 Register@R47 CASInteger@"32" -> 0b0_00101110
          Register@R47 Register@R48 CASInteger@"32" -> 0b0_00101111
          Register@R48 Register@R49 CASInteger@"32" -> 0b0_00110000
          Register@R49 Register@R50 CASInteger@"32" -> 0b0_00110001
          Register@R50 Register@R51 CASInteger@"32" -> 0b0_00110010
          Register@R51 Register@R52 CASInteger@"32" -> 0b0_00110011
          Register@R52 Register@R53 CASInteger@"32" -> 0b0_00110100
          Register@R53 Register@R54 CASInteger@"32" -> 0b0_00110101
          Register@R54 Register@R55 CASInteger@"32" -> 0b0_00110110
          Register@R55 Register@R56 CASInteger@"32" -> 0b0_00110111
          Register@R56 Register@R57 CASInteger@"32" -> 0b0_00111000
          Register@R57 Register@R58 CASInteger@"32" -> 0b0_00111001
          Register@R58 Register@R59 CASInteger@"32" -> 0b0_00111010
          Register@R59 Register@R60 CASInteger@"32" -> 0b0_00111011
          Register@R60 Register@R61 CASInteger@"32" -> 0b0_00111100
          Register@R61 Register@R62 CASInteger@"32" -> 0b0_00111101
          Register@R62 Register@R63 CASInteger@"32" -> 0b0_00111110
          Register@R63 Register@R64 CASInteger@"32" -> 0b0_00111111
          Register@R64 Register@R65 CASInteger@"32" -> 0b0_01000000
          Register@R65 Register@R66 CASInteger@"32" -> 0b0_01000001
          Register@R66 Register@R67 CASInteger@"32" -> 0b0_01000010
          Register@R67 Register@R68 CASInteger@"32" -> 0b0_01000011
          Register@R68 Register@R69 CASInteger@"32" -> 0b0_01000100
          Register@R69 Register@R70 CASInteger@"32" -> 0b0_01000101
          Register@R70 Register@R71 CASInteger@"32" -> 0b0_01000110
          Register@R71 Register@R72 CASInteger@"32" -> 0b0_01000111
          Register@R72 Register@R73 CASInteger@"32" -> 0b0_01001000
          Register@R73 Register@R74 CASInteger@"32" -> 0b0_01001001
          Register@R74 Register@R75 CASInteger@"32" -> 0b0_01001010
          Register@R75 Register@R76 CASInteger@"32" -> 0b0_01001011
          Register@R76 Register@R77 CASInteger@"32" -> 0b0_01001100
          Register@R77 Register@R78 CASInteger@"32" -> 0b0_01001101
          Register@R78 Register@R79 CASInteger@"32" -> 0b0_01001110
          Register@R79 Register@R80 CASInteger@"32" -> 0b0_01001111
          Register@R80 Register@R81 CASInteger@"32" -> 0b0_01010000
          Register@R81 Register@R82 CASInteger@"32" -> 0b0_01010001
          Register@R82 Register@R83 CASInteger@"32" -> 0b0_01010010
          Register@R83 Register@R84 CASInteger@"32" -> 0b0_01010011
          Register@R84 Register@R85 CASInteger@"32" -> 0b0_01010100
          Register@R85 Register@R86 CASInteger@"32" -> 0b0_01010101
          Register@R86 Register@R87 CASInteger@"32" -> 0b0_01010110
          Register@R87 Register@R88 CASInteger@"32" -> 0b0_01010111
          Register@R88 Register@R89 CASInteger@"32" -> 0b0_01011000
          Register@R89 Register@R90 CASInteger@"32" -> 0b0_01011001
          Register@R90 Register@R91 CASInteger@"32" -> 0b0_01011010
          Register@R91 Register@R92 CASInteger@"32" -> 0b0_01011011
          Register@R92 Register@R93 CASInteger@"32" -> 0b0_01011100
          Register@R93 Register@R94 CASInteger@"32" -> 0b0_01011101
          Register@R94 Register@R95 CASInteger@"32" -> 0b0_01011110
          Register@R95 Register@R96 CASInteger@"32" -> 0b0_01011111
          Register@R96 Register@R97 CASInteger@"32" -> 0b0_01100000
          Register@R97 Register@R98 CASInteger@"32" -> 0b0_01100001
          Register@R98 Register@R99 CASInteger@"32" -> 0b0_01100010
          Register@R99 Register@R100 CASInteger@"32" -> 0b0_01100011
          Register@R100 Register@R101 CASInteger@"32" -> 0b0_01100100
          Register@R101 Register@R102 CASInteger@"32" -> 0b0_01100101
          Register@R102 Register@R103 CASInteger@"32" -> 0b0_01100110
          Register@R103 Register@R104 CASInteger@"32" -> 0b0_01100111
          Register@R104 Register@R105 CASInteger@"32" -> 0b0_01101000
          Register@R105 Register@R106 CASInteger@"32" -> 0b0_01101001
          Register@R106 Register@R107 CASInteger@"32" -> 0b0_01101010
          Register@R107 Register@R108 CASInteger@"32" -> 0b0_01101011
          Register@R108 Register@R109 CASInteger@"32" -> 0b0_01101100
          Register@R109 Register@R110 CASInteger@"32" -> 0b0_01101101
          Register@R110 Register@R111 CASInteger@"32" -> 0b0_01101110
          Register@R111 Register@R112 CASInteger@"32" -> 0b0_01101111
          Register@R112 Register@R113 CASInteger@"32" -> 0b0_01110000
          Register@R113 Register@R114 CASInteger@"32" -> 0b0_01110001
          Register@R114 Register@R115 CASInteger@"32" -> 0b0_01110010
          Register@R115 Register@R116 CASInteger@"32" -> 0b0_01110011
          Register@R116 Register@R117 CASInteger@"32" -> 0b0_01110100
          Register@R117 Register@R118 CASInteger@"32" -> 0b0_01110101
          Register@R118 Register@R119 CASInteger@"32" -> 0b0_01110110
          Register@R119 Register@R120 CASInteger@"32" -> 0b0_01110111
          Register@R120 Register@R121 CASInteger@"32" -> 0b0_01111000
          Register@R121 Register@R122 CASInteger@"32" -> 0b0_01111001
          Register@R122 Register@R123 CASInteger@"32" -> 0b0_01111010
          Register@R123 Register@R124 CASInteger@"32" -> 0b0_01111011
          Register@R124 Register@R125 CASInteger@"32" -> 0b0_01111100
          Register@R125 Register@R126 CASInteger@"32" -> 0b0_01111101
          Register@R126 Register@R127 CASInteger@"32" -> 0b0_01111110
          Register@R127 Register@R128 CASInteger@"32" -> 0b0_01111111
          Register@R128 Register@R129 CASInteger@"32" -> 0b0_10000000
          Register@R129 Register@R130 CASInteger@"32" -> 0b0_10000001
          Register@R130 Register@R131 CASInteger@"32" -> 0b0_10000010
          Register@R131 Register@R132 CASInteger@"32" -> 0b0_10000011
          Register@R132 Register@R133 CASInteger@"32" -> 0b0_10000100
          Register@R133 Register@R134 CASInteger@"32" -> 0b0_10000101
          Register@R134 Register@R135 CASInteger@"32" -> 0b0_10000110
          Register@R135 Register@R136 CASInteger@"32" -> 0b0_10000111
          Register@R136 Register@R137 CASInteger@"32" -> 0b0_10001000
          Register@R137 Register@R138 CASInteger@"32" -> 0b0_10001001
          Register@R138 Register@R139 CASInteger@"32" -> 0b0_10001010
          Register@R139 Register@R140 CASInteger@"32" -> 0b0_10001011
          Register@R140 Register@R141 CASInteger@"32" -> 0b0_10001100
          Register@R141 Register@R142 CASInteger@"32" -> 0b0_10001101
          Register@R142 Register@R143 CASInteger@"32" -> 0b0_10001110
          Register@R143 Register@R144 CASInteger@"32" -> 0b0_10001111
          Register@R144 Register@R145 CASInteger@"32" -> 0b0_10010000
          Register@R145 Register@R146 CASInteger@"32" -> 0b0_10010001
          Register@R146 Register@R147 CASInteger@"32" -> 0b0_10010010
          Register@R147 Register@R148 CASInteger@"32" -> 0b0_10010011
          Register@R148 Register@R149 CASInteger@"32" -> 0b0_10010100
          Register@R149 Register@R150 CASInteger@"32" -> 0b0_10010101
          Register@R150 Register@R151 CASInteger@"32" -> 0b0_10010110
          Register@R151 Register@R152 CASInteger@"32" -> 0b0_10010111
          Register@R152 Register@R153 CASInteger@"32" -> 0b0_10011000
          Register@R153 Register@R154 CASInteger@"32" -> 0b0_10011001
          Register@R154 Register@R155 CASInteger@"32" -> 0b0_10011010
          Register@R155 Register@R156 CASInteger@"32" -> 0b0_10011011
          Register@R156 Register@R157 CASInteger@"32" -> 0b0_10011100
          Register@R157 Register@R158 CASInteger@"32" -> 0b0_10011101
          Register@R158 Register@R159 CASInteger@"32" -> 0b0_10011110
          Register@R159 Register@R160 CASInteger@"32" -> 0b0_10011111
          Register@R160 Register@R161 CASInteger@"32" -> 0b0_10100000
          Register@R161 Register@R162 CASInteger@"32" -> 0b0_10100001
          Register@R162 Register@R163 CASInteger@"32" -> 0b0_10100010
          Register@R163 Register@R164 CASInteger@"32" -> 0b0_10100011
          Register@R164 Register@R165 CASInteger@"32" -> 0b0_10100100
          Register@R165 Register@R166 CASInteger@"32" -> 0b0_10100101
          Register@R166 Register@R167 CASInteger@"32" -> 0b0_10100110
          Register@R167 Register@R168 CASInteger@"32" -> 0b0_10100111
          Register@R168 Register@R169 CASInteger@"32" -> 0b0_10101000
          Register@R169 Register@R170 CASInteger@"32" -> 0b0_10101001
          Register@R170 Register@R171 CASInteger@"32" -> 0b0_10101010
          Register@R171 Register@R172 CASInteger@"32" -> 0b0_10101011
          Register@R172 Register@R173 CASInteger@"32" -> 0b0_10101100
          Register@R173 Register@R174 CASInteger@"32" -> 0b0_10101101
          Register@R174 Register@R175 CASInteger@"32" -> 0b0_10101110
          Register@R175 Register@R176 CASInteger@"32" -> 0b0_10101111
          Register@R176 Register@R177 CASInteger@"32" -> 0b0_10110000
          Register@R177 Register@R178 CASInteger@"32" -> 0b0_10110001
          Register@R178 Register@R179 CASInteger@"32" -> 0b0_10110010
          Register@R179 Register@R180 CASInteger@"32" -> 0b0_10110011
          Register@R180 Register@R181 CASInteger@"32" -> 0b0_10110100
          Register@R181 Register@R182 CASInteger@"32" -> 0b0_10110101
          Register@R182 Register@R183 CASInteger@"32" -> 0b0_10110110
          Register@R183 Register@R184 CASInteger@"32" -> 0b0_10110111
          Register@R184 Register@R185 CASInteger@"32" -> 0b0_10111000
          Register@R185 Register@R186 CASInteger@"32" -> 0b0_10111001
          Register@R186 Register@R187 CASInteger@"32" -> 0b0_10111010
          Register@R187 Register@R188 CASInteger@"32" -> 0b0_10111011
          Register@R188 Register@R189 CASInteger@"32" -> 0b0_10111100
          Register@R189 Register@R190 CASInteger@"32" -> 0b0_10111101
          Register@R190 Register@R191 CASInteger@"32" -> 0b0_10111110
          Register@R191 Register@R192 CASInteger@"32" -> 0b0_10111111
          Register@R192 Register@R193 CASInteger@"32" -> 0b0_11000000
          Register@R193 Register@R194 CASInteger@"32" -> 0b0_11000001
          Register@R194 Register@R195 CASInteger@"32" -> 0b0_11000010
          Register@R195 Register@R196 CASInteger@"32" -> 0b0_11000011
          Register@R196 Register@R197 CASInteger@"32" -> 0b0_11000100
          Register@R197 Register@R198 CASInteger@"32" -> 0b0_11000101
          Register@R198 Register@R199 CASInteger@"32" -> 0b0_11000110
          Register@R199 Register@R200 CASInteger@"32" -> 0b0_11000111
          Register@R200 Register@R201 CASInteger@"32" -> 0b0_11001000
          Register@R201 Register@R202 CASInteger@"32" -> 0b0_11001001
          Register@R202 Register@R203 CASInteger@"32" -> 0b0_11001010
          Register@R203 Register@R204 CASInteger@"32" -> 0b0_11001011
          Register@R204 Register@R205 CASInteger@"32" -> 0b0_11001100
          Register@R205 Register@R206 CASInteger@"32" -> 0b0_11001101
          Register@R206 Register@R207 CASInteger@"32" -> 0b0_11001110
          Register@R207 Register@R208 CASInteger@"32" -> 0b0_11001111
          Register@R208 Register@R209 CASInteger@"32" -> 0b0_11010000
          Register@R209 Register@R210 CASInteger@"32" -> 0b0_11010001
          Register@R210 Register@R211 CASInteger@"32" -> 0b0_11010010
          Register@R211 Register@R212 CASInteger@"32" -> 0b0_11010011
          Register@R212 Register@R213 CASInteger@"32" -> 0b0_11010100
          Register@R213 Register@R214 CASInteger@"32" -> 0b0_11010101
          Register@R214 Register@R215 CASInteger@"32" -> 0b0_11010110
          Register@R215 Register@R216 CASInteger@"32" -> 0b0_11010111
          Register@R216 Register@R217 CASInteger@"32" -> 0b0_11011000
          Register@R217 Register@R218 CASInteger@"32" -> 0b0_11011001
          Register@R218 Register@R219 CASInteger@"32" -> 0b0_11011010
          Register@R219 Register@R220 CASInteger@"32" -> 0b0_11011011
          Register@R220 Register@R221 CASInteger@"32" -> 0b0_11011100
          Register@R221 Register@R222 CASInteger@"32" -> 0b0_11011101
          Register@R222 Register@R223 CASInteger@"32" -> 0b0_11011110
          Register@R223 Register@R224 CASInteger@"32" -> 0b0_11011111
          Register@R224 Register@R225 CASInteger@"32" -> 0b0_11100000
          Register@R225 Register@R226 CASInteger@"32" -> 0b0_11100001
          Register@R226 Register@R227 CASInteger@"32" -> 0b0_11100010
          Register@R227 Register@R228 CASInteger@"32" -> 0b0_11100011
          Register@R228 Register@R229 CASInteger@"32" -> 0b0_11100100
          Register@R229 Register@R230 CASInteger@"32" -> 0b0_11100101
          Register@R230 Register@R231 CASInteger@"32" -> 0b0_11100110
          Register@R231 Register@R232 CASInteger@"32" -> 0b0_11100111
          Register@R232 Register@R233 CASInteger@"32" -> 0b0_11101000
          Register@R233 Register@R234 CASInteger@"32" -> 0b0_11101001
          Register@R234 Register@R235 CASInteger@"32" -> 0b0_11101010
          Register@R235 Register@R236 CASInteger@"32" -> 0b0_11101011
          Register@R236 Register@R237 CASInteger@"32" -> 0b0_11101100
          Register@R237 Register@R238 CASInteger@"32" -> 0b0_11101101
          Register@R238 Register@R239 CASInteger@"32" -> 0b0_11101110
          Register@R239 Register@R240 CASInteger@"32" -> 0b0_11101111
          Register@R240 Register@R241 CASInteger@"32" -> 0b0_11110000
          Register@R241 Register@R242 CASInteger@"32" -> 0b0_11110001
          Register@R242 Register@R243 CASInteger@"32" -> 0b0_11110010
          Register@R243 Register@R244 CASInteger@"32" -> 0b0_11110011
          Register@R244 Register@R245 CASInteger@"32" -> 0b0_11110100
          Register@R245 Register@R246 CASInteger@"32" -> 0b0_11110101
          Register@R246 Register@R247 CASInteger@"32" -> 0b0_11110110
          Register@R247 248 CASInteger@"32" -> 0b0_11110111
          248 249 CASInteger@"32" -> 0b0_11111000
          249 250 CASInteger@"32" -> 0b0_11111001
          250 251 CASInteger@"32" -> 0b0_11111010
          251 252 CASInteger@"32" -> 0b0_11111011
          252 253 CASInteger@"32" -> 0b0_11111100
          253 254 CASInteger@"32" -> 0b0_11111101
          254 Register@RZ CASInteger@"32" -> 0b0_11111110
          Register@RZ Register@RZ CASInteger@"32" -> 0b0_11111111
          Register@R0 Register@R2 CASInteger@"64" -> 0b1_00000000
          Register@R1 Register@R3 CASInteger@"64" -> 0b1_00000001
          Register@R2 Register@R4 CASInteger@"64" -> 0b1_00000010
          Register@R3 Register@R5 CASInteger@"64" -> 0b1_00000011
          Register@R4 Register@R6 CASInteger@"64" -> 0b1_00000100
          Register@R5 Register@R7 CASInteger@"64" -> 0b1_00000101
          Register@R6 Register@R8 CASInteger@"64" -> 0b1_00000110
          Register@R7 Register@R9 CASInteger@"64" -> 0b1_00000111
          Register@R8 Register@R10 CASInteger@"64" -> 0b1_00001000
          Register@R9 Register@R11 CASInteger@"64" -> 0b1_00001001
          Register@R10 Register@R12 CASInteger@"64" -> 0b1_00001010
          Register@R11 Register@R13 CASInteger@"64" -> 0b1_00001011
          Register@R12 Register@R14 CASInteger@"64" -> 0b1_00001100
          Register@R13 Register@R15 CASInteger@"64" -> 0b1_00001101
          Register@R14 Register@R16 CASInteger@"64" -> 0b1_00001110
          Register@R15 Register@R17 CASInteger@"64" -> 0b1_00001111
          Register@R16 Register@R18 CASInteger@"64" -> 0b1_00010000
          Register@R17 Register@R19 CASInteger@"64" -> 0b1_00010001
          Register@R18 Register@R20 CASInteger@"64" -> 0b1_00010010
          Register@R19 Register@R21 CASInteger@"64" -> 0b1_00010011
          Register@R20 Register@R22 CASInteger@"64" -> 0b1_00010100
          Register@R21 Register@R23 CASInteger@"64" -> 0b1_00010101
          Register@R22 Register@R24 CASInteger@"64" -> 0b1_00010110
          Register@R23 Register@R25 CASInteger@"64" -> 0b1_00010111
          Register@R24 Register@R26 CASInteger@"64" -> 0b1_00011000
          Register@R25 Register@R27 CASInteger@"64" -> 0b1_00011001
          Register@R26 Register@R28 CASInteger@"64" -> 0b1_00011010
          Register@R27 Register@R29 CASInteger@"64" -> 0b1_00011011
          Register@R28 Register@R30 CASInteger@"64" -> 0b1_00011100
          Register@R29 Register@R31 CASInteger@"64" -> 0b1_00011101
          Register@R30 Register@R32 CASInteger@"64" -> 0b1_00011110
          Register@R31 Register@R33 CASInteger@"64" -> 0b1_00011111
          Register@R32 Register@R34 CASInteger@"64" -> 0b1_00100000
          Register@R33 Register@R35 CASInteger@"64" -> 0b1_00100001
          Register@R34 Register@R36 CASInteger@"64" -> 0b1_00100010
          Register@R35 Register@R37 CASInteger@"64" -> 0b1_00100011
          Register@R36 Register@R38 CASInteger@"64" -> 0b1_00100100
          Register@R37 Register@R39 CASInteger@"64" -> 0b1_00100101
          Register@R38 Register@R40 CASInteger@"64" -> 0b1_00100110
          Register@R39 Register@R41 CASInteger@"64" -> 0b1_00100111
          Register@R40 Register@R42 CASInteger@"64" -> 0b1_00101000
          Register@R41 Register@R43 CASInteger@"64" -> 0b1_00101001
          Register@R42 Register@R44 CASInteger@"64" -> 0b1_00101010
          Register@R43 Register@R45 CASInteger@"64" -> 0b1_00101011
          Register@R44 Register@R46 CASInteger@"64" -> 0b1_00101100
          Register@R45 Register@R47 CASInteger@"64" -> 0b1_00101101
          Register@R46 Register@R48 CASInteger@"64" -> 0b1_00101110
          Register@R47 Register@R49 CASInteger@"64" -> 0b1_00101111
          Register@R48 Register@R50 CASInteger@"64" -> 0b1_00110000
          Register@R49 Register@R51 CASInteger@"64" -> 0b1_00110001
          Register@R50 Register@R52 CASInteger@"64" -> 0b1_00110010
          Register@R51 Register@R53 CASInteger@"64" -> 0b1_00110011
          Register@R52 Register@R54 CASInteger@"64" -> 0b1_00110100
          Register@R53 Register@R55 CASInteger@"64" -> 0b1_00110101
          Register@R54 Register@R56 CASInteger@"64" -> 0b1_00110110
          Register@R55 Register@R57 CASInteger@"64" -> 0b1_00110111
          Register@R56 Register@R58 CASInteger@"64" -> 0b1_00111000
          Register@R57 Register@R59 CASInteger@"64" -> 0b1_00111001
          Register@R58 Register@R60 CASInteger@"64" -> 0b1_00111010
          Register@R59 Register@R61 CASInteger@"64" -> 0b1_00111011
          Register@R60 Register@R62 CASInteger@"64" -> 0b1_00111100
          Register@R61 Register@R63 CASInteger@"64" -> 0b1_00111101
          Register@R62 Register@R64 CASInteger@"64" -> 0b1_00111110
          Register@R63 Register@R65 CASInteger@"64" -> 0b1_00111111
          Register@R64 Register@R66 CASInteger@"64" -> 0b1_01000000
          Register@R65 Register@R67 CASInteger@"64" -> 0b1_01000001
          Register@R66 Register@R68 CASInteger@"64" -> 0b1_01000010
          Register@R67 Register@R69 CASInteger@"64" -> 0b1_01000011
          Register@R68 Register@R70 CASInteger@"64" -> 0b1_01000100
          Register@R69 Register@R71 CASInteger@"64" -> 0b1_01000101
          Register@R70 Register@R72 CASInteger@"64" -> 0b1_01000110
          Register@R71 Register@R73 CASInteger@"64" -> 0b1_01000111
          Register@R72 Register@R74 CASInteger@"64" -> 0b1_01001000
          Register@R73 Register@R75 CASInteger@"64" -> 0b1_01001001
          Register@R74 Register@R76 CASInteger@"64" -> 0b1_01001010
          Register@R75 Register@R77 CASInteger@"64" -> 0b1_01001011
          Register@R76 Register@R78 CASInteger@"64" -> 0b1_01001100
          Register@R77 Register@R79 CASInteger@"64" -> 0b1_01001101
          Register@R78 Register@R80 CASInteger@"64" -> 0b1_01001110
          Register@R79 Register@R81 CASInteger@"64" -> 0b1_01001111
          Register@R80 Register@R82 CASInteger@"64" -> 0b1_01010000
          Register@R81 Register@R83 CASInteger@"64" -> 0b1_01010001
          Register@R82 Register@R84 CASInteger@"64" -> 0b1_01010010
          Register@R83 Register@R85 CASInteger@"64" -> 0b1_01010011
          Register@R84 Register@R86 CASInteger@"64" -> 0b1_01010100
          Register@R85 Register@R87 CASInteger@"64" -> 0b1_01010101
          Register@R86 Register@R88 CASInteger@"64" -> 0b1_01010110
          Register@R87 Register@R89 CASInteger@"64" -> 0b1_01010111
          Register@R88 Register@R90 CASInteger@"64" -> 0b1_01011000
          Register@R89 Register@R91 CASInteger@"64" -> 0b1_01011001
          Register@R90 Register@R92 CASInteger@"64" -> 0b1_01011010
          Register@R91 Register@R93 CASInteger@"64" -> 0b1_01011011
          Register@R92 Register@R94 CASInteger@"64" -> 0b1_01011100
          Register@R93 Register@R95 CASInteger@"64" -> 0b1_01011101
          Register@R94 Register@R96 CASInteger@"64" -> 0b1_01011110
          Register@R95 Register@R97 CASInteger@"64" -> 0b1_01011111
          Register@R96 Register@R98 CASInteger@"64" -> 0b1_01100000
          Register@R97 Register@R99 CASInteger@"64" -> 0b1_01100001
          Register@R98 Register@R100 CASInteger@"64" -> 0b1_01100010
          Register@R99 Register@R101 CASInteger@"64" -> 0b1_01100011
          Register@R100 Register@R102 CASInteger@"64" -> 0b1_01100100
          Register@R101 Register@R103 CASInteger@"64" -> 0b1_01100101
          Register@R102 Register@R104 CASInteger@"64" -> 0b1_01100110
          Register@R103 Register@R105 CASInteger@"64" -> 0b1_01100111
          Register@R104 Register@R106 CASInteger@"64" -> 0b1_01101000
          Register@R105 Register@R107 CASInteger@"64" -> 0b1_01101001
          Register@R106 Register@R108 CASInteger@"64" -> 0b1_01101010
          Register@R107 Register@R109 CASInteger@"64" -> 0b1_01101011
          Register@R108 Register@R110 CASInteger@"64" -> 0b1_01101100
          Register@R109 Register@R111 CASInteger@"64" -> 0b1_01101101
          Register@R110 Register@R112 CASInteger@"64" -> 0b1_01101110
          Register@R111 Register@R113 CASInteger@"64" -> 0b1_01101111
          Register@R112 Register@R114 CASInteger@"64" -> 0b1_01110000
          Register@R113 Register@R115 CASInteger@"64" -> 0b1_01110001
          Register@R114 Register@R116 CASInteger@"64" -> 0b1_01110010
          Register@R115 Register@R117 CASInteger@"64" -> 0b1_01110011
          Register@R116 Register@R118 CASInteger@"64" -> 0b1_01110100
          Register@R117 Register@R119 CASInteger@"64" -> 0b1_01110101
          Register@R118 Register@R120 CASInteger@"64" -> 0b1_01110110
          Register@R119 Register@R121 CASInteger@"64" -> 0b1_01110111
          Register@R120 Register@R122 CASInteger@"64" -> 0b1_01111000
          Register@R121 Register@R123 CASInteger@"64" -> 0b1_01111001
          Register@R122 Register@R124 CASInteger@"64" -> 0b1_01111010
          Register@R123 Register@R125 CASInteger@"64" -> 0b1_01111011
          Register@R124 Register@R126 CASInteger@"64" -> 0b1_01111100
          Register@R125 Register@R127 CASInteger@"64" -> 0b1_01111101
          Register@R126 Register@R128 CASInteger@"64" -> 0b1_01111110
          Register@R127 Register@R129 CASInteger@"64" -> 0b1_01111111
          Register@R128 Register@R130 CASInteger@"64" -> 0b1_10000000
          Register@R129 Register@R131 CASInteger@"64" -> 0b1_10000001
          Register@R130 Register@R132 CASInteger@"64" -> 0b1_10000010
          Register@R131 Register@R133 CASInteger@"64" -> 0b1_10000011
          Register@R132 Register@R134 CASInteger@"64" -> 0b1_10000100
          Register@R133 Register@R135 CASInteger@"64" -> 0b1_10000101
          Register@R134 Register@R136 CASInteger@"64" -> 0b1_10000110
          Register@R135 Register@R137 CASInteger@"64" -> 0b1_10000111
          Register@R136 Register@R138 CASInteger@"64" -> 0b1_10001000
          Register@R137 Register@R139 CASInteger@"64" -> 0b1_10001001
          Register@R138 Register@R140 CASInteger@"64" -> 0b1_10001010
          Register@R139 Register@R141 CASInteger@"64" -> 0b1_10001011
          Register@R140 Register@R142 CASInteger@"64" -> 0b1_10001100
          Register@R141 Register@R143 CASInteger@"64" -> 0b1_10001101
          Register@R142 Register@R144 CASInteger@"64" -> 0b1_10001110
          Register@R143 Register@R145 CASInteger@"64" -> 0b1_10001111
          Register@R144 Register@R146 CASInteger@"64" -> 0b1_10010000
          Register@R145 Register@R147 CASInteger@"64" -> 0b1_10010001
          Register@R146 Register@R148 CASInteger@"64" -> 0b1_10010010
          Register@R147 Register@R149 CASInteger@"64" -> 0b1_10010011
          Register@R148 Register@R150 CASInteger@"64" -> 0b1_10010100
          Register@R149 Register@R151 CASInteger@"64" -> 0b1_10010101
          Register@R150 Register@R152 CASInteger@"64" -> 0b1_10010110
          Register@R151 Register@R153 CASInteger@"64" -> 0b1_10010111
          Register@R152 Register@R154 CASInteger@"64" -> 0b1_10011000
          Register@R153 Register@R155 CASInteger@"64" -> 0b1_10011001
          Register@R154 Register@R156 CASInteger@"64" -> 0b1_10011010
          Register@R155 Register@R157 CASInteger@"64" -> 0b1_10011011
          Register@R156 Register@R158 CASInteger@"64" -> 0b1_10011100
          Register@R157 Register@R159 CASInteger@"64" -> 0b1_10011101
          Register@R158 Register@R160 CASInteger@"64" -> 0b1_10011110
          Register@R159 Register@R161 CASInteger@"64" -> 0b1_10011111
          Register@R160 Register@R162 CASInteger@"64" -> 0b1_10100000
          Register@R161 Register@R163 CASInteger@"64" -> 0b1_10100001
          Register@R162 Register@R164 CASInteger@"64" -> 0b1_10100010
          Register@R163 Register@R165 CASInteger@"64" -> 0b1_10100011
          Register@R164 Register@R166 CASInteger@"64" -> 0b1_10100100
          Register@R165 Register@R167 CASInteger@"64" -> 0b1_10100101
          Register@R166 Register@R168 CASInteger@"64" -> 0b1_10100110
          Register@R167 Register@R169 CASInteger@"64" -> 0b1_10100111
          Register@R168 Register@R170 CASInteger@"64" -> 0b1_10101000
          Register@R169 Register@R171 CASInteger@"64" -> 0b1_10101001
          Register@R170 Register@R172 CASInteger@"64" -> 0b1_10101010
          Register@R171 Register@R173 CASInteger@"64" -> 0b1_10101011
          Register@R172 Register@R174 CASInteger@"64" -> 0b1_10101100
          Register@R173 Register@R175 CASInteger@"64" -> 0b1_10101101
          Register@R174 Register@R176 CASInteger@"64" -> 0b1_10101110
          Register@R175 Register@R177 CASInteger@"64" -> 0b1_10101111
          Register@R176 Register@R178 CASInteger@"64" -> 0b1_10110000
          Register@R177 Register@R179 CASInteger@"64" -> 0b1_10110001
          Register@R178 Register@R180 CASInteger@"64" -> 0b1_10110010
          Register@R179 Register@R181 CASInteger@"64" -> 0b1_10110011
          Register@R180 Register@R182 CASInteger@"64" -> 0b1_10110100
          Register@R181 Register@R183 CASInteger@"64" -> 0b1_10110101
          Register@R182 Register@R184 CASInteger@"64" -> 0b1_10110110
          Register@R183 Register@R185 CASInteger@"64" -> 0b1_10110111
          Register@R184 Register@R186 CASInteger@"64" -> 0b1_10111000
          Register@R185 Register@R187 CASInteger@"64" -> 0b1_10111001
          Register@R186 Register@R188 CASInteger@"64" -> 0b1_10111010
          Register@R187 Register@R189 CASInteger@"64" -> 0b1_10111011
          Register@R188 Register@R190 CASInteger@"64" -> 0b1_10111100
          Register@R189 Register@R191 CASInteger@"64" -> 0b1_10111101
          Register@R190 Register@R192 CASInteger@"64" -> 0b1_10111110
          Register@R191 Register@R193 CASInteger@"64" -> 0b1_10111111
          Register@R192 Register@R194 CASInteger@"64" -> 0b1_11000000
          Register@R193 Register@R195 CASInteger@"64" -> 0b1_11000001
          Register@R194 Register@R196 CASInteger@"64" -> 0b1_11000010
          Register@R195 Register@R197 CASInteger@"64" -> 0b1_11000011
          Register@R196 Register@R198 CASInteger@"64" -> 0b1_11000100
          Register@R197 Register@R199 CASInteger@"64" -> 0b1_11000101
          Register@R198 Register@R200 CASInteger@"64" -> 0b1_11000110
          Register@R199 Register@R201 CASInteger@"64" -> 0b1_11000111
          Register@R200 Register@R202 CASInteger@"64" -> 0b1_11001000
          Register@R201 Register@R203 CASInteger@"64" -> 0b1_11001001
          Register@R202 Register@R204 CASInteger@"64" -> 0b1_11001010
          Register@R203 Register@R205 CASInteger@"64" -> 0b1_11001011
          Register@R204 Register@R206 CASInteger@"64" -> 0b1_11001100
          Register@R205 Register@R207 CASInteger@"64" -> 0b1_11001101
          Register@R206 Register@R208 CASInteger@"64" -> 0b1_11001110
          Register@R207 Register@R209 CASInteger@"64" -> 0b1_11001111
          Register@R208 Register@R210 CASInteger@"64" -> 0b1_11010000
          Register@R209 Register@R211 CASInteger@"64" -> 0b1_11010001
          Register@R210 Register@R212 CASInteger@"64" -> 0b1_11010010
          Register@R211 Register@R213 CASInteger@"64" -> 0b1_11010011
          Register@R212 Register@R214 CASInteger@"64" -> 0b1_11010100
          Register@R213 Register@R215 CASInteger@"64" -> 0b1_11010101
          Register@R214 Register@R216 CASInteger@"64" -> 0b1_11010110
          Register@R215 Register@R217 CASInteger@"64" -> 0b1_11010111
          Register@R216 Register@R218 CASInteger@"64" -> 0b1_11011000
          Register@R217 Register@R219 CASInteger@"64" -> 0b1_11011001
          Register@R218 Register@R220 CASInteger@"64" -> 0b1_11011010
          Register@R219 Register@R221 CASInteger@"64" -> 0b1_11011011
          Register@R220 Register@R222 CASInteger@"64" -> 0b1_11011100
          Register@R221 Register@R223 CASInteger@"64" -> 0b1_11011101
          Register@R222 Register@R224 CASInteger@"64" -> 0b1_11011110
          Register@R223 Register@R225 CASInteger@"64" -> 0b1_11011111
          Register@R224 Register@R226 CASInteger@"64" -> 0b1_11100000
          Register@R225 Register@R227 CASInteger@"64" -> 0b1_11100001
          Register@R226 Register@R228 CASInteger@"64" -> 0b1_11100010
          Register@R227 Register@R229 CASInteger@"64" -> 0b1_11100011
          Register@R228 Register@R230 CASInteger@"64" -> 0b1_11100100
          Register@R229 Register@R231 CASInteger@"64" -> 0b1_11100101
          Register@R230 Register@R232 CASInteger@"64" -> 0b1_11100110
          Register@R231 Register@R233 CASInteger@"64" -> 0b1_11100111
          Register@R232 Register@R234 CASInteger@"64" -> 0b1_11101000
          Register@R233 Register@R235 CASInteger@"64" -> 0b1_11101001
          Register@R234 Register@R236 CASInteger@"64" -> 0b1_11101010
          Register@R235 Register@R237 CASInteger@"64" -> 0b1_11101011
          Register@R236 Register@R238 CASInteger@"64" -> 0b1_11101100
          Register@R237 Register@R239 CASInteger@"64" -> 0b1_11101101
          Register@R238 Register@R240 CASInteger@"64" -> 0b1_11101110
          Register@R239 Register@R241 CASInteger@"64" -> 0b1_11101111
          Register@R240 Register@R242 CASInteger@"64" -> 0b1_11110000
          Register@R241 Register@R243 CASInteger@"64" -> 0b1_11110001
          Register@R242 Register@R244 CASInteger@"64" -> 0b1_11110010
          Register@R243 Register@R245 CASInteger@"64" -> 0b1_11110011
          Register@R244 Register@R246 CASInteger@"64" -> 0b1_11110100
          Register@R245 Register@R247 CASInteger@"64" -> 0b1_11110101
          Register@R246 248 CASInteger@"64" -> 0b1_11110110
          Register@R247 249 CASInteger@"64" -> 0b1_11110111
          248 250 CASInteger@"64" -> 0b1_11111000
          249 251 CASInteger@"64" -> 0b1_11111001
          250 252 CASInteger@"64" -> 0b1_11111010
          251 253 CASInteger@"64" -> 0b1_11111011
          252 254 CASInteger@"64" -> 0b1_11111100
          253 Register@RZ CASInteger@"64" -> 0b1_11111101
          254 Register@RZ CASInteger@"64" -> 0b1_11111110
          Register@RZ Register@RZ CASInteger@"64" -> 0b1_11111111
          ;



    SM5vshlCW
          CWMode@C UInteger_old@U16 -> 0b0
          CWMode@C UInteger_old@U8 -> 0b0
          CWMode@C UInteger_old@U32 -> 0b0
          CWMode@W UInteger_old@U16 -> 0b1
          CWMode@W UInteger_old@U8 -> 0b1
          CWMode@W UInteger_old@U32 -> 0b1
          ;

    Tex2D4
          ParamA@"1D" DC@noDC LOD2@LZ -> 0
          ParamA@"1D" DC@noDC LOD2@noLOD -> 0
          ParamA@"1D" DC@noDC LOD2@LL -> 0
          ParamA@"1D" DC@DC LOD2@noLOD -> 0
          ParamA@"1D" DC@DC LOD2@LZ -> 0
          ParamA@"1D" DC@DC LOD2@LL -> 0
          ParamA@"2D" DC@noDC LOD2@noLOD -> 1
          ParamA@"2D" DC@noDC LOD2@LZ -> 2
          ParamA@"2D" DC@noDC LOD2@LL -> 3
          ParamA@"2D" DC@DC LOD2@noLOD -> 4
          ParamA@"2D" DC@DC LOD2@LZ -> 6
          ParamA@"2D" DC@DC LOD2@LL -> 5
          ParamA@"3D" DC@noDC LOD2@noLOD -> 10
          ParamA@"3D" DC@noDC LOD2@LZ -> 11
          ParamA@"3D" DC@noDC LOD2@LL -> 0
          ParamA@"3D" DC@DC LOD2@noLOD -> 0
          ParamA@"3D" DC@DC LOD2@LZ -> 0
          ParamA@"3D" DC@DC LOD2@LL -> 0
          ParamA@CUBE DC@noDC LOD2@noLOD -> 12
          ParamA@CUBE DC@noDC LOD2@LZ -> 0
          ParamA@CUBE DC@noDC LOD2@LL -> 13
          ParamA@CUBE DC@DC LOD2@noLOD -> 0
          ParamA@CUBE DC@DC LOD2@LZ -> 0
          ParamA@CUBE DC@DC LOD2@LL -> 0
          ParamA@ARRAY_1D DC@noDC LOD2@noLOD -> 0
          ParamA@ARRAY_1D DC@noDC LOD2@LZ -> 0
          ParamA@ARRAY_1D DC@noDC LOD2@LL -> 0
          ParamA@ARRAY_1D DC@DC LOD2@noLOD -> 0
          ParamA@ARRAY_1D DC@DC LOD2@LZ -> 0
          ParamA@ARRAY_1D DC@DC LOD2@LL -> 0
          ParamA@ARRAY_2D DC@noDC LOD2@noLOD -> 7
          ParamA@ARRAY_2D DC@noDC LOD2@LZ -> 8
          ParamA@ARRAY_2D DC@noDC LOD2@LL -> 0
          ParamA@ARRAY_2D DC@DC LOD2@noLOD -> 0
          ParamA@ARRAY_2D DC@DC LOD2@LZ -> 9
          ParamA@ARRAY_2D DC@DC LOD2@LL -> 0
          ParamA@ARRAY_3D DC@noDC LOD2@noLOD -> 0
          ParamA@ARRAY_3D DC@noDC LOD2@LZ -> 0
          ParamA@ARRAY_3D DC@noDC LOD2@LL -> 0
          ParamA@ARRAY_3D DC@DC LOD2@noLOD -> 0
          ParamA@ARRAY_3D DC@DC LOD2@LZ -> 0
          ParamA@ARRAY_3D DC@DC LOD2@LL -> 0
          ParamA@CUBEARRAY DC@noDC LOD2@noLOD -> 0
          ParamA@CUBEARRAY DC@noDC LOD2@LZ -> 0
          ParamA@CUBEARRAY DC@noDC LOD2@LL -> 0
          ParamA@CUBEARRAY DC@DC LOD2@noLOD -> 0
          ParamA@CUBEARRAY DC@DC LOD2@LZ -> 0
          ParamA@CUBEARRAY DC@DC LOD2@LL -> 0
          ;

    Tld2D4
          ParamA@"1D" MS@noMS LOD1@LZ TOFF1@noTOFF -> 0
          ParamA@"1D" MS@noMS LOD1@LZ TOFF1@AOFFI -> 0
          ParamA@"1D" MS@noMS LOD1@LL TOFF1@noTOFF -> 1
          ParamA@"1D" MS@noMS LOD1@LL TOFF1@AOFFI -> 0
          ParamA@"1D" MS@MS LOD1@LZ TOFF1@noTOFF -> 0
          ParamA@"1D" MS@MS LOD1@LZ TOFF1@AOFFI -> 0
          ParamA@"1D" MS@MS LOD1@LL TOFF1@noTOFF -> 0
          ParamA@"1D" MS@MS LOD1@LL TOFF1@AOFFI -> 0
          ParamA@"2D" MS@noMS LOD1@LZ TOFF1@noTOFF -> 2
          ParamA@"2D" MS@noMS LOD1@LZ TOFF1@AOFFI -> 4
          ParamA@"2D" MS@noMS LOD1@LL TOFF1@noTOFF -> 5
          ParamA@"2D" MS@noMS LOD1@LL TOFF1@AOFFI -> 12
          ParamA@"2D" MS@MS LOD1@LZ TOFF1@noTOFF -> 6
          ParamA@"2D" MS@MS LOD1@LZ TOFF1@AOFFI -> 0
          ParamA@"2D" MS@MS LOD1@LL TOFF1@noTOFF -> 0
          ParamA@"2D" MS@MS LOD1@LL TOFF1@AOFFI -> 0
          ParamA@"3D" MS@noMS LOD1@LZ TOFF1@noTOFF -> 7
          ParamA@"3D" MS@noMS LOD1@LZ TOFF1@AOFFI -> 0
          ParamA@"3D" MS@noMS LOD1@LL TOFF1@noTOFF -> 0
          ParamA@"3D" MS@noMS LOD1@LL TOFF1@AOFFI -> 0
          ParamA@"3D" MS@MS LOD1@LZ TOFF1@noTOFF -> 0
          ParamA@"3D" MS@MS LOD1@LZ TOFF1@AOFFI -> 0
          ParamA@"3D" MS@MS LOD1@LL TOFF1@noTOFF -> 0
          ParamA@"3D" MS@MS LOD1@LL TOFF1@AOFFI -> 0
          ParamA@CUBE MS@noMS LOD1@LZ TOFF1@noTOFF -> 0
          ParamA@CUBE MS@noMS LOD1@LZ TOFF1@AOFFI -> 0
          ParamA@CUBE MS@noMS LOD1@LL TOFF1@noTOFF -> 0
          ParamA@CUBE MS@noMS LOD1@LL TOFF1@AOFFI -> 0
          ParamA@CUBE MS@MS LOD1@LZ TOFF1@noTOFF -> 0
          ParamA@CUBE MS@MS LOD1@LZ TOFF1@AOFFI -> 0
          ParamA@CUBE MS@MS LOD1@LL TOFF1@noTOFF -> 0
          ParamA@CUBE MS@MS LOD1@LL TOFF1@AOFFI -> 0
          ParamA@ARRAY_1D MS@noMS LOD1@LZ TOFF1@noTOFF -> 0
          ParamA@ARRAY_1D MS@noMS LOD1@LZ TOFF1@AOFFI -> 0
          ParamA@ARRAY_1D MS@noMS LOD1@LL TOFF1@noTOFF -> 0
          ParamA@ARRAY_1D MS@noMS LOD1@LL TOFF1@AOFFI -> 0
          ParamA@ARRAY_1D MS@MS LOD1@LZ TOFF1@noTOFF -> 0
          ParamA@ARRAY_1D MS@MS LOD1@LZ TOFF1@AOFFI -> 0
          ParamA@ARRAY_1D MS@MS LOD1@LL TOFF1@noTOFF -> 0
          ParamA@ARRAY_1D MS@MS LOD1@LL TOFF1@AOFFI -> 0
          ParamA@ARRAY_2D MS@noMS LOD1@LZ TOFF1@noTOFF -> 8
          ParamA@ARRAY_2D MS@noMS LOD1@LZ TOFF1@AOFFI -> 0
          ParamA@ARRAY_2D MS@noMS LOD1@LL TOFF1@noTOFF -> 0
          ParamA@ARRAY_2D MS@noMS LOD1@LL TOFF1@AOFFI -> 0
          ParamA@ARRAY_2D MS@MS LOD1@LZ TOFF1@noTOFF -> 0
          ParamA@ARRAY_2D MS@MS LOD1@LZ TOFF1@AOFFI -> 0
          ParamA@ARRAY_2D MS@MS LOD1@LL TOFF1@noTOFF -> 0
          ParamA@ARRAY_2D MS@MS LOD1@LL TOFF1@AOFFI -> 0
          ParamA@ARRAY_3D MS@noMS LOD1@LZ TOFF1@noTOFF -> 0
          ParamA@ARRAY_3D MS@noMS LOD1@LZ TOFF1@AOFFI -> 0
          ParamA@ARRAY_3D MS@noMS LOD1@LL TOFF1@noTOFF -> 0
          ParamA@ARRAY_3D MS@noMS LOD1@LL TOFF1@AOFFI -> 0
          ParamA@ARRAY_3D MS@MS LOD1@LZ TOFF1@noTOFF -> 0
          ParamA@ARRAY_3D MS@MS LOD1@LZ TOFF1@AOFFI -> 0
          ParamA@ARRAY_3D MS@MS LOD1@LL TOFF1@noTOFF -> 0
          ParamA@ARRAY_3D MS@MS LOD1@LL TOFF1@AOFFI -> 0
          ParamA@CUBEARRAY MS@noMS LOD1@LZ TOFF1@noTOFF -> 0
          ParamA@CUBEARRAY MS@noMS LOD1@LZ TOFF1@AOFFI -> 0
          ParamA@CUBEARRAY MS@noMS LOD1@LL TOFF1@noTOFF -> 0
          ParamA@CUBEARRAY MS@noMS LOD1@LL TOFF1@AOFFI -> 0
          ParamA@CUBEARRAY MS@MS LOD1@LZ TOFF1@noTOFF -> 0
          ParamA@CUBEARRAY MS@MS LOD1@LZ TOFF1@AOFFI -> 0
          ParamA@CUBEARRAY MS@MS LOD1@LL TOFF1@noTOFF -> 0
          ParamA@CUBEARRAY MS@MS LOD1@LL TOFF1@AOFFI -> 0
          ;

    LutImm8
          LOP@AND 0 0 0 -> 0b10000000
          LOP@AND 0 0 1 -> 0b01000000
          LOP@AND 0 1 0 -> 0b00100000
          LOP@AND 0 1 1 -> 0b00010000
          LOP@AND 1 0 0 -> 0b00001000
          LOP@AND 1 0 1 -> 0b00000100
          LOP@AND 1 1 0 -> 0b00000010
          LOP@AND 1 1 1 -> 0b00000001
          LOP@OR 0 0 0 -> 0b11111110
          LOP@OR 0 0 1 -> 0b11111101
          LOP@OR 0 1 0 -> 0b11111011
          LOP@OR 0 1 1 -> 0b11110111
          LOP@OR 1 0 0 -> 0b11101111
          LOP@OR 1 0 1 -> 0b11011111
          LOP@OR 1 1 0 -> 0b10111111
          LOP@OR 1 1 1 -> 0b01111111
          LOP@XOR 0 0 0 -> 0b10010110
          LOP@XOR 0 0 1 -> 0b01101001
          LOP@XOR 0 1 0 -> 0b01101001
          LOP@XOR 0 1 1 -> 0b10010110
          LOP@XOR 1 0 0 -> 0b01101001
          LOP@XOR 1 0 1 -> 0b10010110
          LOP@XOR 1 1 0 -> 0b10010110
          LOP@XOR 1 1 1 -> 0b01101001
          LOP@PASS_B 0 0 0 -> 0b11001100
          LOP@PASS_B 0 0 1 -> 0b11001100
          LOP@PASS_B 0 1 0 -> 0b00110011
          LOP@PASS_B 0 1 1 -> 0b00110011
          LOP@PASS_B 1 0 0 -> 0b11001100
          LOP@PASS_B 1 0 1 -> 0b11001100
          LOP@PASS_B 1 1 0 -> 0b00110011
          LOP@PASS_B 1 1 1 -> 0b00110011
          ;
TABLES_opex_0
0 0 -> 0
0 1 -> 1
1 1 -> 33
2 1 -> 65
3 1 -> 97
4 1 -> 129
5 1 -> 161
0 2 -> 2
1 2 -> 34
2 2 -> 66
3 2 -> 98
4 2 -> 130
5 2 -> 162
0 3 -> 3
1 3 -> 35
2 3 -> 67
3 3 -> 99
4 3 -> 131
5 3 -> 163
0 4 -> 4
1 4 -> 36
2 4 -> 68
3 4 -> 100
4 4 -> 132
5 4 -> 164
0 5 -> 5
1 5 -> 37
2 5 -> 69
3 5 -> 101
4 5 -> 133
5 5 -> 165
0 6 -> 6
1 6 -> 38
2 6 -> 70
3 6 -> 102
4 6 -> 134
5 6 -> 166
0 7 -> 7
1 7 -> 39
2 7 -> 71
3 7 -> 103
4 7 -> 135
5 7 -> 167
0 8 -> 8
1 8 -> 40
2 8 -> 72
3 8 -> 104
4 8 -> 136
5 8 -> 168
0 9 -> 9
1 9 -> 41
2 9 -> 73
3 9 -> 105
4 9 -> 137
5 9 -> 169
0 10 -> 10
1 10 -> 42
2 10 -> 74
3 10 -> 106
4 10 -> 138
5 10 -> 170
0 11 -> 11
1 11 -> 43
2 11 -> 75
3 11 -> 107
4 11 -> 139
5 11 -> 171
0 12 -> 12
1 12 -> 44
2 12 -> 76
3 12 -> 108
4 12 -> 140
5 12 -> 172
0 13 -> 13
1 13 -> 45
2 13 -> 77
3 13 -> 109
4 13 -> 141
5 13 -> 173
0 14 -> 14
1 14 -> 46
2 14 -> 78
3 14 -> 110
4 14 -> 142
5 14 -> 174
0 15 -> 15
1 15 -> 47
2 15 -> 79
3 15 -> 111
4 15 -> 143
5 15 -> 175
0 17 -> 17
1 17 -> 49
2 17 -> 81
3 17 -> 113
4 17 -> 145
5 17 -> 177
0 18 -> 18
1 18 -> 50
2 18 -> 82
3 18 -> 114
4 18 -> 146
5 18 -> 178
0 19 -> 19
1 19 -> 51
2 19 -> 83
3 19 -> 115
4 19 -> 147
5 19 -> 179
0 20 -> 20
1 20 -> 52
2 20 -> 84
3 20 -> 116
4 20 -> 148
5 20 -> 180
0 21 -> 21
1 21 -> 53
2 21 -> 85
3 21 -> 117
4 21 -> 149
5 21 -> 181
0 22 -> 22
1 22 -> 54
2 22 -> 86
3 22 -> 118
4 22 -> 150
5 22 -> 182
0 23 -> 23
1 23 -> 55
2 23 -> 87
3 23 -> 119
4 23 -> 151
5 23 -> 183
0 24 -> 24
1 24 -> 56
2 24 -> 88
3 24 -> 120
4 24 -> 152
5 24 -> 184
0 25 -> 25
1 25 -> 57
2 25 -> 89
3 25 -> 121
4 25 -> 153
5 25 -> 185
0 26 -> 26
1 26 -> 58
2 26 -> 90
3 26 -> 122
4 26 -> 154
5 26 -> 186
0 27 -> 27
1 27 -> 59
2 27 -> 91
3 27 -> 123
4 27 -> 155
5 27 -> 187
;
TABLES_opex_1
0 0 -> 0
0 1 -> 1
1 1 -> 33
2 1 -> 65
3 1 -> 97
4 1 -> 129
5 1 -> 161
0 2 -> 2
1 2 -> 34
2 2 -> 66
3 2 -> 98
4 2 -> 130
5 2 -> 162
0 3 -> 3
1 3 -> 35
2 3 -> 67
3 3 -> 99
4 3 -> 131
5 3 -> 163
0 4 -> 4
1 4 -> 36
2 4 -> 68
3 4 -> 100
4 4 -> 132
5 4 -> 164
0 5 -> 5
1 5 -> 37
2 5 -> 69
3 5 -> 101
4 5 -> 133
5 5 -> 165
0 6 -> 6
1 6 -> 38
2 6 -> 70
3 6 -> 102
4 6 -> 134
5 6 -> 166
0 7 -> 7
1 7 -> 39
2 7 -> 71
3 7 -> 103
4 7 -> 135
5 7 -> 167
0 8 -> 8
1 8 -> 40
2 8 -> 72
3 8 -> 104
4 8 -> 136
5 8 -> 168
0 9 -> 9
1 9 -> 41
2 9 -> 73
3 9 -> 105
4 9 -> 137
5 9 -> 169
0 10 -> 10
1 10 -> 42
2 10 -> 74
3 10 -> 106
4 10 -> 138
5 10 -> 170
0 11 -> 11
1 11 -> 43
2 11 -> 75
3 11 -> 107
4 11 -> 139
5 11 -> 171
0 12 -> 12
1 12 -> 44
2 12 -> 76
3 12 -> 108
4 12 -> 140
5 12 -> 172
0 13 -> 13
1 13 -> 45
2 13 -> 77
3 13 -> 109
4 13 -> 141
5 13 -> 173
0 14 -> 14
1 14 -> 46
2 14 -> 78
3 14 -> 110
4 14 -> 142
5 14 -> 174
0 15 -> 15
1 15 -> 47
2 15 -> 79
3 15 -> 111
4 15 -> 143
5 15 -> 175
0 17 -> 17
0 18 -> 18
0 19 -> 19
0 20 -> 20
0 21 -> 21
0 22 -> 22
0 23 -> 23
0 24 -> 24
0 25 -> 25
0 26 -> 26
0 27 -> 27
;
TABLES_opex_2
0 0 0 -> 0
0 1 0 -> 1
1 1 0 -> 33
2 1 0 -> 65
3 1 0 -> 97
4 1 0 -> 129
5 1 0 -> 161
0 2 0 -> 2
1 2 0 -> 34
2 2 0 -> 66
3 2 0 -> 98
4 2 0 -> 130
5 2 0 -> 162
0 3 0 -> 3
1 3 0 -> 35
2 3 0 -> 67
3 3 0 -> 99
4 3 0 -> 131
5 3 0 -> 163
0 4 0 -> 4
1 4 0 -> 36
2 4 0 -> 68
3 4 0 -> 100
4 4 0 -> 132
5 4 0 -> 164
0 5 0 -> 5
1 5 0 -> 37
2 5 0 -> 69
3 5 0 -> 101
4 5 0 -> 133
5 5 0 -> 165
0 6 0 -> 6
1 6 0 -> 38
2 6 0 -> 70
3 6 0 -> 102
4 6 0 -> 134
5 6 0 -> 166
0 7 0 -> 7
1 7 0 -> 39
2 7 0 -> 71
3 7 0 -> 103
4 7 0 -> 135
5 7 0 -> 167
0 8 0 -> 8
1 8 0 -> 40
2 8 0 -> 72
3 8 0 -> 104
4 8 0 -> 136
5 8 0 -> 168
0 9 0 -> 9
1 9 0 -> 41
2 9 0 -> 73
3 9 0 -> 105
4 9 0 -> 137
5 9 0 -> 169
0 10 0 -> 10
1 10 0 -> 42
2 10 0 -> 74
3 10 0 -> 106
4 10 0 -> 138
5 10 0 -> 170
0 11 0 -> 11
1 11 0 -> 43
2 11 0 -> 75
3 11 0 -> 107
4 11 0 -> 139
5 11 0 -> 171
0 12 0 -> 12
1 12 0 -> 44
2 12 0 -> 76
3 12 0 -> 108
4 12 0 -> 140
5 12 0 -> 172
0 13 0 -> 13
1 13 0 -> 45
2 13 0 -> 77
3 13 0 -> 109
4 13 0 -> 141
5 13 0 -> 173
0 14 0 -> 14
1 14 0 -> 46
2 14 0 -> 78
3 14 0 -> 110
4 14 0 -> 142
5 14 0 -> 174
0 15 0 -> 15
1 15 0 -> 47
2 15 0 -> 79
3 15 0 -> 111
4 15 0 -> 143
5 15 0 -> 175
0 17 0 -> 17
0 17 1 -> 81
0 18 0 -> 18
0 18 1 -> 82
0 19 0 -> 19
0 19 1 -> 83
0 20 0 -> 20
0 20 1 -> 84
0 21 0 -> 21
0 21 1 -> 85
0 22 0 -> 22
0 22 1 -> 86
0 23 0 -> 23
0 23 1 -> 87
0 24 0 -> 24
0 24 1 -> 88
0 25 0 -> 25
0 25 1 -> 89
0 26 0 -> 26
0 26 1 -> 90
0 27 0 -> 27
0 27 1 -> 91
;
TABLES_opex_3
0 0 0 0 -> 0
0 1 0 0 -> 1
1 1 0 0 -> 33
2 1 0 0 -> 65
3 1 0 0 -> 97
4 1 0 0 -> 129
5 1 0 0 -> 161
0 2 0 0 -> 2
1 2 0 0 -> 34
2 2 0 0 -> 66
3 2 0 0 -> 98
4 2 0 0 -> 130
5 2 0 0 -> 162
0 3 0 0 -> 3
1 3 0 0 -> 35
2 3 0 0 -> 67
3 3 0 0 -> 99
4 3 0 0 -> 131
5 3 0 0 -> 163
0 4 0 0 -> 4
1 4 0 0 -> 36
2 4 0 0 -> 68
3 4 0 0 -> 100
4 4 0 0 -> 132
5 4 0 0 -> 164
0 5 0 0 -> 5
1 5 0 0 -> 37
2 5 0 0 -> 69
3 5 0 0 -> 101
4 5 0 0 -> 133
5 5 0 0 -> 165
0 6 0 0 -> 6
1 6 0 0 -> 38
2 6 0 0 -> 70
3 6 0 0 -> 102
4 6 0 0 -> 134
5 6 0 0 -> 166
0 7 0 0 -> 7
1 7 0 0 -> 39
2 7 0 0 -> 71
3 7 0 0 -> 103
4 7 0 0 -> 135
5 7 0 0 -> 167
0 8 0 0 -> 8
1 8 0 0 -> 40
2 8 0 0 -> 72
3 8 0 0 -> 104
4 8 0 0 -> 136
5 8 0 0 -> 168
0 9 0 0 -> 9
1 9 0 0 -> 41
2 9 0 0 -> 73
3 9 0 0 -> 105
4 9 0 0 -> 137
5 9 0 0 -> 169
0 10 0 0 -> 10
1 10 0 0 -> 42
2 10 0 0 -> 74
3 10 0 0 -> 106
4 10 0 0 -> 138
5 10 0 0 -> 170
0 11 0 0 -> 11
1 11 0 0 -> 43
2 11 0 0 -> 75
3 11 0 0 -> 107
4 11 0 0 -> 139
5 11 0 0 -> 171
0 12 0 0 -> 12
1 12 0 0 -> 44
2 12 0 0 -> 76
3 12 0 0 -> 108
4 12 0 0 -> 140
5 12 0 0 -> 172
0 13 0 0 -> 13
1 13 0 0 -> 45
2 13 0 0 -> 77
3 13 0 0 -> 109
4 13 0 0 -> 141
5 13 0 0 -> 173
0 14 0 0 -> 14
1 14 0 0 -> 46
2 14 0 0 -> 78
3 14 0 0 -> 110
4 14 0 0 -> 142
5 14 0 0 -> 174
0 15 0 0 -> 15
1 15 0 0 -> 47
2 15 0 0 -> 79
3 15 0 0 -> 111
4 15 0 0 -> 143
5 15 0 0 -> 175
0 17 0 0 -> 17
0 17 1 0 -> 49
0 17 0 1 -> 145
0 17 1 1 -> 177
0 18 0 0 -> 18
0 18 1 0 -> 50
0 18 0 1 -> 146
0 18 1 1 -> 178
0 19 0 0 -> 19
0 19 1 0 -> 51
0 19 0 1 -> 147
0 19 1 1 -> 179
0 20 0 0 -> 20
0 20 1 0 -> 52
0 20 0 1 -> 148
0 20 1 1 -> 180
0 21 0 0 -> 21
0 21 1 0 -> 53
0 21 0 1 -> 149
0 21 1 1 -> 181
0 22 0 0 -> 22
0 22 1 0 -> 54
0 22 0 1 -> 150
0 22 1 1 -> 182
0 23 0 0 -> 23
0 23 1 0 -> 55
0 23 0 1 -> 151
0 23 1 1 -> 183
0 24 0 0 -> 24
0 24 1 0 -> 56
0 24 0 1 -> 152
0 24 1 1 -> 184
0 25 0 0 -> 25
0 25 1 0 -> 57
0 25 0 1 -> 153
0 25 1 1 -> 185
0 26 0 0 -> 26
0 26 1 0 -> 58
0 26 0 1 -> 154
0 26 1 1 -> 186
0 27 0 0 -> 27
0 27 1 0 -> 59
0 27 0 1 -> 155
0 27 1 1 -> 187
;
TABLES_opex_4
0 0 0 -> 0
0 1 0 -> 1
1 1 0 -> 33
2 1 0 -> 65
3 1 0 -> 97
4 1 0 -> 129
5 1 0 -> 161
0 2 0 -> 2
1 2 0 -> 34
2 2 0 -> 66
3 2 0 -> 98
4 2 0 -> 130
5 2 0 -> 162
0 3 0 -> 3
1 3 0 -> 35
2 3 0 -> 67
3 3 0 -> 99
4 3 0 -> 131
5 3 0 -> 163
0 4 0 -> 4
1 4 0 -> 36
2 4 0 -> 68
3 4 0 -> 100
4 4 0 -> 132
5 4 0 -> 164
0 5 0 -> 5
1 5 0 -> 37
2 5 0 -> 69
3 5 0 -> 101
4 5 0 -> 133
5 5 0 -> 165
0 6 0 -> 6
1 6 0 -> 38
2 6 0 -> 70
3 6 0 -> 102
4 6 0 -> 134
5 6 0 -> 166
0 7 0 -> 7
1 7 0 -> 39
2 7 0 -> 71
3 7 0 -> 103
4 7 0 -> 135
5 7 0 -> 167
0 8 0 -> 8
1 8 0 -> 40
2 8 0 -> 72
3 8 0 -> 104
4 8 0 -> 136
5 8 0 -> 168
0 9 0 -> 9
1 9 0 -> 41
2 9 0 -> 73
3 9 0 -> 105
4 9 0 -> 137
5 9 0 -> 169
0 10 0 -> 10
1 10 0 -> 42
2 10 0 -> 74
3 10 0 -> 106
4 10 0 -> 138
5 10 0 -> 170
0 11 0 -> 11
1 11 0 -> 43
2 11 0 -> 75
3 11 0 -> 107
4 11 0 -> 139
5 11 0 -> 171
0 12 0 -> 12
1 12 0 -> 44
2 12 0 -> 76
3 12 0 -> 108
4 12 0 -> 140
5 12 0 -> 172
0 13 0 -> 13
1 13 0 -> 45
2 13 0 -> 77
3 13 0 -> 109
4 13 0 -> 141
5 13 0 -> 173
0 14 0 -> 14
1 14 0 -> 46
2 14 0 -> 78
3 14 0 -> 110
4 14 0 -> 142
5 14 0 -> 174
0 15 0 -> 15
1 15 0 -> 47
2 15 0 -> 79
3 15 0 -> 111
4 15 0 -> 143
5 15 0 -> 175
0 17 0 -> 17
0 17 1 -> 49
0 18 0 -> 18
0 18 1 -> 50
0 19 0 -> 19
0 19 1 -> 51
0 20 0 -> 20
0 20 1 -> 52
0 21 0 -> 21
0 21 1 -> 53
0 22 0 -> 22
0 22 1 -> 54
0 23 0 -> 23
0 23 1 -> 55
0 24 0 -> 24
0 24 1 -> 56
0 25 0 -> 25
0 25 1 -> 57
0 26 0 -> 26
0 26 1 -> 58
0 27 0 -> 27
0 27 1 -> 59
;
TABLES_opex_5
0 0 0 0 0 -> 0
0 1 0 0 0 -> 1
1 1 0 0 0 -> 33
2 1 0 0 0 -> 65
3 1 0 0 0 -> 97
4 1 0 0 0 -> 129
5 1 0 0 0 -> 161
0 2 0 0 0 -> 2
1 2 0 0 0 -> 34
2 2 0 0 0 -> 66
3 2 0 0 0 -> 98
4 2 0 0 0 -> 130
5 2 0 0 0 -> 162
0 3 0 0 0 -> 3
1 3 0 0 0 -> 35
2 3 0 0 0 -> 67
3 3 0 0 0 -> 99
4 3 0 0 0 -> 131
5 3 0 0 0 -> 163
0 4 0 0 0 -> 4
1 4 0 0 0 -> 36
2 4 0 0 0 -> 68
3 4 0 0 0 -> 100
4 4 0 0 0 -> 132
5 4 0 0 0 -> 164
0 5 0 0 0 -> 5
1 5 0 0 0 -> 37
2 5 0 0 0 -> 69
3 5 0 0 0 -> 101
4 5 0 0 0 -> 133
5 5 0 0 0 -> 165
0 6 0 0 0 -> 6
1 6 0 0 0 -> 38
2 6 0 0 0 -> 70
3 6 0 0 0 -> 102
4 6 0 0 0 -> 134
5 6 0 0 0 -> 166
0 7 0 0 0 -> 7
1 7 0 0 0 -> 39
2 7 0 0 0 -> 71
3 7 0 0 0 -> 103
4 7 0 0 0 -> 135
5 7 0 0 0 -> 167
0 8 0 0 0 -> 8
1 8 0 0 0 -> 40
2 8 0 0 0 -> 72
3 8 0 0 0 -> 104
4 8 0 0 0 -> 136
5 8 0 0 0 -> 168
0 9 0 0 0 -> 9
1 9 0 0 0 -> 41
2 9 0 0 0 -> 73
3 9 0 0 0 -> 105
4 9 0 0 0 -> 137
5 9 0 0 0 -> 169
0 10 0 0 0 -> 10
1 10 0 0 0 -> 42
2 10 0 0 0 -> 74
3 10 0 0 0 -> 106
4 10 0 0 0 -> 138
5 10 0 0 0 -> 170
0 11 0 0 0 -> 11
1 11 0 0 0 -> 43
2 11 0 0 0 -> 75
3 11 0 0 0 -> 107
4 11 0 0 0 -> 139
5 11 0 0 0 -> 171
0 12 0 0 0 -> 12
1 12 0 0 0 -> 44
2 12 0 0 0 -> 76
3 12 0 0 0 -> 108
4 12 0 0 0 -> 140
5 12 0 0 0 -> 172
0 13 0 0 0 -> 13
1 13 0 0 0 -> 45
2 13 0 0 0 -> 77
3 13 0 0 0 -> 109
4 13 0 0 0 -> 141
5 13 0 0 0 -> 173
0 14 0 0 0 -> 14
1 14 0 0 0 -> 46
2 14 0 0 0 -> 78
3 14 0 0 0 -> 110
4 14 0 0 0 -> 142
5 14 0 0 0 -> 174
0 15 0 0 0 -> 15
1 15 0 0 0 -> 47
2 15 0 0 0 -> 79
3 15 0 0 0 -> 111
4 15 0 0 0 -> 143
5 15 0 0 0 -> 175
0 17 0 0 0 -> 17
0 17 1 0 0 -> 49
0 17 0 1 0 -> 81
0 17 1 1 0 -> 113
0 17 0 0 1 -> 145
0 17 1 0 1 -> 177
0 17 0 1 1 -> 209
0 17 1 1 1 -> 241
0 18 0 0 0 -> 18
0 18 1 0 0 -> 50
0 18 0 1 0 -> 82
0 18 1 1 0 -> 114
0 18 0 0 1 -> 146
0 18 1 0 1 -> 178
0 18 0 1 1 -> 210
0 18 1 1 1 -> 242
0 19 0 0 0 -> 19
0 19 1 0 0 -> 51
0 19 0 1 0 -> 83
0 19 1 1 0 -> 115
0 19 0 0 1 -> 147
0 19 1 0 1 -> 179
0 19 0 1 1 -> 211
0 19 1 1 1 -> 243
0 20 0 0 0 -> 20
0 20 1 0 0 -> 52
0 20 0 1 0 -> 84
0 20 1 1 0 -> 116
0 20 0 0 1 -> 148
0 20 1 0 1 -> 180
0 20 0 1 1 -> 212
0 20 1 1 1 -> 244
0 21 0 0 0 -> 21
0 21 1 0 0 -> 53
0 21 0 1 0 -> 85
0 21 1 1 0 -> 117
0 21 0 0 1 -> 149
0 21 1 0 1 -> 181
0 21 0 1 1 -> 213
0 21 1 1 1 -> 245
0 22 0 0 0 -> 22
0 22 1 0 0 -> 54
0 22 0 1 0 -> 86
0 22 1 1 0 -> 118
0 22 0 0 1 -> 150
0 22 1 0 1 -> 182
0 22 0 1 1 -> 214
0 22 1 1 1 -> 246
0 23 0 0 0 -> 23
0 23 1 0 0 -> 55
0 23 0 1 0 -> 87
0 23 1 1 0 -> 119
0 23 0 0 1 -> 151
0 23 1 0 1 -> 183
0 23 0 1 1 -> 215
0 23 1 1 1 -> 247
0 24 0 0 0 -> 24
0 24 1 0 0 -> 56
0 24 0 1 0 -> 88
0 24 1 1 0 -> 120
0 24 0 0 1 -> 152
0 24 1 0 1 -> 184
0 24 0 1 1 -> 216
0 24 1 1 1 -> 248
0 25 0 0 0 -> 25
0 25 1 0 0 -> 57
0 25 0 1 0 -> 89
0 25 1 1 0 -> 121
0 25 0 0 1 -> 153
0 25 1 0 1 -> 185
0 25 0 1 1 -> 217
0 25 1 1 1 -> 249
0 26 0 0 0 -> 26
0 26 1 0 0 -> 58
0 26 0 1 0 -> 90
0 26 1 1 0 -> 122
0 26 0 0 1 -> 154
0 26 1 0 1 -> 186
0 26 0 1 1 -> 218
0 26 1 1 1 -> 250
0 27 0 0 0 -> 27
0 27 1 0 0 -> 59
0 27 0 1 0 -> 91
0 27 1 1 0 -> 123
0 27 0 0 1 -> 155
0 27 1 0 1 -> 187
0 27 0 1 1 -> 219
0 27 1 1 1 -> 251
;
TABLES_opex_6
0 0 0 0 -> 0
0 1 0 0 -> 1
1 1 0 0 -> 33
2 1 0 0 -> 65
3 1 0 0 -> 97
4 1 0 0 -> 129
5 1 0 0 -> 161
0 2 0 0 -> 2
1 2 0 0 -> 34
2 2 0 0 -> 66
3 2 0 0 -> 98
4 2 0 0 -> 130
5 2 0 0 -> 162
0 3 0 0 -> 3
1 3 0 0 -> 35
2 3 0 0 -> 67
3 3 0 0 -> 99
4 3 0 0 -> 131
5 3 0 0 -> 163
0 4 0 0 -> 4
1 4 0 0 -> 36
2 4 0 0 -> 68
3 4 0 0 -> 100
4 4 0 0 -> 132
5 4 0 0 -> 164
0 5 0 0 -> 5
1 5 0 0 -> 37
2 5 0 0 -> 69
3 5 0 0 -> 101
4 5 0 0 -> 133
5 5 0 0 -> 165
0 6 0 0 -> 6
1 6 0 0 -> 38
2 6 0 0 -> 70
3 6 0 0 -> 102
4 6 0 0 -> 134
5 6 0 0 -> 166
0 7 0 0 -> 7
1 7 0 0 -> 39
2 7 0 0 -> 71
3 7 0 0 -> 103
4 7 0 0 -> 135
5 7 0 0 -> 167
0 8 0 0 -> 8
1 8 0 0 -> 40
2 8 0 0 -> 72
3 8 0 0 -> 104
4 8 0 0 -> 136
5 8 0 0 -> 168
0 9 0 0 -> 9
1 9 0 0 -> 41
2 9 0 0 -> 73
3 9 0 0 -> 105
4 9 0 0 -> 137
5 9 0 0 -> 169
0 10 0 0 -> 10
1 10 0 0 -> 42
2 10 0 0 -> 74
3 10 0 0 -> 106
4 10 0 0 -> 138
5 10 0 0 -> 170
0 11 0 0 -> 11
1 11 0 0 -> 43
2 11 0 0 -> 75
3 11 0 0 -> 107
4 11 0 0 -> 139
5 11 0 0 -> 171
0 12 0 0 -> 12
1 12 0 0 -> 44
2 12 0 0 -> 76
3 12 0 0 -> 108
4 12 0 0 -> 140
5 12 0 0 -> 172
0 13 0 0 -> 13
1 13 0 0 -> 45
2 13 0 0 -> 77
3 13 0 0 -> 109
4 13 0 0 -> 141
5 13 0 0 -> 173
0 14 0 0 -> 14
1 14 0 0 -> 46
2 14 0 0 -> 78
3 14 0 0 -> 110
4 14 0 0 -> 142
5 14 0 0 -> 174
0 15 0 0 -> 15
1 15 0 0 -> 47
2 15 0 0 -> 79
3 15 0 0 -> 111
4 15 0 0 -> 143
5 15 0 0 -> 175
0 17 0 0 -> 17
0 17 1 0 -> 49
0 17 0 1 -> 81
0 17 1 1 -> 113
0 18 0 0 -> 18
0 18 1 0 -> 50
0 18 0 1 -> 82
0 18 1 1 -> 114
0 19 0 0 -> 19
0 19 1 0 -> 51
0 19 0 1 -> 83
0 19 1 1 -> 115
0 20 0 0 -> 20
0 20 1 0 -> 52
0 20 0 1 -> 84
0 20 1 1 -> 116
0 21 0 0 -> 21
0 21 1 0 -> 53
0 21 0 1 -> 85
0 21 1 1 -> 117
0 22 0 0 -> 22
0 22 1 0 -> 54
0 22 0 1 -> 86
0 22 1 1 -> 118
0 23 0 0 -> 23
0 23 1 0 -> 55
0 23 0 1 -> 87
0 23 1 1 -> 119
0 24 0 0 -> 24
0 24 1 0 -> 56
0 24 0 1 -> 88
0 24 1 1 -> 120
0 25 0 0 -> 25
0 25 1 0 -> 57
0 25 0 1 -> 89
0 25 1 1 -> 121
0 26 0 0 -> 26
0 26 1 0 -> 58
0 26 0 1 -> 90
0 26 1 1 -> 122
0 27 0 0 -> 27
0 27 1 0 -> 59
0 27 0 1 -> 91
0 27 1 1 -> 123
;
TABLES_op_0
0 0 0 0 -> 128
0 0 0 1 -> 64
0 0 1 0 -> 32
0 0 1 1 -> 16
0 1 0 0 -> 8
0 1 0 1 -> 4
0 1 1 0 -> 2
0 1 1 1 -> 1
1 0 0 0 -> 254
1 0 0 1 -> 253
1 0 1 0 -> 251
1 0 1 1 -> 247
1 1 0 0 -> 239
1 1 0 1 -> 223
1 1 1 0 -> 191
1 1 1 1 -> 127
2 0 0 0 -> 150
2 0 0 1 -> 105
2 0 1 0 -> 105
2 0 1 1 -> 150
2 1 0 0 -> 105
2 1 0 1 -> 150
2 1 1 0 -> 150
2 1 1 1 -> 105
3 0 0 0 -> 204
3 0 0 1 -> 204
3 0 1 0 -> 51
3 0 1 1 -> 51
3 1 0 0 -> 204
3 1 0 1 -> 204
3 1 1 0 -> 51
3 1 1 1 -> 51
;
TABLES_op_1
0 0 0 -> 128
0 0 1 -> 64
0 1 0 -> 8
0 1 1 -> 4
1 0 0 -> 254
1 0 1 -> 253
1 1 0 -> 239
1 1 1 -> 223
2 0 0 -> 150
2 0 1 -> 105
2 1 0 -> 105
2 1 1 -> 150
3 0 0 -> 204
3 0 1 -> 204
3 1 0 -> 204
3 1 1 -> 204
;
TABLES_op_2
0 0 0 -> 192
0 0 1 -> 48
0 1 0 -> 12
0 1 1 -> 3
1 0 0 -> 252
1 0 1 -> 243
1 1 0 -> 207
1 1 1 -> 63
2 0 0 -> 60
2 0 1 -> 195
2 1 0 -> 195
2 1 1 -> 60
3 0 0 -> 204
3 0 1 -> 51
3 1 0 -> 204
3 1 1 -> 51
;
TABLES_op_3
0 0 -> 192
0 1 -> 12
1 0 -> 252
1 1 -> 207
2 0 -> 60
2 1 -> 195
3 0 -> 204
3 1 -> 204
;
TABLES_opex_7
0 0 0 0 -> 0
0 1 0 0 -> 1
1 1 0 0 -> 33
2 1 0 0 -> 65
3 1 0 0 -> 97
4 1 0 0 -> 129
5 1 0 0 -> 161
0 2 0 0 -> 2
1 2 0 0 -> 34
2 2 0 0 -> 66
3 2 0 0 -> 98
4 2 0 0 -> 130
5 2 0 0 -> 162
0 3 0 0 -> 3
1 3 0 0 -> 35
2 3 0 0 -> 67
3 3 0 0 -> 99
4 3 0 0 -> 131
5 3 0 0 -> 163
0 4 0 0 -> 4
1 4 0 0 -> 36
2 4 0 0 -> 68
3 4 0 0 -> 100
4 4 0 0 -> 132
5 4 0 0 -> 164
0 5 0 0 -> 5
1 5 0 0 -> 37
2 5 0 0 -> 69
3 5 0 0 -> 101
4 5 0 0 -> 133
5 5 0 0 -> 165
0 6 0 0 -> 6
1 6 0 0 -> 38
2 6 0 0 -> 70
3 6 0 0 -> 102
4 6 0 0 -> 134
5 6 0 0 -> 166
0 7 0 0 -> 7
1 7 0 0 -> 39
2 7 0 0 -> 71
3 7 0 0 -> 103
4 7 0 0 -> 135
5 7 0 0 -> 167
0 8 0 0 -> 8
1 8 0 0 -> 40
2 8 0 0 -> 72
3 8 0 0 -> 104
4 8 0 0 -> 136
5 8 0 0 -> 168
0 9 0 0 -> 9
1 9 0 0 -> 41
2 9 0 0 -> 73
3 9 0 0 -> 105
4 9 0 0 -> 137
5 9 0 0 -> 169
0 10 0 0 -> 10
1 10 0 0 -> 42
2 10 0 0 -> 74
3 10 0 0 -> 106
4 10 0 0 -> 138
5 10 0 0 -> 170
0 11 0 0 -> 11
1 11 0 0 -> 43
2 11 0 0 -> 75
3 11 0 0 -> 107
4 11 0 0 -> 139
5 11 0 0 -> 171
0 12 0 0 -> 12
1 12 0 0 -> 44
2 12 0 0 -> 76
3 12 0 0 -> 108
4 12 0 0 -> 140
5 12 0 0 -> 172
0 13 0 0 -> 13
1 13 0 0 -> 45
2 13 0 0 -> 77
3 13 0 0 -> 109
4 13 0 0 -> 141
5 13 0 0 -> 173
0 14 0 0 -> 14
1 14 0 0 -> 46
2 14 0 0 -> 78
3 14 0 0 -> 110
4 14 0 0 -> 142
5 14 0 0 -> 174
0 15 0 0 -> 15
1 15 0 0 -> 47
2 15 0 0 -> 79
3 15 0 0 -> 111
4 15 0 0 -> 143
5 15 0 0 -> 175
0 17 0 0 -> 17
0 17 1 0 -> 81
0 17 0 1 -> 145
0 17 1 1 -> 209
0 18 0 0 -> 18
0 18 1 0 -> 82
0 18 0 1 -> 146
0 18 1 1 -> 210
0 19 0 0 -> 19
0 19 1 0 -> 83
0 19 0 1 -> 147
0 19 1 1 -> 211
0 20 0 0 -> 20
0 20 1 0 -> 84
0 20 0 1 -> 148
0 20 1 1 -> 212
0 21 0 0 -> 21
0 21 1 0 -> 85
0 21 0 1 -> 149
0 21 1 1 -> 213
0 22 0 0 -> 22
0 22 1 0 -> 86
0 22 0 1 -> 150
0 22 1 1 -> 214
0 23 0 0 -> 23
0 23 1 0 -> 87
0 23 0 1 -> 151
0 23 1 1 -> 215
0 24 0 0 -> 24
0 24 1 0 -> 88
0 24 0 1 -> 152
0 24 1 1 -> 216
0 25 0 0 -> 25
0 25 1 0 -> 89
0 25 0 1 -> 153
0 25 1 1 -> 217
0 26 0 0 -> 26
0 26 1 0 -> 90
0 26 0 1 -> 154
0 26 1 1 -> 218
0 27 0 0 -> 27
0 27 1 0 -> 91
0 27 0 1 -> 155
0 27 1 1 -> 219
;
TABLES_opex_8
0 0 0 -> 0
0 1 0 -> 1
1 1 0 -> 33
2 1 0 -> 65
3 1 0 -> 97
4 1 0 -> 129
5 1 0 -> 161
0 2 0 -> 2
1 2 0 -> 34
2 2 0 -> 66
3 2 0 -> 98
4 2 0 -> 130
5 2 0 -> 162
0 3 0 -> 3
1 3 0 -> 35
2 3 0 -> 67
3 3 0 -> 99
4 3 0 -> 131
5 3 0 -> 163
0 4 0 -> 4
1 4 0 -> 36
2 4 0 -> 68
3 4 0 -> 100
4 4 0 -> 132
5 4 0 -> 164
0 5 0 -> 5
1 5 0 -> 37
2 5 0 -> 69
3 5 0 -> 101
4 5 0 -> 133
5 5 0 -> 165
0 6 0 -> 6
1 6 0 -> 38
2 6 0 -> 70
3 6 0 -> 102
4 6 0 -> 134
5 6 0 -> 166
0 7 0 -> 7
1 7 0 -> 39
2 7 0 -> 71
3 7 0 -> 103
4 7 0 -> 135
5 7 0 -> 167
0 8 0 -> 8
1 8 0 -> 40
2 8 0 -> 72
3 8 0 -> 104
4 8 0 -> 136
5 8 0 -> 168
0 9 0 -> 9
1 9 0 -> 41
2 9 0 -> 73
3 9 0 -> 105
4 9 0 -> 137
5 9 0 -> 169
0 10 0 -> 10
1 10 0 -> 42
2 10 0 -> 74
3 10 0 -> 106
4 10 0 -> 138
5 10 0 -> 170
0 11 0 -> 11
1 11 0 -> 43
2 11 0 -> 75
3 11 0 -> 107
4 11 0 -> 139
5 11 0 -> 171
0 12 0 -> 12
1 12 0 -> 44
2 12 0 -> 76
3 12 0 -> 108
4 12 0 -> 140
5 12 0 -> 172
0 13 0 -> 13
1 13 0 -> 45
2 13 0 -> 77
3 13 0 -> 109
4 13 0 -> 141
5 13 0 -> 173
0 14 0 -> 14
1 14 0 -> 46
2 14 0 -> 78
3 14 0 -> 110
4 14 0 -> 142
5 14 0 -> 174
0 15 0 -> 15
1 15 0 -> 47
2 15 0 -> 79
3 15 0 -> 111
4 15 0 -> 143
5 15 0 -> 175
0 17 0 -> 17
0 17 1 -> 145
0 18 0 -> 18
0 18 1 -> 146
0 19 0 -> 19
0 19 1 -> 147
0 20 0 -> 20
0 20 1 -> 148
0 21 0 -> 21
0 21 1 -> 149
0 22 0 -> 22
0 22 1 -> 150
0 23 0 -> 23
0 23 1 -> 151
0 24 0 -> 24
0 24 1 -> 152
0 25 0 -> 25
0 25 1 -> 153
0 26 0 -> 26
0 26 1 -> 154
0 27 0 -> 27
0 27 1 -> 155
;
TABLES_op_4
0 0 0 0 0 -> 32776
0 0 0 0 1 -> 16388
0 0 0 1 0 -> 8194
0 0 0 1 1 -> 4097
0 0 1 0 0 -> 2176
0 0 1 0 1 -> 1088
0 0 1 1 0 -> 544
0 0 1 1 1 -> 272
0 1 0 0 0 -> 60078
0 1 0 0 1 -> 54621
0 1 0 1 0 -> 47787
0 1 0 1 1 -> 30039
0 1 1 0 0 -> 44778
0 1 1 0 1 -> 24021
0 1 1 1 0 -> 43962
0 1 1 1 1 -> 22389
0 2 0 0 0 -> 27302
0 2 0 0 1 -> 38233
0 2 0 1 0 -> 39593
0 2 0 1 1 -> 25942
0 2 1 0 0 -> 42602
0 2 1 0 1 -> 22933
0 2 1 1 0 -> 43418
0 2 1 1 1 -> 22117
1 0 0 0 0 -> 43146
1 0 0 0 1 -> 21573
1 0 0 1 0 -> 41514
1 0 0 1 1 -> 20757
1 0 1 0 0 -> 35496
1 0 1 0 1 -> 17748
1 0 1 1 0 -> 10914
1 0 1 1 1 -> 5457
1 1 0 0 0 -> 65263
1 1 0 0 1 -> 64991
1 1 0 1 0 -> 64447
1 1 0 1 1 -> 63359
1 1 1 0 0 -> 61438
1 1 1 0 1 -> 57341
1 1 1 1 0 -> 49147
1 1 1 1 1 -> 32759
1 2 0 0 0 -> 22117
1 2 0 0 1 -> 43418
1 2 0 1 0 -> 22933
1 2 0 1 1 -> 42602
1 2 1 0 0 -> 25942
1 2 1 0 1 -> 39593
1 2 1 1 0 -> 38233
1 2 1 1 1 -> 27302
2 0 0 0 0 -> 10370
2 0 0 0 1 -> 5185
2 0 0 1 0 -> 33320
2 0 0 1 1 -> 16660
2 0 1 0 0 -> 33320
2 0 1 0 1 -> 16660
2 0 1 1 0 -> 10370
2 0 1 1 1 -> 5185
2 1 0 0 0 -> 48875
2 1 0 0 1 -> 32215
2 1 0 1 0 -> 60350
2 1 0 1 1 -> 55165
2 1 1 0 0 -> 60350
2 1 1 0 1 -> 55165
2 1 1 1 0 -> 48875
2 1 1 1 1 -> 32215
2 2 0 0 0 -> 38505
2 2 0 0 1 -> 27030
2 2 0 1 0 -> 27030
2 2 0 1 1 -> 38505
2 2 1 0 0 -> 27030
2 2 1 0 1 -> 38505
2 2 1 1 0 -> 38505
2 2 1 1 1 -> 27030
;
TABLES_op_5
0 0 0 -> 32776
0 0 1 -> 8194
0 1 0 -> 2176
0 1 1 -> 544
1 0 0 -> 63631
1 0 1 -> 61999
1 1 0 -> 36856
1 1 1 -> 12274
2 0 0 -> 10370
2 0 1 -> 33320
2 1 0 -> 33320
2 1 1 -> 10370
;


GetPseudoOpRRR
Register@RZ - -> PSEUDO_OPCODE1@MOV
- Register@RZ -> PSEUDO_OPCODE1@MOV
;

GetPseudoOpRIR
Register@RZ - - -> PSEUDO_OPCODE1@MOV
- 0 - -> PSEUDO_OPCODE1@MOV
- 1 Register@RZ -> PSEUDO_OPCODE1@MOV
- 1 - -> PSEUDO_OPCODE1@IADD
- 2 Register@RZ -> PSEUDO_OPCODE1@SHL
- 4 Register@RZ -> PSEUDO_OPCODE1@SHL
- 8 Register@RZ -> PSEUDO_OPCODE1@SHL
- 16 Register@RZ -> PSEUDO_OPCODE1@SHL
- 32 Register@RZ -> PSEUDO_OPCODE1@SHL
- 64 Register@RZ -> PSEUDO_OPCODE1@SHL
- 128 Register@RZ -> PSEUDO_OPCODE1@SHL
- 256 Register@RZ -> PSEUDO_OPCODE1@SHL
- 512 Register@RZ -> PSEUDO_OPCODE1@SHL
- 1024 Register@RZ -> PSEUDO_OPCODE1@SHL
- 2048 Register@RZ -> PSEUDO_OPCODE1@SHL
- 4096 Register@RZ -> PSEUDO_OPCODE1@SHL
- 8192 Register@RZ -> PSEUDO_OPCODE1@SHL
- 16384 Register@RZ -> PSEUDO_OPCODE1@SHL
- 32768 Register@RZ -> PSEUDO_OPCODE1@SHL
- 32768 Register@RZ -> PSEUDO_OPCODE1@SHL
- 131072 Register@RZ -> PSEUDO_OPCODE1@SHL
- 262144 Register@RZ -> PSEUDO_OPCODE1@SHL
- 524288 Register@RZ -> PSEUDO_OPCODE1@SHL
- 1048576 Register@RZ -> PSEUDO_OPCODE1@SHL
- 2097152 Register@RZ -> PSEUDO_OPCODE1@SHL
- 4194304 Register@RZ -> PSEUDO_OPCODE1@SHL
- 8388608 Register@RZ -> PSEUDO_OPCODE1@SHL
- 16777216 Register@RZ -> PSEUDO_OPCODE1@SHL
- 33554432 Register@RZ -> PSEUDO_OPCODE1@SHL
- 67108864 Register@RZ -> PSEUDO_OPCODE1@SHL
- 134217728 Register@RZ -> PSEUDO_OPCODE1@SHL
- 268435456 Register@RZ -> PSEUDO_OPCODE1@SHL
- 536870912 Register@RZ -> PSEUDO_OPCODE1@SHL
- 1073741824 Register@RZ -> PSEUDO_OPCODE1@SHL
- 2147483648 Register@RZ -> PSEUDO_OPCODE1@SHL
;

GetPseudoOpRCR
Register@RZ - - -> PSEUDO_OPCODE1@MOV
;

GetPseudoOpRRC
Register@RZ - - -> PSEUDO_OPCODE1@MOV
- Register@RZ - -> PSEUDO_OPCODE1@MOV
;

GetPseudoOpRRI
Register@RZ - - -> PSEUDO_OPCODE1@MOV
- Register@RZ - -> PSEUDO_OPCODE1@MOV
;



OPERATION PROPERTIES
    IWIDTH
    ITYPE
    SPA
    SECONDARY
    TERTIARY
    BRANCH_TARGET_INDEX
    CC_BYPASS_ALLOWED
    MIN_WAIT_NEEDED
    OPERATION_TYPE
    IMM_INDEX
    VALID_IN_SHADERS
    IERRORS
    IDEST_OPERAND_MAP
    IDEST2_OPERAND_MAP
    ISRC_A_OPERAND_MAP
    ISRC_B_OPERAND_MAP
    ISRC_C_OPERAND_MAP
    IDEST_OPERAND_TYPE
    IDEST2_OPERAND_TYPE
    ISRC_A_OPERAND_TYPE
    ISRC_B_OPERAND_TYPE
    ISRC_C_OPERAND_TYPE
    INSTRUCTION_TYPE
    BRANCH_TYPE
    CC_INDEX
    SINGLETON
    SIDL_NAME
    PRED_INDEX
    ;

OPERATION PREDICATES
    ISRC_A_SIZE
    ISRC_B_SIZE
    ISRC_C_SIZE
    IDEST_SIZE
    IDEST2_SIZE
    DOES_READ_CC
    VIRTUAL_QUEUE
    ;



FUNIT uC
   ISSUE_SLOTS 0;
   ENCODING WIDTH 128;




  KeepRefCnt '..........................................................................................................................X.....'
  CCC_1 '...........................................................................................................................XXXXX'
  Imm32 '............................................................................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX....................'
  Sync '................................................................X...............................................................'
  PredNot '............................................................................................................X...................'
  Pred '.............................................................................................................XXX................'
  QuadMask '.....................................................................................XXXX.......................................'
  QuadMask2 '................................................................................................................XXXX............'
  Dest '........................................................................................................................XXXXXXXX'
  Dest2 '............................................................................................XXXXXXXX............................'
  Dest2_2 '....................................................................................XXXXXXXX....................................'
  RegA '................................................................................................................XXXXXXXX........'
  RegB '....................................................................................................XXXXXXXX....................'
  RegC '.................................................................................XXXXXXXX.......................................'
  BarReg '.....................................................................................................................XXXXXX.....'

  RegBALD '.................................................................................XXXXXXXX.......................................'
  RegBAST '........................................................................................................................XXXXXXXX'

  NODEP '..............................................................................X.................................................'
  Phase '.................................................................................................XX.............................'
  Wmsk '.............................................................................................XXXX...............................'
  Wmsk3 '...........................................................................XXX..................................................'
  tex2d_4 '.......................................................................XXXX.....................................................'
  ParamA '.................................................................................................XXX............................'
  FP16RM '.........................................................................X......................................................'
  FP16RM1 '.....................................................................X..........................................................'
  TOFF1 '............................................................................................X...................................'
  CL '.........................................................................X......................................................'
  CLB '...........................................................................................X....................................'
  MS '.............................................................................X..................................................'
  MS1 '..................................................................................................X.............................'
  MS2 '................................................................................X...............................................'
  LOD1 '........................................................................X.......................................................'
  LOD1B '..........................................................................................X.....................................'
  TidB '...............................................................................XXXXXXXXXXXXX....................................'
  TidBTEX '....................................................................................XXXXXXXX....................................'
  TidBSAMP '...............................................................................XXXXX............................................'
  TidBWmsk '.......................................................................XXXXXXXXXXXXX.........XXXX...............................'
  TidBWmsk2 '.........................................................................XXXXXXXXXXXXX.......XXXX...............................'
  TidBTEX3 '..................................................................................XXXXXXXX......................................'
  TidBSAMP3 '.............................................................................XXXXX..............................................'
  LOD '......................................................................XXX.......................................................'
  LODB '........................................................................................XXX.....................................'
  AOFFI '.........................................................................X......................................................'
  AOFFI2 '............................................................................X...................................................'
  AOFFIB '...........................................................................................X....................................'
  DC '.............................................................................X..................................................'
  NDV '............................................................................................X...................................'
  NDV2 '.........................................................................................X......................................'
  TexQuery '....................................................................................................XXXXXX......................'
  STPMode '................................................................................................X...............................'
  LC '.....................................................................X..........................................................'
  LCB '.......................................................................................X........................................'
  LCD '.............................................................................X..................................................'
  PredDst '..........................................................................XXX...................................................'
  PredDstLop '.............................................................................XXX................................................'




  TexComp '......................................................................XX........................................................'
  TexComp2 '..........................................................................XX....................................................'
  TOFF2 '........................................................................XX......................................................'
  TexCompB '........................................................................................XX......................................'
  TOFF2B '..........................................................................................XX....................................'

  Sat '.............................................................................X..................................................'
  PSign '..............................................................................XX................................................'
  WriteCC '................................................................................X...............................................'
  Xm '....................................................................................X...........................................'

  ALSize '...............................................................................XX...............................................'
  AIO '...............................................................................................X................................'
  P '................................................................................................X...............................'
  Imm10 '..................................................................................................XXXXXXXXXX....................'
  Imm11 '.................................................................................................XXXXXXXXXXX....................'
  msbImm11 '.................................................................................................X..............................'

  FMZ '.........................................................................XX.....................................................'
  Rnd '...........................................................................XX...................................................'
  nC '..............................................................................X.................................................'
  nAB '...............................................................................X................................................'

  FMZ_H '.......................................................................XX.......................................................'
  FMZ_H2 '.....................................................................XX.........................................................'
  nAB_H '.......................................................................X........................................................'
  vBmux_H '.........................................................................XX.....................................................'
  vAmux_H '.........................................................................XX.....................................................'
  vAmux_H2 '...............................................................................XX...............................................'
  nC_H '...........................................................................X....................................................'
  nC_H2 '............................................................................X...................................................'
  FimmH0 '............................................................................................XXXXXXXXXXXXXXXX....................'
  FimmH1 '............................................................................XXXXXXXXXXXXXXXX....................................'
  sat_H '...........................................................................X....................................................'

  FMZLow '..................................................................................XX............................................'
  ScaleLow '....................................................................................XXX.........................................'
  RndLow '.......................................................................................XX.......................................'

  SatLow '............................................................................X...................................................'
  IPAOp '........................................................................XX......................................................'
  MSI '..........................................................................XX....................................................'
  IPAIDX '.........................................................................................X......................................'
  IPAImm10 '..........................................................................................XXXXXXXXXX............................'
  IPAImm11 '.........................................................................................XXXXXXXXXXX............................'
  PredSrc '..............................................................................XXX...............................................'
  PredSrcldst '...................................................................XXX..........................................................'
  IdxrfImm '.................................................................................................XXXXXXXXXXX....................'
  PredSrcNot '.............................................................................X..................................................'




  nC2 '......................................................................X.........................................................'
  nAB2 '.......................................................................X........................................................'
  SatHigh '........................................................................X.......................................................'
  FMZHigh '.........................................................................XX.....................................................'
  WriteCCI '...........................................................................X....................................................'

  PSign2 '.......................................................................XX.......................................................'
  Sat2 '.........................................................................X......................................................'
  Xm2 '..........................................................................X.....................................................'

  MufuOp '........................................................................................................XXXX....................'

  BSigned '......................................................................................X.........................................'
  ASigned '.......................................................................................X........................................'
  HILO '........................................................................................X.......................................'

  BSigned2 '........................................................................X.......................................................'
  ASigned2 '.........................................................................X......................................................'
  HILO2 '..........................................................................X.....................................................'
  XMADCop '...........................................................................XXX..................................................'
  XMADCop2 '............................................................................XX..................................................'




  BSigned4 '......................................................................X.........................................................'
  BSigned5 '..............................................................................X.................................................'
  ASigned5 '...............................................................................X................................................'
  Xm7 '.........................................................................................X......................................'
  Xm8 '.........................................................................X......................................................'
  MRG '..........................................................................................X.....................................'
  MRG2 '.......................................................................X........................................................'
  PSL '...........................................................................................X....................................'
  PSL2 '........................................................................X.......................................................'
  HILO4 '............................................................................................X...................................'
  HILO5 '...........................................................................X....................................................'
  XMADFiller '.............................................................................................XXXXXXX............................'
  XMADImmFiller '.......................................................................X........................................................'

  Imm24sh '.........................................................................XXXXXXXXXXXXXXXXXXXXXXXX...............................'
  Imm32sh '................................................................X................................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
  Imm4n '.........................................................................XXXX...................................................'
  Imm4m '.............................................................................XXXX...............................................'
  Imm4l '.................................................................................XXXX...........................................'
  Imm4k '.....................................................................................XXXX.......................................'
  Imm4j '.........................................................................................XXXX...................................'
  Imm4i '.............................................................................................XXXX...............................'
  Imm4h '.................................................................................................XXXX...........................'
  Imm4g '.....................................................................................................XXXX.......................'
  Imm4f '................................................................X........................................XXX....................'
  Imm4e '............................................................................................................XXXX................'
  Imm4d '................................................................................................................XXXX............'
  Imm4c '....................................................................................................................XXXX........'
  Imm4b '........................................................................................................................XXXX....'
  Imm4a '............................................................................................................................XXXX'




  nA1 '...............................................................................X................................................'
  aA2 '.................................................................................X..............................................'
  nB2 '..................................................................................X.............................................'
  FComp '............................................................................XXXX................................................'
  FComp2 '.........................................................................................XXXX...................................'
  FComp3 '...........................................................................XXXX.................................................'
  H_and '..............................................................................X.................................................'
  H_and2 '..........................................................................X.....................................................'
  vAmux '...............................................................................XX...............................................'
  vBmux '..................................................................................................XX............................'
  nA2 '....................................................................................X...........................................'
  aB2 '...................................................................................X............................................'
  aAH '...................................................................................X............................................'
  aA3 '.........................................................................X......................................................'
  nB3 '..........................................................................X.....................................................'
  aA4 '........................................................................................................................X.......'
  nB4 '.........................................................................................................................X......'
  nBH '................................................................................................X...............................'
  aBH '.................................................................................................X..............................'
  nBH2 '.......................................................................X........................................................'
  aBH2 '.........................................................................X......................................................'
  FTZ '...................................................................................X............................................'
  FTZ2 '................................................................................X...............................................'
  FTZ3 '........................................................................X.......................................................'
  FTZH '.........................................................................................................................X......'
  SrcNot '.....................................................................................X..........................................'
  SrcPred '......................................................................................XXX.......................................'
  Src1Not '...............................................................................................X................................'
  Src1Pred '................................................................................................XXX.............................'
  Src2Not '................................................................................................................X...............'
  Src2Pred '.................................................................................................................XXX............'
  PDest '..........................................................................................................................XXX...'
  PNDest '.............................................................................................................................XXX'

  nA3 '....................................................................................X...........................................'
  nA4 '..................................................................................X.............................................'
  nA5 '..........................................................................................X.....................................'
  nA6 '.......................................................................X........................................................'
  BVal '...................................................................................X............................................'
  BVal1 '...........................................................................X....................................................'

  SReg '....................................................................................................XXXXXXXX....................'
  nA7 '............................................................................X...................................................'
  nB7 '.............................................................................X..................................................'
  nC7 '..............................................................................X.................................................'
  Xm9 '...............................................................................X................................................'
  LRS '.........................................................................................XX.....................................'
  Apart '...........................................................................................XX...................................'
  Bpart '.............................................................................................XX.................................'
  Cpart '...............................................................................................XX...............................'




  LE '..................................................................................................X.............................'
  SBID '...................................................................................................XXX..........................'
  PendCnt '......................................................................................................XXXXXX....................'
  Imm6 '..........................................................................................................................XXXXXX'
  ImmU5 '....................................................................................XXXXX.......................................'
  ImmU5_2 '...............................................................................................XXXXX............................'
  ImmU5_3 '........................................................................XXXXX...................................................'


  COP '......................................................................XX........................................................'
  COP1 '...........................................................................XX...................................................'
  LSSize '........................................................................XXX.....................................................'
  Rf '.........................................................................XX.....................................................'
  E '...........................................................................X....................................................'

  AdMode '..................................................................................XX............................................'
  LSSize2 '.............................................................................XXX................................................'
  COP2 '..................................................................................XX............................................'

  SABCExt '.........................................................................XXXXXXX................................................'
  SBExt '.........................................................................X......................................................'
  SCExt '...........................................................................XX...................................................'
  SAExt '.............................................................................XX.................................................'
  AtomOp '........................................................................XXXX....................................................'
  AtomOp2 '................................................................................XXXX............................................'
  satmOp '...............................................................................................XXXX.............................'
  satmBA '...................................................................................................X............................'
  idxrfBA '................................................................................................X...............................'
  satmSize1 '..........................................................................XXX...................................................'
  satmSize2 '.........................................................................................XXX....................................'
  AtomSize '............................................................................XXX.................................................'
  bcRZ '............................................................................XX..................................................'
  atomsbcRZ '..................................................................................................XX............................'
  AtomSize1 '..............................................................................X.................................................'
  Size1RegBC '..............................................................................X.....................XXXXXXXX....................'
  asSize1RegBC '...........................................................................X........................XXXXXXXX....................'
  AtomE '...............................................................................X................................................'
  Imm20a '................................................................................XXXXXXXXXXXXXXXXXXXX............................'
  Imm22atoms '............................................................................XXXXXXXXXXXXXXXXXXXXXX..............................'
  AtomsSize '..................................................................................................XX............................'
  RedOp '......................................................................................................XXX.......................'
  SURedOp '.....................................................................................................XXX........................'
  PopcSz '..............................................................................XX................................................'
  AtomsSize1 '...........................................................................X....................................................'
  atomscSPIN '..........................................................................X.....................................................'
  RedSize '.........................................................................................................XXX....................'




  Imm20 '........................................................................................XXXXXXXXXXXXXXXXXXXX....................'
  Bpt '.......................................................................................................................XXX......'

  Imm5I '....................................................................................XXXXX.......................................'
  Imm5Ib '......................................................................XXXXX.....................................................'

  CA '..........................................................................................................................X.....'
  LMT '.........................................................................................................................X......'
  INC '.........................................................................................................................X......'
  U '........................................................................................................................X.......'
  LDSU '...................................................................................X............................................'
  LDSSize '.............................................................................XXX...X............................................'
  Imm24 '....................................................................................XXXXXXXXXXXXXXXXXXXXXXXX....................'
  CBank '.......................................................................................XXXXX....................................'
  Imm16 '............................................................................................XXXXXXXXXXXXXXXX....................'
  Imm16b '................................................................................................................XXXXXXXXXXXXXXXX'

  IComp '............................................................................XXX.................................................'
  Signed '...............................................................................X................................................'
  Bop '.................................................................................XX.............................................'
  Bop0 '......................................................................................................XX........................'

  PixMode '..............................................................................................XXX...............................'
  Imm8 '....................................................................................................XXXXXXXX....................'




  LOP '.....................................................................................XX.........................................'
  POP '..................................................................................XX............................................'
  nB_L '.......................................................................................X........................................'
  nA_L '........................................................................................X.......................................'
  POP2 '..........................................................................................XX....................................'
  LOPImm '............................................................................................XXXXXXXX............................'
  LOPImm2 '........................................................................XXXXXXXX................................................'
  Xm10 '.......................................................................X........................................................'

  M_H '.............................................................................X..................................................'
  XmdSHF '..............................................................................XX................................................'
  MaxShift '.........................................................................................XX.....................................'
  Imm06_shf '......................................................................................................XXXXXX....................'

  M '........................................................................................X.......................................'
  XMode '...................................................................................XX...........................................'
  Brev '.......................................................................................X........................................'

  Xm_I '......................................................................X.........................................................'
  nB_L2 '.......................................................................X........................................................'
  nA_L2 '........................................................................X.......................................................'
  LOP_I '.........................................................................XX.....................................................'

  Imm06Tex '......................................................................................................XXXXXX....................'

  HILO3 '.........................................................................X......................................................'
  BSigned3 '..........................................................................X.....................................................'
  PSign3 '...........................................................................XX...................................................'
  Xm3 '..............................................................................X.................................................'
  ASigned3 '...............................................................................X................................................'
  Xm4 '.................................................................................X..............................................'
  Xm5 '.........................................................................................X......................................'
  Xm6 '......................................................................X.........................................................'



  aB '..............................................................................X.................................................'
  nB '..................................................................................X.............................................'
  By '.....................................................................................XX.........................................'
  ISrcFmt '..................................................................................................................X.XX..........'
  DstFmt '......................................................................................................................XX........'

  Byte '.....................................................................................XX.........................................'
  CCPR '.......................................................................................X........................................'

  OutType '.......................................................................................XX.......................................'

  VMode '..............................................................................XX................................................'
  Imm28 '................................................................................XXXXXXXXXXXXXXXXXXXXXXXXXXXX....................'
  VPDest '................................................................................XXX.............................................'

  MembarL '......................................................................................................................XX........'
  Ivall '..............................................................................................................................XX'

  AFix_BAR '...................................................................................X............................................'
  BFix_BAR '....................................................................................X...........................................'
  BarRedOp '...........................................................................................XX...................................'
  BarOp '.............................................................................................XXX................................'
  BarFiller '................................................................................................XXXX............................'
  Imm12 '................................................................................................XXXXXXXXXXXX....................'

  Trig '..................................................................................................................X.............'
  Trig2 '...........................................................................................................X....................'
  CCC_2 '...................................................................................................................XXXXX........'




  SrcDstFmt '....................................................................................................................XXXX........'
  IR '.....................................................................................X..........................................'
  IRRnd '.....................................................................................X.XX.......................................'
  Rnd_1 '.......................................................................................XX.......................................'
  SH '......................................................................................X.........................................'

  IDstFmt '...................................................................................................................X..XX........'
  SrcFmt '....................................................................................................................XX..........'
  SrcFmt2 '..................................................................................................................X.XX..........'

  PMode '............................................................................XXXX................................................'
  RROOp '........................................................................................X.......................................'

  Barmd '..............................................................................................XX................................'
  DstPred '................................................................................XXX.............................................'
  DstPred1 '.................................................................................XXX............................................'
  BarName '................................................................................................XXXX............................'

  Imm13 '.................................................................................XXXXXXXXXXXXX..................................'
  PredDest '.............................................................................XXX................................................'
  PredDest2 '...............................................................................................XXX..............................'
  PredDest3 '..........................................................................XXX...................................................'
  PredDest4 '....................................................................................XXX.........................................'
  SHFLFiller '.........................................................................................XXXXX..................................'
  Shflmd '................................................................................................XX..............................'
  CFix_SHFL '..................................................................................................X.............................'
  BFix_SHFL '...................................................................................................X............................'
  shfl_imm5 '.......................................................................................................XXXXX....................'
  bit6_RegB '....................................................................................................XXX.........................'

  RTTOp '..............................................................................................................................XX'




  Imm22a '....................................................................................XXXXXXXXXXXXXXXXXXXXXX......................'
  Cache '..........................................................................................................................XX....'
  CCTLOp '............................................................................................................................XXXX'
  CCTLTOp '..............................................................................................................................XX'
  TsIdx13 '...............................................................................XXXXXXXXXXXXX....................................'
  Imm30a '............................................................................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX......................'
  Cache3 '.........................................................................................................................XXX....'

  SWZMode '....................................................................................XXX.........................................'
  PNWord '............................................................................................XXXXXXXX............................'

  SUPDest '.............................................................................XXX................................................'
  BDim '................................................................................X...............................................'

  BDim2 '..........................................................................X.....................................................'
  SMode '...........................................................................XXXX.................................................'
  Imm06 '...................................................................................XXXXXX.......................................'

  Rnd3 '............................................................................XX..................................................'
  CMode '........................................................................................................................XX......'
  ChkModeF '...................................................................................XXXXXX.......................................'

  DI '..........................................................................................................................X.....'





  Ofmt '.............................................................................XX.................................................'
  RGBAb '...............................................................................XXXX.............................................'
  Clamp '...................................................................................XX...........................................'
  LSSize3 '...............................................................................................XXX..............................'
  Rf3 '................................................................................................XX..............................'

  COP3 '..................................................................................................XX............................'
  Ofmt2 '....................................................................................................XX..........................'
  RGBAa '......................................................................................................XXXX......................'
  Clamp2 '..........................................................................................................XX....................'

  SrcNotSU '.............................................................................X..................................................'
  SrcPredSU '..............................................................................XXX...............................................'
  Ofmt3 '........................................................................................................................XX......'
  RGBAc '..........................................................................................................................XXXX..'
  Clamp3 '..............................................................................................................................XX'
  Clamp4 '.............................................................................XX.................................................'
  SUDim '............................................................................................XXX.................................'

  COP4 '................................................................................XX..............................................'
  COP5 '......................................................................................................XX........................'
  COP6 '...............................................................................XX...............................................'
  BA '........................................................................................................X.......................'
  SUSize '.........................................................................................................XXX....................'
  SURGBA '........................................................................................................XXXX....................'
  SURGBA2 '.........................................................................................XXX....................................'
  E2 '..................................................................................X.............................................'

  DFormat '.........................................................................................X......................................'
  DFormat2 '.........................................................................X......................................................'
  safmt '...............................................................................X................................................'
  sbfmt '..............................................................................X.................................................'
  sbfmt2 '........................................................................X.......................................................'
  sbfmt3 '..........................................................................X.....................................................'
  VRed '.........................................................................XX.....................................................'
  VRed2 '..............................................................................XX................................................'
  LaneMask4 '...........................................................................XX.............XX....................................'
  asel4 '............................................................................................XXXX................................'
  bsel4 '................................................................................................XXXX............................'
  AVGMode '.......................................................................XX.......................................................'
  AVGMode2 '......................................................................XX........................................................'
  AVGMode3 '.........................................................................XX.....................................................'
  MN '........................................................................X.......................................................'
  MN2 '.......................................................................X........................................................'
  VComp '.............................................................................XXX................................................'
  VComp2 '.......................................................................XXX......................................................'
  VComp3 '................................................................................X..XX...........................................'
  VRed3 '.................................................................................XX.............................................'
  LaneMask4b '...................................................................................XX.....XX....................................'
  BFiller2 '..................................................................................................XX............................'
  LaneMask2 '...........................................................................XX...................................................'
  LaneMask2b '...................................................................................XX...........................................'
  asel2 '..........................................................................................XXXX..................................'
  bsel2 '..............................................................................................XXXX..............................'
  asel2hi '..........................................................................................XX....................................'
  BVideo '.............................................................................X..................................................'
  aSelect '...............................................................................X.........XXX....................................'
  bSelect '..............................................................................X..................XXX............................'
  bSelectU '.................................................................................................XXX............................'
  BFiller3 '............................................................................................XXXXX...............................'
  VOP '..........................................................................XXX...................................................'
  MV '..............................................................................X.................................................'
  VScale '...........................................................................XX...................................................'
  Sat3 '............................................................................X...................................................'
  IBase '.............................................................................................XX.................................'

  Bconst '.......................................................................X.................XXXXXXXXXXXXXXXXXXX....................'
  BimmH0 '..................................................................................................XXXXXXXXXX....................'
  BimmH1 '.......................................................................X.................XXXXXXXXX..............................'
  Bcbank '.........................................................................................XXXXX..................................'
  Bcaddr '..............................................................................................XXXXXXXXXXXXXX....................'
  BFiller '.........................................................................................XXXXXXXXXXX............................'
  Canvas32 '...................................................................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.............................'
  Opcode32 '.................................................................XXXXX..........................................................'
  Opcode42 '................................................................XXXXX...........................................................'
  Opcode52 '.................................................................XXXXXXX........................................................'
  Opcode362 '.................................................................XXXXXXXXXXX....................................................'
  Opcode542 '.................................................................XXXXXXXXXXX....................................................'
  Opcode532 '.................................................................XXXXXXXXXX.....................................................'
  Opcode512 '.................................................................XXXXXXXX.......................................................'
  Opcode552 '................................................................XXXXXXXXXX......................................................'





  Opcode3 '................................................................XXX.............................................................'
  Opcode5 '................................................................XXXXX...........................................................'
  Opcode5b1 '................................................................XXXXX...X.......................................................'
  Opcode5_1 '................................................................XXXXX.X.........................................................'
  Opcode6 '................................................................XXXXXX..........................................................'
  Opcode7 '................................................................XXXXXXX.........................................................'
  Opcode8 '................................................................XXXXXXXX........................................................'
  Opcode9 '................................................................XXXXXXXXX.......................................................'
  Opcode10 '................................................................XXXXXXXXXX......................................................'
  Opcode11 '................................................................XXXXXXXXXXX.....................................................'
  Opcode12 '................................................................XXXXXXXXXXXX....................................................'
  Opcode13 '................................................................XXXXXXXXXXXXX...................................................'
  Opcode7b1 '................................................................XXXXXXX.X.......................................................'
  Opcode7b2 '................................................................XXXXXXX.XX......................................................'
  Opcode7b5 '................................................................XXXXXXX.XXXXX...................................................'
  Opcode7b4 '................................................................XXXXXXX.XXXX....................................................'




  Opcode352_N '.................................................................XX................................XXXXXXXX.....................'

  SubOpcodeX5X '........................................................................XXXXX...................................................'
  SubOpcodeX4X '........................................................................XXXX....................................................'
  SubOpcodeX1X '........................................................................X.......................................................'
  SubOpcodeX2X '........................................................................XX......................................................'
  Opcode2X2 '.................................................................XXXX...........................................................'
  ABCOpcodeX3X_1 '.....................................................................XXX........................................................'
  Opcode1X2 '.................................................................XXX............................................................'
  ABCOpcodeX3X_2 '....................................................................XXX.........................................................'




  NencATOM '.......................................................................................XXXXXXXXXXXXX............................'
  NencATOM2 '................................................................................XXXX...XXXXXXXXXXXXX............................'
  NencIADD3 '.................................................................................................XXX............................'
  NencLDG '...................................................................................X............................................'
  NencLDG2 '...................................................................................X...X........................................'
  NencLDS '................................................................................XXX.............................................'
  NencMOV32I '....................................................................................................................XXXX........'
  NencMOV '.............................................................................XXXXXXXX...........................XXXXXXXX........'
  NencEXIT '............................................................................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX....XXXXXXXXXX......'
  NencPEXIT '............................................................................XXXXXXXX........................XXXXXXXXXXXXXXXXXXXX'
  NencIADD '.................................................................................XXX.XXXX.......................................'
  NencISCADD '.............................................................................X...XXX............................................'
  NencPOPC '.............................................................................XXXXXXXXXX.........................................'
  NencTLDB '...............................................................................XXXXXXXXXXXXX....................................'
  NencTLDB2 '...............................................................................XXXXX............................................'
  NencTEXB '...............................................................................XXXXXXXX.........................................'
  NencALD '.............................................................................XX..........XXXXXX.................................'
  NencAL2P '.............................................................................XX.....XXXXXXXXXXX.X...............................'
  NencFMUL '..............................................................................X..X..............................................'
  NencMUFU '..............................................................................X.X.XXXXXXXXXXXXXXXXXXXXXX........................'
  NencIMUL '.............................................................................XXX.XXXXX..........................................'
  NencSHINT '........................................................................X.......................................................'
  NencS2R '.............................................................................XXXXXXXXXXXXXXXXXXXXXXX............XXXXXXXX........'
  NencBRA '............................................................................XXXXXXXX............................................'


  NencBSYNC '............................................................................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX....XXXXX...........'
  NencBSSY '................................................................................................................XXXXX......XXXXX'
  NencBREAK '.............................................................................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX....XXXXX......XXXXX'
  NencYIELD '.............................................................................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX....XXXXXXXXXXXXXXXX'
  NencISETP '................................................................................X..X....................................XX......'
  NencPSETP '.............................................................................XXXX..XX....XXXXXX....XXX..XXXX........XXXXXX......'
  NencPSET '.............................................................................XXX....X....XXXXXX....XXX..XXXX........XXXX........'
  NencCSETP '.............................................................................XXXX..XX....XXXXXXXXXXXXXXXXXXX....XXX.....XX......'
  NencCSET '.............................................................................XXX....X....XXXXXXXXXXXXXXXXXXX....XXX.............'
  NencHSETP2 '.............................................................................X...............XXX........................X.......'
  NencHSETP3 '........................................................................................................................X.......'
  NencHSETP '.........................................................................X..............................................X.......'
  NencVSETP '........................................................................................................................XX......'
  NencLOP '.................................................................................X..............................................'
  NencSHL '.............................................................................XXX.XXX.XXX........................................'
  NencSHR '.............................................................................XX..XX..XX.........................................'
  NencP2R '.............................................................................XXXXXXXX...X.......................................'
  NencTEXDEPBAR '.............................................................................XXXXXXXXXXXXXXXXXXXXXXXXX..........XXXXXXXXXXXXXXXX'
  NencSEL '.............................................................................XXXXXXXX...........................................'
  NencOUT '.............................................................................XXXXXXXXXX.........................................'
  NencI2F '.............................................................................X.X.X.XX...........................XX.X............'
  NencMEMBAR '.............................................................................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX....XXXXXX..XXXXXX..'
  NencBAR2 '.............................................................................XXXXXXXX....XX.....................................'
  NencBAR '.............................................................................XXXXXX......XX.....................................'
  NencCCTLL '.............................................................................XXXXXXX......................XX............XX......'
  NencCCTL '..........................................................................................................XX............X.......'
  NencCCTLTReg '.............................................................................XXXX........XXXXXXXXXXXXXXXXXXX....XXXXXXXXXXXXXX..'
  NencCCTLTIDx '.............................................................................XX.............XXXXXXXXXXXXXXXX....XXXXXXXXXXXXXX..'
  NencNOP '.............................................................................XXXXXXXXXXXXXXX....................XX......XXXXXXXX'
  NencF2F '...............................................................................X.X..X...........................XXXX............'
  NencF2I '.............................................................................X.X.X..XX..........................XXX.............'
  NencJMP '............................................................................XXXXXXXXXXX.........................................'
  NencFSWZADD '.............................................................................XXX.XX.XXX...XX....................................'
  NencVOTEVTG '.............................................................................X..................................XXXXXXXXXXXXXXXX'
  NencVOTE '.............................................................................X.....XX....XXXXXXXXXXXXXXXXXXX....XXXXXXXX........'
  NencSULDGA '.........................................................................................XXXXXX.................................'
  NencSULD1 '...............................................................................XX........XXX...XXXXXXX..........................'
  NencSULD2 '...............................................................................................XXXXXXX..........................'
  NencSULD3 '...............................................................................XX........XXX......XXXX..........................'
  NencSULD4 '..................................................................................................XXXX..........................'
  NencSULD5 '...............................................................................XX........XXX...XXX.XXX..........................'
  NencSULD6 '...................................................................................................X............................'
  NencSURED1 '...............................................................................XX........XXX...XXXXXX...........................'
  NencSURED2 '...............................................................................................XXXXXX...........................'
  NencSURED3 '...............................................................................XX........XXX...XXXXXX...XXXX....................'
  NencSURED4 '...............................................................................................XXXXXX...XXXX....................'
  NencSUATOM1 '...............................................................................XX...............................................'
  NencSUATOM2 '...............................................................................XX........XXX.......X............................'
  NencSUATOM3 '...................................................................................................X............................'
  NencSUATOM4 '...............................................................................XX.................X.............................'
  NencSUATOM5 '..................................................................................................X.............................'
  NencBPT '............................................................................XXXXXXXXXXXX....................XXXXXXXXXXX...XXXXXX'
  NencFLO '.............................................................................XX..XXXXX..X.......................................'
  NencI2I '...............................................................................X.X.XX..XX.......................XX..............'
  NencB2R '.............................................................................XXX...XXXXXXXXXXX..XXXXXXXXXXXX....................'
  NencRPI '.............................................................................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX....XXXXXXXXXXXXXXXX'
  NencRTT '............................................................................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX..'
  NencSHFL '................................................................................X.............XX................................'
  NencPIXLD '.............................................................................XXX...XXXXXXXXXXX...XXX............................'
  NencTXQ '.............................................................................X..............X....XXX......XX....................'
  NencTXA '.............................................................................X...................XXXXXXXXXXX....................'
  NencTMML '.............................................................................X......................XXXXXXXX....................'
  NencTMMLB '.............................................................................X.XXXXXXXXXXXXX....................................'
  NencSTP '.............................................................................XXXXXXXXXXXXXXXXXXX.XXX........XXXXXXXXXXXXXXXXXXXX'
  NencCRSLMEM '............................................................................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX................'
  NencLDC '................................................................................XX..XXX.........................................'
  NencBFE '.............................................................................XX..XXXXXX.X.......................................'
  NencBFI '.............................................................................XXX................................................'
  NencR2B '.............................................................................XXXXXXXXXXXXXXXXX..................................'
  NencVILD '.............................................................................XXXXXXXXXXXXXXXXXXXXXXX............................'
  NencIDE '............................................................................XXXXXXXXXXXXXXXX................XXXXXXXXXXXXXX.XXXXX'
  NencSHF '.......................................................................X...................XXXXXXXXXXX..........................'
  NencSHF2 '...........................................................................................XXXXXXXXX............................'
  NencSync '.............................................................................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX....XXXXXXXXXXX.....'
  NencRed '.............................................................................XX.....................XX..........................'
  NencDEPBAR '.............................................................................XXXXXXXXXXXXXXXXXXXXX..............XXXXXXXXXX......'
  NencISBERD '.............................................................................XX..XXXXXXXXXXXX....XXXXXXXXXXX....................'
  NencLEA_LO '...................................................................................X............................................'
  NencLEA_HI_REG '...........................................................................................XXXX.................................'
  NencLDIDXRF '.............................................................................XX..XXXXXXXXXXXXXXX................................'




  OEUSchedInfo '...........................................................XXXXX................................................................'
  OECoupled '...........................................X....................................................................................'
  OEVarLatDest '........................................................XXX.....................................................................'
  OEVarLatSrc '.....................................................XXX........................................................................'
  OEWaitOnSb '...............................................XXXXXX...........................................................................'
  OEReserved '...........................................XX...................................................................................'
  OETexPhase '.............................................XX.................................................................................'
  OEReuseA '..............................................X.................................................................................'
  OEReuseB '.............................................X..................................................................................'
  OEReuseC '............................................X...................................................................................'
  OEReserved1 '........................................XXX.....................................................................................'

  ALL '.................................................................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'





            BITS_2_75_74_iswzA '....................................................XX..........................................................................'




            BITS_1_74_74_tnspB '.....................................................X..........................................................................'



          BITS_2_73_72_extract '......................................................XX........................................................................'



      BITS_1_83_83_Sc_absolute '............................................X...................................................................................'


            BITS_2_82_81_iswzC '.............................................XX.................................................................................'


             BITS_2_61_60_hsel '..................................................................XX............................................................'

      BITS_1_62_62_Sb_absolute '.................................................................X..............................................................'

        BITS_1_63_63_Sb_negate '................................................................X...............................................................'


         BITS_16_53_38_Sa_addr '..........................................................................XXXXXXXXXXXXXXXX......................................'


       BITS_10_49_40_Ra_offset '..............................................................................XXXXXXXXXX........................................'


       BITS_11_50_40_Ra_offset '.............................................................................XXXXXXXXXXX........................................'


       BITS_32_63_32_Ra_offset '................................................................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX................................'

                BITS_1_59_59_b '....................................................................X...........................................................'

                BITS_1_72_72_e '.......................................................X........................................................................'

               BITS_1_47_47_le '................................................................................X...............................................'

               BITS_1_73_73_sz '......................................................X.........................................................................'

               BITS_1_79_79_op '................................................X...............................................................................'

               BITS_2_74_73_sz '.....................................................XX.........................................................................'

               BITS_3_14_12_Pg '.................................................................................................................XXX............'

           BITS_1_15_15_Pg_not '................................................................................................................X...............'

               BITS_3_36_34_Sb '...........................................................................................XXX..................................'

               BITS_3_70_68_Pr '.........................................................XXX....................................................................'


               BITS_3_75_73_sz '....................................................XXX.........................................................................'

               BITS_3_79_77_Pq '................................................XXX.............................................................................'


               BITS_3_83_81_Pu '............................................XXX.................................................................................'

               BITS_3_89_87_Pp '......................................XXX.......................................................................................'

           BITS_1_90_90_Pp_not '.....................................X..........................................................................................'

               BITS_4_76_73_sz '...................................................XXXX.........................................................................'

               BITS_4_90_87_op '.....................................XXXX.......................................................................................'

               BITS_5_57_53_Sb '......................................................................XXXXX.....................................................'

               BITS_8_23_16_Rd '........................................................................................................XXXXXXXX................'

               BITS_8_31_24_Ra '................................................................................................XXXXXXXX........................'

       BITS_24_63_40_Ra_offset '................................................................XXXXXXXXXXXXXXXXXXXXXXXX........................................'

               BITS_8_39_32_Rb '........................................................................................XXXXXXXX................................'

               BITS_8_71_64_Rc '........................................................XXXXXXXX................................................................'

              BITS_12_53_42_Sc '..........................................................................XXXXXXXXXXXX..........................................'

              BITS_13_52_40_Sc '...........................................................................XXXXXXXXXXXXX........................................'

              BITS_16_47_32_Sb '................................................................................XXXXXXXXXXXXXXXX................................'

              BITS_16_63_48_Sc '................................................................XXXXXXXXXXXXXXXX................................................'


              BITS_1_60_60_scr '...................................................................X............................................................'

              BITS_1_77_77_ntz '..................................................X.............................................................................'

              BITS_1_80_80_ftz '...............................................X................................................................................'

              BITS_1_82_82_SAT '.............................................X..................................................................................'

              BITS_1_87_87_cas '........................................X.......................................................................................'

              BITS_28_59_32_Sa '....................................................................XXXXXXXXXXXXXXXXXXXXXXXXXXXX................................'

              BITS_2_70_69_bop '.........................................................XX.....................................................................'

              BITS_2_77_76_msi '..................................................XX............................................................................'

              BITS_2_78_77_sco '.................................................XX.............................................................................'

              BITS_2_79_78_rnd '................................................XX..............................................................................'

              BITS_2_80_79_sem '...............................................XX...............................................................................'

              BITS_30_63_34_Sa '................................................................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX..................................'

              BITS_3_63_61_dim '................................................................XXX.............................................................'

              BITS_3_86_84_cop '.........................................XXX....................................................................................'

              BITS_47_80_34_Sb '...............................................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX..................................'

              BITS_4_79_76_cmp '................................................XXXX............................................................................'

              BITS_6_43_38_cnt '....................................................................................XXXXXX......................................'

             BITS_1_31_31_RpcN '................................................................................................X...............................'

             BITS_1_71_71_bval '........................................................X.......................................................................'

             BITS_1_75_75_size '....................................................X...........................................................................'

             BITS_1_78_78_ofmt '.................................................X..............................................................................'

             BITS_1_81_81_andC '..............................................X.................................................................................'

             BITS_1_85_85_warp '..........................................X.....................................................................................'

             BITS_1_88_88_spin '.......................................X........................................................................................'

             BITS_2_33_32_cond '..............................................................................................XX................................'

             BITS_2_85_84_mode '..........................................XX....................................................................................'

             BITS_2_88_87_comp '.......................................XX.......................................................................................'

             BITS_3_78_76_icmp '.................................................XXX............................................................................'

             BITS_3_80_78_mode '...............................................XXX..............................................................................'

             BITS_8_53_46_tid8 '..........................................................................XXXXXXXX..............................................'

             BITS_8_79_72_imm8 '................................................XXXXXXXX........................................................................'

            BITS_1_84_84_clear '...........................................X....................................................................................'

            BITS_1_86_86_depth '.........................................X......................................................................................'

            BITS_2_60_59_clamp '...................................................................XX...........................................................'

            BITS_2_86_85_depth '.........................................XX.....................................................................................'

            BITS_3_46_44_sbidx '.................................................................................XXX............................................'

            BITS_3_74_72_pmode '.....................................................XXX........................................................................'

            BITS_48_81_34_sImm '..............................................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX..................................'

           BITS_12_11_0_opcode '....................................................................................................................XXXXXXXXXXXX'

           BITS_2_59_58_shflmd '....................................................................XX..........................................................'

           BITS_2_76_75_dstfmt '...................................................XX...........................................................................'

           BITS_4_19_16_barReg '............................................................................................................XXXX................'

           BITS_4_77_74_mufuop '..................................................XXXX..........................................................................'

          BITS_1_76_76_private '...................................................X............................................................................'

          BITS_2_63_62_vtgmode '................................................................XX..............................................................'

          BITS_4_57_54_barname '......................................................................XXXX......................................................'

          BITS_5_58_54_Sb_bank '.....................................................................XXXXX......................................................'

         BITS_14_53_40_Sb_addr '..........................................................................XXXXXXXXXXXXXX........................................'

          BITS_5_79_75_scaleU5 '................................................XXXXX...........................................................................'

        BITS_2_80_80_76_76_fmz '...............................................X...X............................................................................'

        BITS_6_29_24_cbu_state '..................................................................................................XXXXXX........................'

       BITS_4_75_72_PixMaskU04 '....................................................XXXX........................................................................'

      BITS_3_112_110_dst_wr_sb '...............XXX..............................................................................................................'

      BITS_6_45_40_hdrtblbase6 '..................................................................................XXXXXX........................................'

      BITS_8_76_72_66_64_uimm8 '...................................................XXXXX.....XXX................................................................'

     BITS_3_115_113_src_rel_sb '............XXX.................................................................................................................'

     BITS_3_76_75_72_72_dstfmt '...................................................XX..X........................................................................'

     BITS_3_85_84_74_74_srcfmt '..........................................XX.........X..........................................................................'

    BITS_6_121_116_req_bit_set '......XXXXXX....................................................................................................................'

   BITS_8_124_122_109_105_opex '...XXX............XXXXX.........................................................................................................'

  BITS_6_37_32_scoreboard_list '..........................................................................................XXXXXX................................'

 BITS_16_76_72_66_64_23_16_lop '...................................................XXXXX.....XXX........................................XXXXXXXX................'

BITS_4_85_84_76_75_dstfmt.srcfmt '..........................................XX.......XX...........................................................................'

              bra__unused 'XXX....................XXXXXXXXXXXXXX......XXX..................................................XXXXXXXXXXXXXXXX................'

              brx__unused 'XXX....................XXXXXXXXXXXXXX......XXX................................................XX........XXXXXXXX................'

              ide__unused 'XXX....................XXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX................XXXXXXXXXXXXXXXX................'

              ipa__unused 'XXX....................XXXXXXXXXXXXXXXXXXXXX...X....XXXX........XXXXXXXXXXXXXXXXXXXXXXXX........XXXXXXXX........................'

              jmx__unused 'XXX....................XXXXXXXXXXXXXX......XXX................................................XX........XXXXXXXX................'

              nop__unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX................'

              r2b__unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXX....XXXXXXXXXXXXXX........XXXXXXXXXXXXXXXX................'

              rtt__unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX................'

              s2r__unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXX........XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........................'

              tex__unused 'XXX....................XXXXXXXXXXXXXX...........................................................................................'

              tld__unused 'XXX....................XXXXXXXXXXXXXX...........................................................................................'

              txd__unused 'XXX....................XXXXXXXXXXXXXX.XX.........XX................X............................................................'

              txq__unused 'XXX....................XXXXXXXXXXXXXX.XXXXXXXXXXXXXX..............XX....................XXXXXXXX................................'

             bssy__unused 'XXX....................XXXXXXXXXXXXXX....XXXXXXXXXXXXXXXXXXXXXXX..............................XXXXXXXXXXXXXX....................'

             cs2r__unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX.........XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........................'

             exit__unused 'XXX....................XXXXXXXXXXXXXX.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX................'

             kill__unused 'XXX....................XXXXXXXXXXXXXX....XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX................'

             lepc__unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........................'

             tld4__unused 'XXX....................XXXXXXXXXXXXXX.X.........................................................................................'

             tmml__unused 'XXX....................XXXXXXXXXXXXXX.XXXXXXXXXXXX.X...............X............................................................'

             vote__unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXXXX..XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........................'

            bsync__unused 'XXX....................XXXXXXXXXXXXXX....XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX....................'

            pixld__unused 'XXX....................XXXXXXXXXXXXXXXXXXXXX......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........................'

            psetp__unused 'XXX....................XXXXXXXXXXXXXXX.........X........X...X...XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........................'

            tex_b__unused 'XXX....................XXXXXXXXXXXXXX...........................................................................................'

            tld_b__unused 'XXX....................XXXXXXXXXXXXXX...........................................................................................'

            txd_b__unused 'XXX....................XXXXXXXXXXXXXX.XX.........XX................X............................................................'

            txq_b__unused 'XXX....................XXXXXXXXXXXXXX.XXXXXXXXXXXXXX..............XX....................XXXXXXXX................................'

           errbar__unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX................'

           isberd__unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXX......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX................................'

           lop32i__unused 'XXX....................XXXXXXXXXXXXXX....XXX....................................................................................'

           membar__unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX.....XXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX................'

           mov32i__unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXX....XXXXXXXX................................XXXXXXXX........................'

           pmtrig__unused 'XXX....................XXXXXXXXXXXXXX....XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX................XXXXXXXXXXXXXXXX................'

           tld4_b__unused 'XXX....................XXXXXXXXXXXXXX.X.........................................................................................'

           tmml_b__unused 'XXX....................XXXXXXXXXXXXXX.XXXXXXXXXXXX.X...............X............................................................'

          b2r__BAR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXX....XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........................'

          bra_rel__unused 'XXX....................XXXXXXXXXXXXXX......XXX..................................................XXXXXXXXXXXXXXXX................'

          brx_rel__unused 'XXX....................XXXXXXXXXXXXXX......XXX................................................XX........XXXXXXXX................'

          csmtest__unused 'XXX....................XXXXXXXXXXXXXX..........XX.....XXXXXXXXXX..XX............................XXXXXXXXXXXXXXXX................'

          fadd32i__unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX....XXX..XXXXXXXX................................................................'

          ffma32i__unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX.................................................................................'

          fmul32i__unused 'XXX....................XXXXXXXXXXXXXXXXXX...XXX.....XXXXXXXXXXXX................................................................'

          fswzadd__unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX....XXXXX........XXXXXXXXXXXXXXXXXXXXXXXX........................................'

          idp4a__C_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXX..X..X........XXXXX...................XXXXXXXX................................'

          idp4a__R_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXX..X..X........XXXXXXXXXXXXXXXXXXXXXXXX........................................'

          jmp_imm__unused 'XXX....................XXXXXXXXXXXXXX......XXXX.................................................XXXXXXXXXXXXXXXX................'

          jmx_rel__unused 'XXX....................XXXXXXXXXXXXXX......XXX................................................XX........XXXXXXXX................'

          lop_imm__unused 'XXX....................XXXXXXXXXXXXXX....XXX....................................................................................'

          out__CUT_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........................................'

          r2p__RCR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXX...................XXXXXXXX........XXXXXXXX................'

          r2p__RIR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXX........................................XXXXXXXX................'

          r2p__RRR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX................XXXXXXXX................'

          ret__ABS_unused 'XXX....................XXXXXXXXXXXXXX......XXX................................................XX........XXXXXXXX................'

          ret__REL_unused 'XXX....................XXXXXXXXXXXXXX......XXX................................................XX........XXXXXXXX................'

          ret_rel__unused 'XXX....................XXXXXXXXXXXXXX......XXX................................................XX........XXXXXXXX................'

          shl_imm__unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX.XXX....X........................................................................'

          tex_scr__unused 'XXX....................XXXXXXXXXXXXXX...........................................................................................'

          tld_scr__unused 'XXX....................XXXXXXXXXXXXXX...........................................................................................'

         ald_PHYS__unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXX.X.X..XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........................................'

         ast_PHYS__unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXX.X..XX........XXXXXXXXXXXXXXXXXXXXXXXX................XXXXXXXX................'

         b2r__WARP_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........................'

         bpt__WAIT_unused 'XXX....................XXXXXXXXXXXXXXXXXX...XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX...XXXXXXXXXXXXXXXXXX................'

         bssy_rel__unused 'XXX....................XXXXXXXXXXXXXX....XXXXXXXXXXXXXXXXXXXXXXX..............................XXXXXXXXXXXXXX....................'

         cctlt__Rb_unused 'XXX....................XXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........XXXXXXXXXXXXXXXX................'

         hadd2__RC_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX.X..X....XXXXXXXX....X...................XXXXXXXX................................'

         hadd2__RI_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX.X..X....XXXXXXXX................................................................'

         hadd2__RR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX.X..X....XXXXXXXX....XXXXXXXXXXXXXXXXXXXX........................................'

         hmul2__RC_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX.X.......XXXXXXXX....X...................XXXXXXXX................................'

         hmul2__RI_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX.X.......XXXXXXXX................................................................'

         hmul2__RR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX.X.......XXXXXXXX....XXXXXXXXXXXXXXXXXXXX........................................'

         hset2__RC_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXX............XXXXX....X...................XXXXXXXX................................'

         hset2__RI_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXX............XXXXX................................................................'

         hset2__RR_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXX............XXXXX....XXXXXXXXXXXXXXXXXXXX........................................'

         idp_2a__C_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXX..X..X........XXXXX...................XXXXXXXX................................'

         idp_2a__R_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXX..X..X........XXXXXXXXXXXXXXXXXXXXXXXX........................................'

         idp_4a__C_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXX..X..X........XXXXX...................XXXXXXXX................................'

         idp_4a__R_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXX..X..X........XXXXXXXXXXXXXXXXXXXXXXXX........................................'

         ldc__RaRZ_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXX..XX...XXXXXXXXXXXXXX.....................XXXXXX................................'

         red__RaRZ_unused 'XXX....................XXXXXXXXXXXXXXX......XXX.........XXXXXXXX........................................XXXXXXXX................'

         setctaid__unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........XXXXXXXX................'

         shfl__RII_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXX...XXXXXXXXXXXXXXXXXXXXX....................XXXXXXXX................................'

         shfl__RIR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXX...XXXXXXXXX........XXXX.......XXXXXXXXXXXXXXXXXXXXX................................'

         shfl__RRI_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXX...XXXXXXXXXXXXXXXXXXXXX..XXXXX.....................................................'

         shfl__RRR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXX...XXXXXXXXX........XXXX..XXXXXXXXXXXXXXXXXX........................................'

         tld4_scr__unused 'XXX....................XXXXXXXXXXXXXX.X.........................................................................................'

         vote_vtg__unused 'XXX....................XXXXXXXXXXXXXX..........XX.....XXXXXXXXXX..XX............................XXXXXXXXXXXXXXXX................'

        al2p__RaRZ_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXX.XXX..XXXXXXXXXXXXXXXXXXXXXXXX..........XXXXXXXX................................'

        atom__RaRZ_unused 'XXX....................XXXXXXXXXXXXXX...........................................................................................'

        depbar__LE_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX................XXXXXXXXXXXXXXXX................'

        hadd2_32i__unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX.X..X....XXXXXXXX................................................................'

        hfma2_32i__unused 'XXX....................XXXXXXXXXXXXXXXXXXXX.....X...............................................................................'

        hfma2__RCR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXX.....X...................X...................XXXXXXXX................................'

        hfma2__RIR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXX.....X...............................................................................'

        hfma2__RRC_unused 'XXX....................XXXXXXXXXXXXXXXXXXXX.....X...................X...................XXXXXXXX................................'

        hfma2__RRI_unused 'XXX....................XXXXXXXXXXXXXXXXXXXX.....X...............................................................................'

        hfma2__RRR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXX.....X...................XXXXXXXXXXXXXXXXXXXX........................................'

        hmul2_32i__unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX.X.......XXXXXXXX................................................................'

        hsetp2__RC_unused 'XXX....................XXXXXXXXXXXXXX......................XXXXX....X...................XXXXXXXX........XXXXXXXX................'

        hsetp2__RI_unused 'XXX....................XXXXXXXXXXXXXX......................XXXXX........................................XXXXXXXX................'

        hsetp2__RR_unused 'XXX....................XXXXXXXXXXXXXX......................XXXXX....XXXXXXXXXXXXXXXXXXXX................XXXXXXXX................'

        i2f__Cb_8b_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXXX..X...XXXXXXXXXXXX..X...................XXXXXXXXXXXXXXXX........................'

        i2f__Rb_8b_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXXX..X...XXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXX........XXXXXXXX........................'

        jmp_const__unused 'XXX....................XXXXXXXXXXXXXX......XXXXXXXXXXXXXXXXXXXXXXXXXX.....................XXXX..XXXXXXXXXXXXXXXX................'

        match__ALL_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXX...X.XXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX................................'

        match__ANY_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXX...X.XXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX................................'

        out__FINAL_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........................................'

        qspc__RaRZ_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXX...XXXXXX...XXXXXXXX........................XXXXXXXX................................'

        sured_imm__unused 'XXX....................XXXXXXXXXXXXXXX......XXX.........XXXXXXXX........................................XXXXXXXX................'

        sured_reg__unused 'XXX....................XXXXXXXXXXXXXXX......XXX......................XXXXXXXXXXXXXXXXXXX................XXXXXXXX................'

        sured_tid__unused 'XXX....................XXXXXXXXXXXXXXX......XXX.........XXXXXXXX........................................XXXXXXXX................'

        tex_b_tid__unused 'XXX....................XXXXXXXXXXXXXX...........................................................................................'

        tex_scr_b__unused 'XXX....................XXXXXXXXXXXXXX...........................................................................................'

        tld_b_tid__unused 'XXX....................XXXXXXXXXXXXXX...........................................................................................'

        tld_scr_b__unused 'XXX....................XXXXXXXXXXXXXX...........................................................................................'

        txd_b_tid__unused 'XXX....................XXXXXXXXXXXXXX.XX.........XX................X............................................................'

        txq_b_tid__unused 'XXX....................XXXXXXXXXXXXXX.XXXXXXXXXXXXXX..............XX....................XXXXXXXX................................'

       atomg__RaRZ_unused 'XXX....................XXXXXXXXXXXXXX...........................................................................................'

       atoms__RaRZ_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXXXXXXXX..X........................................................................'

       b2r__RESULT_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXX...X..XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........................'

       bpt__noWAIT_unused 'XXX....................XXXXXXXXXXXXXXXXXX...XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX...XXXXXXXXXXXXXXXXXX................'

       break_inst__unused 'XXX....................XXXXXXXXXXXXXX....XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX....................'

       depbar_all__unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXX......XXXXXXXXXXXXXXXX................'

       f2i__Cb_16b_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXX......XX.XXXXXXXX....X...................XXXXXXXXXXXXXXXX........................'

       f2i__Cb_32b_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXX......XX.XXXXXXXX..XXX...................XXXXXXXXXXXXXXXX........................'

       f2i__Cb_64b_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXX......XX.XXXXXXXX..XXX...................XXXXXXXXXXXXXXXX........................'

       f2i__IU_32b_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXX......XX.XXXXXXXX................................XXXXXXXX........................'

       f2i__Ib_16b_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXX......XX.XXXXXXXXXXXXXXXXXXXXXXXX................XXXXXXXX........................'

       f2i__Ib_64b_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXX......XX.XXXXXXXX................................XXXXXXXX........................'

       f2i__Rb_16b_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXX......XX.XXXXXXXX....XXXXXXXXXXXXXXXXXXXX........XXXXXXXX........................'

       f2i__Rb_32b_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXX......XX.XXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX........XXXXXXXX........................'

       f2i__Rb_64b_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXX......XX.XXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX........XXXXXXXX........................'

       frnd__f16_C_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXX...X..XXXXXXXXXXX....X...................XXXXXXXXXXXXXXXX........................'

       frnd__f16_I_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXX...X..XXXXXXXXXXXXXXXXXXXXXXXXXXX................XXXXXXXX........................'

       frnd__f16_R_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXX...X..XXXXXXXXXXX....XXXXXXXXXXXXXXXXXXXX........XXXXXXXX........................'

       frnd__f32_C_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXX...X..XXXXXXXXXXX..XXX...................XXXXXXXXXXXXXXXX........................'

       frnd__f32_I_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXX...X..XXXXXXXXXXX................................XXXXXXXX........................'

       frnd__f32_R_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXX...X..XXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX........XXXXXXXX........................'

       frnd__f64_C_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXX...X..XXXXXXXXXXX..XXX...................XXXXXXXXXXXXXXXX........................'

       frnd__f64_I_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXX...X..XXXXXXXXXXX................................XXXXXXXX........................'

       frnd__f64_R_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXX...X..XXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX........XXXXXXXX........................'

       i2f__Cb_16b_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXXX..X...XXXXXXXXXXXX..X...................XXXXXXXXXXXXXXXX........................'

       i2f__Cb_32b_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXXX..X...XXXXXXXXXXXXXXX...................XXXXXXXXXXXXXXXX........................'

       i2f__Cb_64b_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXXX..X...XXXXXXXXXXXXXXX...................XXXXXXXXXXXXXXXX........................'

       i2f__IS_32b_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXXX..X...XXXXXXXXXX................................XXXXXXXX........................'

       i2f__IS_64b_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXXX..X...XXXXXXXXXX................................XXXXXXXX........................'

       i2f__IU_32b_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXXX..X...XXXXXXXXXX................................XXXXXXXX........................'

       i2f__IU_64b_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXXX..X...XXXXXXXXXX................................XXXXXXXX........................'

       i2f__Rb_16b_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXXX..X...XXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXX........XXXXXXXX........................'

       i2f__Rb_32b_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXXX..X...XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........XXXXXXXX........................'

       i2f__Rb_64b_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXXX..X...XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........XXXXXXXX........................'

       iabs__RCR_C_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX...................XXXXXXXXXXXXXXXX........................'

       iabs__RRR_R_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........XXXXXXXX........................'

       mov__RCR_RC_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXX....XXXXXXXXXXXXX...................XXXXXXXXXXXXXXXX........................'

       mov__RRR_RR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXX....XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........XXXXXXXX........................'

       nanotrap__C_unused 'XXX....................XXXXXXXXXXXXXX.....XXXXXXXXXXXXXXXXXXXXXXXXXXX...................XXXXXXXXXXXXXXXXXXXXXXXX................'

       nanotrap__I_unused 'XXX....................XXXXXXXXXXXXXX.....XXXXXXXXXXXXXXXXXXXXXX................................XXXXXXXXXXXXXXXX................'

       nanotrap__R_unused 'XXX....................XXXXXXXXXXXXXX.....XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........XXXXXXXXXXXXXXXX................'

       p2r_simple__unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXX................................................................'

       plop3_1out__unused 'XXX....................XXXXXXXXXXXXXX.......................X...XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........................'

       suatom_imm__unused 'XXX....................XXXXXXXXXXXXXX...................XXXXXXXX................................................................'

       suatom_reg__unused 'XXX....................XXXXXXXXXXXXXX................................XXXXXXXXXXXXXXXXXXX........................................'

       suatom_tid__unused 'XXX....................XXXXXXXXXXXXXX...................XXXXXXXX................................................................'

       suld_d_imm__unused 'XXX....................XXXXXXXXXXXXXXXXXX...............XXXXXXXX........................XXXXXXXX................................'

       suld_d_reg__unused 'XXX....................XXXXXXXXXXXXXXXXXX............................XXXXXXXXXXXXXXXXXXXXXXXXXXX................................'

       suld_d_tid__unused 'XXX....................XXXXXXXXXXXXXXXXXX...............XXXXXXXX........................XXXXXXXX................................'

       suld_p_imm__unused 'XXX....................XXXXXXXXXXXXXXXXXX...............XXXXXXXX........................XXXXXXXX................................'

       suld_p_reg__unused 'XXX....................XXXXXXXXXXXXXXXXXX............................XXXXXXXXXXXXXXXXXXXXXXXXXXX................................'

       suld_p_tid__unused 'XXX....................XXXXXXXXXXXXXXXXXX...............XXXXXXXX........................XXXXXXXX................................'

       sust_d_imm__unused 'XXX....................XXXXXXXXXXXXXXXXXX...XXX.........XXXXXXXX........................................XXXXXXXX................'

       sust_d_reg__unused 'XXX....................XXXXXXXXXXXXXXXXXX...XXX......................XXXXXXXXXXXXXXXXXXX................XXXXXXXX................'

       sust_d_tid__unused 'XXX....................XXXXXXXXXXXXXXXXXX...XXX.........XXXXXXXX........................................XXXXXXXX................'

       sust_p_imm__unused 'XXX....................XXXXXXXXXXXXXXXXXX...XXX.........XXXXXXXX........................................XXXXXXXX................'

       sust_p_reg__unused 'XXX....................XXXXXXXXXXXXXXXXXX...XXX......................XXXXXXXXXXXXXXXXXXX................XXXXXXXX................'

       sust_p_tid__unused 'XXX....................XXXXXXXXXXXXXXXXXX...XXX.........XXXXXXXX........................................XXXXXXXX................'

       tld4_b_tid__unused 'XXX....................XXXXXXXXXXXXXX.X.........................................................................................'

       tld4_scr_b__unused 'XXX....................XXXXXXXXXXXXXX.X.........................................................................................'

       tmml_b_tid__unused 'XXX....................XXXXXXXXXXXXXX.XXXXXXXXXXXX.X...............X............................................................'

       yield_inst__unused 'XXX....................XXXXXXXXXXXXXX....XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX................'

      cctlt__IVALL_unused 'XXX....................XXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........XXXXXXXXXXXXXXXX................'

      cctlt__const_unused 'XXX....................XXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXXXXXX...................XXXXXXXXXXXXXXXXXXXXXXXX................'

      csmtest_bop__unused 'XXX....................XXXXXXXXXXXXXX..........XX.....XXXXXXXXXX..XX............................XXXXXXXXXXXXXXXX................'

      csmtest_cmp__unused 'XXX....................XXXXXXXXXXXXXX..........XX.....XXXXXXXXXX..XX............................XXXXXXXXXXXXXXXX................'

      dadd__RRC_RC_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXX..XXXX..XXXXXXXX..XXX...................XXXXXXXX................................'

      dadd__RRR_RR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXX..XX............XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX................................'

      depbar__noLE_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXX......XXXXXXXXXXXXXXXX................'

      dmul__RCR_RC_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXX..XXXX..XXXXXXXX..XXX...................XXXXXXXX................................'

      dmul__RRR_RR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXX..XXXX..XXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX........................................'

      fadd__RRC_RC_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX....XXX..XXXXXXXX..XXX...................XXXXXXXX................................'

      fadd__RRI_RI_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX....XXX..XXXXXXXX................................................................'

      fadd__RRR_RR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX....XXX..XXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX........................................'

      fchk__RCR_RC_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXX...XXXXXXX..XXXXXXXX..XXX...................XXXXXXXX........XXXXXXXX................'

      fchk__RIR_RI_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXX...XXXXXXX..XXXXXXXX........................................XXXXXXXX................'

      fchk__RRR_RR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXX...XXXXXXX..XXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX................XXXXXXXX................'

      flo__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXX...XXXXXX..XXXXXXXXX.XXXX...................XXXXXXXXXXXXXXXX........................'

      flo__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXX...XXXXXX..XXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXX........XXXXXXXX........................'

      fmul__RCR_RC_unused 'XXX....................XXXXXXXXXXXXXXXXXX...XXX.....XX..XXXXXXXX..XXX...................XXXXXXXX................................'

      fmul__RIR_RI_unused 'XXX....................XXXXXXXXXXXXXXXXXX...XXX.....XX..XXXXXXXX................................................................'

      fmul__RRR_RR_unused 'XXX....................XXXXXXXXXXXXXXXXXX...XXX.....XX..XXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX........................................'

      getlmembase__unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........................'

      i2i__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXX...................XXXXXXXXXXXXXXXX........................'

      i2i__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........XXXXXXXX........................'

      iabs__RsIR_I_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX................................XXXXXXXX........................'

      jmp_imm_rel__unused 'XXX....................XXXXXXXXXXXXXX......XXXX.................................................XXXXXXXXXXXXXXXX................'

      ldc__RaNonRZ_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXX..XX...XXXXXXXXXXXXXX.....................XXXXXX................................'

      mov__RuIR_RI_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXX....XXXXXXXX................................XXXXXXXX........................'

      mufu__RCR_RC_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXX....XXXXXXXXXX..XXX...................XXXXXXXXXXXXXXXX........................'

      mufu__RIR_RI_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXX....XXXXXXXXXX................................XXXXXXXX........................'

      mufu__RRR_RR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXX....XXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX........XXXXXXXX........................'

      nanosleep__C_unused 'XXX....................XXXXXXXXXXXXXX......XXXXXXXXXXXXXXXXXXXXXXXXXX...................XXXXXXXXXXXXXXXXXXXXXXXX................'

      nanosleep__I_unused 'XXX....................XXXXXXXXXXXXXX......XXXXXXXXXXXXXXXXXXXXX................................XXXXXXXXXXXXXXXX................'

      nanosleep__R_unused 'XXX....................XXXXXXXXXXXXXX......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........XXXXXXXXXXXXXXXX................'

      out__EMIT_Rb_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........................................'

      p2r__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXX...................XXXXXXXX................................'

      p2r__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........................................'

      red__RaNonRZ_unused 'XXX....................XXXXXXXXXXXXXXX......XXX.........XXXXXXXX........................................XXXXXXXX................'

      ret_rel_reg__unused 'XXX....................XXXXXXXXXXXXXX......XXX................................................XX........XXXXXXXX................'

      sel__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXXXXXXXXXXXXXXXXXXXXXXXX...................XXXXXXXX................................'

      sel__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........................................'

      setlmembase__unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........XXXXXXXX................'

      shf__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX.XXX....X........XXXXX...................XXXXXXXX................................'

      shf__RRC_RRC_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX.XXX....X........XXXXX...................XXXXXXXX................................'

      shf__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX.XXX....X........XXXXXXXXXXXXXXXXXXXXXXXX........................................'

      shl__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX.XXX....X........XXXXX...................XXXXXXXX................................'

      shl__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX.XXX....X........XXXXXXXXXXXXXXXXXXXXXXXX........................................'

      shr__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX.XXX....X........XXXXX...................XXXXXXXX................................'

      shr__RIR_RIR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX.XXX....X........................................................................'

      shr__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX.XXX....X........XXXXXXXXXXXXXXXXXXXXXXXX........................................'

     al2p__RaNonRZ_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXX.XXX..XXXXXXXXXXXXXXXXXXXXXXX...........XXXXXXXX................................'

     atom__RaNonRZ_unused 'XXX....................XXXXXXXXXXXXXX...........................................................................................'

     bmov_dst64__C_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX...................XXXXXXXXXXXXXXXXXXXXXXXX................'

     bmov_dst64__I_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX...............................................XXXXXXXXXXXXXXXXXX................'

     bmov_dst64__R_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........XXXXXXXXXXXXXXXX................'

     bmsk__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXXXXX...................XXXXXXXX................................'

     bmsk__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........................................'

     brev__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX...................XXXXXXXXXXXXXXXX........................'

     brev__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........XXXXXXXX........................'

     call_abs__RCR_unused 'XXX....................XXXXXXXXXXXXXX.....XXXXXXXXXXXXXXXXXXXXXXXXXXX.....................XXXXXXXXXXXXXXXXXXXXXX................'

     call_abs__RIR_unused 'XXX....................XXXXXXXXXXXXXX.....XXXXX...............................................XXXXXXXXXXXXXXXXXX................'

     call_abs__RRR_unused 'XXX....................XXXXXXXXXXXXXX.....XXXX................................................XX........XXXXXXXX................'

     call_rel__RIR_unused 'XXX....................XXXXXXXXXXXXXX.....XXXX................................................XXXXXXXXXXXXXXXXXX................'

     call_rel__RRR_unused 'XXX....................XXXXXXXXXXXXXX.....XXXX................................................XX........XXXXXXXX................'

     call_rel_reg__unused 'XXX....................XXXXXXXXXXXXXX.....XXXX................................................XX........XXXXXXXX................'

     dadd__RRsI_RI_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXX..XXXX..XXXXXXXX................................................................'

     dfma__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXX..XX..............XXX...................XXXXXXXX................................'

     dfma__RRC_RRC_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXX..XX..............XXX...................XXXXXXXX................................'

     dfma__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXX..XX..............XXXXXXXXXXXXXXXXXXXXXX........................................'

     dmul__RsIR_RI_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXX..XXXX..XXXXXXXX................................................................'

     dsetp__RRC_RC_unused 'XXX....................XXXXXXXXXXXXXX..........X........XXXXXXXX..XXX...................XXXXXXXX........XXXXXXXX................'

     dsetp__RRR_RR_unused 'XXX....................XXXXXXXXXXXXXX..........X........XXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX................XXXXXXXX................'

     ffma__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX...................XXX...................XXXXXXXX................................'

     ffma__RIR_RIR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX.................................................................................'

     ffma__RRC_RRC_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX...................XXX...................XXXXXXXX................................'

     ffma__RRI_RRI_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX.................................................................................'

     ffma__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX...................XXXXXXXXXXXXXXXXXXXXXX........................................'

     flo__RuIR_RIR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXX...XXXXXX..XXXXXXXXX................................XXXXXXXX........................'

     fsel__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXX.XXXXXX..XXXXXXXX..XXX...................XXXXXXXX................................'

     fsel__RIR_RIR_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXX.XXXXXX..XXXXXXXX................................................................'

     fsel__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXX.XXXXXX..XXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX........................................'

     fset__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXX.........XXXXXXXX..XXX...................XXXXXXXX................................'

     fset__RIR_RIR_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXX.........XXXXXXXX................................................................'

     fset__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXX.........XXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX........................................'

     fsetp__RCR_RC_unused 'XXX....................XXXXXXXXXXXXXX...................XXXXXXXX..XXX...................XXXXXXXX........XXXXXXXX................'

     fsetp__RIR_RI_unused 'XXX....................XXXXXXXXXXXXXX...................XXXXXXXX........................................XXXXXXXX................'

     fsetp__RRR_RR_unused 'XXX....................XXXXXXXXXXXXXX...................XXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX................XXXXXXXX................'

     hmma__444_f32_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXX...................XXXXXXXXXXXXXXXXXXXXXXX........................................'

     hmma__884_f32_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXX...................XXXXXXXXXXXXXXXXXXXXXXX........................................'

     i2i__RsIR_RIR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXX................................XXXXXXXX........................'

     i2ip__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXX..XX..........XXXXX...................XXXXXXXX................................'

     i2ip__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXX..XX..........XXXXXXXXXXXXXXXXXXXXXXXX........................................'

     imad__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXX...X........XXXXX...................XXXXXXXX................................'

     imad__RRC_RRC_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXXX..X.........XXXX...................XXXXXXXX................................'

     imad__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXX...X........XXXXXXXXXXXXXXXXXXXXXXXX........................................'

     imul__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXXX..X........XXXXX...................XXXXXXXX................................'

     imul__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXXX..X........XXXXXXXXXXXXXXXXXXXXXXXX........................................'

     isetp__RCR_RC_unused 'XXX....................XXXXXXXXXXXXXX..........XX...........XXXXXXXXX...................XXXXXXXX........XXXXXXXX................'

     isetp__RRR_RR_unused 'XXX....................XXXXXXXXXXXXXX..........XX...........XXXXXXXXXXXXXXXXXXXXXXXXXXXX................XXXXXXXX................'

     out__EMIT_Imm_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXX................................................................'

     p2r__RsIR_RIR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXX................................................................'

     popc__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXXX...................XXXXXXXXXXXXXXXX........................'

     popc__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXX........XXXXXXXX........................'

     prmt__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX...........XXXXX...................XXXXXXXX................................'

     prmt__RRC_RRC_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX...........XXXXX...................XXXXXXXX................................'

     prmt__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX...........XXXXXXXXXXXXXXXXXXXXXXXX........................................'

     psetp_simple__unused 'XXX....................XXXXXXXXXXXXXXX.........X............X...XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........................'

     qspc__RaNonRZ_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXX...XXXXXX...XXXXXXXX........................XXXXXXXX................................'

     rpcmov_dstPc__unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.........XXXXXXXXXXXXXXX................'

     rpcmov_srcPc__unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXXXXXX........................'

     sel__RuIR_RIR_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXXXXXXXXXXXXXXXXXXX................................................................'

     sgxt__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.X.XXXXXXXXXXXXXX...................XXXXXXXX................................'

     sgxt__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.X.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........................................'

     shf__RRuI_RRI_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX.XXX....X........................................................................'

     shf__RuIR_RIR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX.XXX....X........................................................................'

     shl__RuIR_RIR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX.XXX....X........................................................................'

     vote_vtg_bop__unused 'XXX....................XXXXXXXXXXXXXX..........XX.....XXXXXXXXXX..XX............................XXXXXXXXXXXXXXXX................'

     vote_vtg_cmp__unused 'XXX....................XXXXXXXXXXXXXX..........XX.....XXXXXXXXXX..XX............................XXXXXXXXXXXXXXXX................'

     warpsync__RCR_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXXXXXXXXXXXXXXXXXXXXXXXX...................XXXXXXXXXXXXXXXXXXXXXXXX................'

     warpsync__RIR_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXXXXXXXXXXXXXXXXXXX................................XXXXXXXXXXXXXXXX................'

     warpsync__RRR_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........XXXXXXXXXXXXXXXX................'

    atomg__RaNonRZ_unused 'XXX....................XXXXXXXXXXXXXX...........................................................................................'

    atoms__RaNonRZ_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXXXXXXXX..X........................................................................'

    bar__ARV_II_II_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX....XXXXXXXXXXXXXXXXXXX................XXXXXXXXXXXXXXXXXXXXXXXXXX................'

    bar__ARV_IR_IR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX....XXXXXXXXXXXXXXXXXXX....XXXXXXXXXXXXXX........XXXXXXXXXXXXXXXX................'

    bar__ARV_RI_RI_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX....XXXXXXXXXXXXXXXXXXXXXXX............XX........XXXXXXXXXXXXXXXX................'

    bar__ARV_RR_RR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX....XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........XXXXXXXXXXXXXXXX................'

    bar__RED_RR_RR_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXX....X..XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........XXXXXXXXXXXXXXXX................'

    bmov_clear__Rd_unused 'XXX....................XXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX..............................'

    bmsk__RuIR_RIR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXX................................................................'

    brev__RuIR_RIR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX................................XXXXXXXX........................'

    dfma__RRsI_RRI_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXX..XX............................................................................'

    dfma__RsIR_RIR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXX..XX............................................................................'

    dsetp__RRsI_RI_unused 'XXX....................XXXXXXXXXXXXXX..........X........XXXXXXXX........................................XXXXXXXX................'

    fmnmx__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXX.XXXXXX..XXXXXXXX..XXX...................XXXXXXXX................................'

    fmnmx__RIR_RIR_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXX.XXXXXX..XXXXXXXX................................................................'

    fmnmx__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXX.XXXXXX..XXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX........................................'

    i2ip__RsIR_RIR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXX..XX..........................................................................'

    imad__RRsI_RRI_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXXX..X........................................................................'

    imad__RsIR_RIR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXX...X........................................................................'

    imma_8816_8_8__unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXX.X........X........XXXXXXXXXXXXXXXXXXXXXXXX........................................'

    imnmx__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXXXXXXXXX.XXXXXXXXXXXXXX...................XXXXXXXX................................'

    imnmx__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........................................'

    imul__RsIR_RIR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXXX..X........................................................................'

    isetp__RsIR_RI_unused 'XXX....................XXXXXXXXXXXXXX..........XX...........XXXX........................................XXXXXXXX................'

    ld__sImmOffset_unused 'XXX....................XXXXXXXXXXXXXXXXX....XXX.........XXXXXXXX................................................................'

    ld__uImmOffset_unused 'XXX....................XXXXXXXXXXXXXXXXX....XXX.........XXXXXXXX................................................................'

    popc__RuIR_RIR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX................................XXXXXXXX........................'

    prmt__RRuI_RRI_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX...........................................................................'

    prmt__RuIR_RIR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX...........................................................................'

    sgxt__RuIR_RIR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.X.XXXXXXXXX................................................................'

    st__sImmOffset_unused 'XXX....................XXXXXXXXXXXXXXXXXX...XXX.........................................................XXXXXXXX................'

    st__uImmOffset_unused 'XXX....................XXXXXXXXXXXXXXXXXX...XXX.........................................................XXXXXXXX................'

    tex_b_noConst__unused 'XXX....................XXXXXXXXXXXXXX................................XXXXXXXXXXXXXXXXXXX........................................'

    tex_scr_b_tid__unused 'XXX....................XXXXXXXXXXXXXX...........................................................................................'

    tld_b_noConst__unused 'XXX....................XXXXXXXXXXXXXX................................XXXXXXXXXXXXXXXXXXX........................................'

    tld_scr_b_tid__unused 'XXX....................XXXXXXXXXXXXXX...........................................................................................'

    txd_b_noConst__unused 'XXX....................XXXXXXXXXXXXXX.XX.........XX................X.XXXXXXXXXXXXXXXXXXX........................................'

    txq_b_noConst__unused 'XXX....................XXXXXXXXXXXXXX.XXXXXXXXXXXXXX..............XX.XXXXXXXXXXXXXXXXXXXXXXXXXXX................................'

   ast__PATCH_RaRZ_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXX...XX........XXXXXXXXXXXXXX..........................XXXXXXXX................'

   atomg_cas__RaRZ_unused 'XXX....................XXXXXXXXXXXXXXXXXX.......................................................................................'

   bar__SCAN_II_II_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXX....XXXXXXXXXXXXXXXXXXX................XXXXXXXXXXXXXXXXXXXXXXXXXX................'

   bar__SCAN_IR_IR_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXX....XXXXXXXXXXXXXXXXXXX....XXXXXXXXXXXXXX........XXXXXXXXXXXXXXXX................'

   bar__SCAN_RI_RI_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXX....XXXXXXXXXXXXXXXXXXXXXXX............XX........XXXXXXXXXXXXXXXX................'

   bar__SCAN_RR_RR_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXX....XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........XXXXXXXXXXXXXXXX................'

   bar__SYNC_RR_RR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX....XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........XXXXXXXXXXXXXXXX................'

   bmov_pquad__RCR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXX...................XXXXXXXXXX......XXXXXXXX................'

   bmov_pquad__RIR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXX................................XX......XXXXXXXX................'

   bmov_pquad__RRR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........XX......XXXXXXXX................'

   hset2_noBop__RC_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXX............XXXXX....X...................XXXXXXXX................................'

   hset2_noBop__RI_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXX............XXXXX................................................................'

   hset2_noBop__RR_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXX............XXXXX....XXXXXXXXXXXXXXXXXXXX........................................'

   i2f_Rd64__Cb_8b_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXXX..X...XXXXXXXXXXXX..X...................XXXXXXXXXXXXXXXX........................'

   i2f_Rd64__Rb_8b_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXXX..X...XXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXX........XXXXXXXX........................'

   imad_x__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXX...X........XXXXX...................XXXXXXXX................................'

   imad_x__RRC_RRC_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXXX..X.........XXXX...................XXXXXXXX................................'

   imad_x__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXX...X........XXXXXXXXXXXXXXXXXXXXXXXX........................................'

   imma_8816_16_8__unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXX.X........X........XXXXXXXXXXXXXXXXXXXXXXXX........................................'

   imnmx__RsIR_RIR_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXXXXXXXXX.XXXXXXXXX................................................................'

   ldg__sImmOffset_unused 'XXX....................XXXXXXXXXXXXXXXXX................XXXXXXXX........................XXXXXXXX................................'

   ldg__uImmOffset_unused 'XXX....................XXXXXXXXXXXXXXXXX................XXXXXXXX........................XXXXXXXX................................'

   ldl__sImmOffset_unused 'XXX....................XXXXXXXXXXXXXXXXXX...XXXXXXXX...XXXXXXXXX........................XXXXXXXX................................'

   ldl__uImmOffset_unused 'XXX....................XXXXXXXXXXXXXXXXXX...XXXXXXXX...XXXXXXXXX........................XXXXXXXX................................'

   lds__sImmOffset_unused 'XXX....................XXXXXXXXXXXXXXXXX.XXXXXXXXXX....XXXXXXXXX........................XXXXXXXX................................'

   lds__uImmOffset_unused 'XXX....................XXXXXXXXXXXXXXXXX.XXXXXXXXXX....XXXXXXXXX........................XXXXXXXX................................'

   plop3_lut_1out__unused 'XXX....................XXXXXXXXXXXXXX.......................X...XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........................'

   plop3_lut_2out__unused 'XXX....................XXXXXXXXXXXXXX.......................X...XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........................'

   stg__sImmOffset_unused 'XXX....................XXXXXXXXXXXXXXXXXX...XXX.........XXXXXXXX........................................XXXXXXXX................'

   stg__uImmOffset_unused 'XXX....................XXXXXXXXXXXXXXXXXX...XXX.........XXXXXXXX........................................XXXXXXXX................'

   stl__sImmOffset_unused 'XXX....................XXXXXXXXXXXXXXXXXX...XXXXXXXX...XXXXXXXXX........................................XXXXXXXX................'

   stl__uImmOffset_unused 'XXX....................XXXXXXXXXXXXXXXXXX...XXXXXXXX...XXXXXXXXX........................................XXXXXXXX................'

   sts__sImmOffset_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXX...XXXXXXXXX........................................XXXXXXXX................'

   sts__uImmOffset_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXX...XXXXXXXXX........................................XXXXXXXX................'

   suatom_cas_imm__unused 'XXX....................XXXXXXXXXXXXXXXXXX...............XXXXXXXX................................................................'

   suatom_cas_reg__unused 'XXX....................XXXXXXXXXXXXXXXXXX............................XXXXXXXXXXXXXXXXXXX........................................'

   suatom_cas_tid__unused 'XXX....................XXXXXXXXXXXXXXXXXX...............XXXXXXXX................................................................'

   tld4_b_noConst__unused 'XXX....................XXXXXXXXXXXXXX.X..............................XXXXXXXXXXXXXXXXXXX........................................'

   tld4_scr_b_tid__unused 'XXX....................XXXXXXXXXXXXXX.X.........................................................................................'

   tmml_b_noConst__unused 'XXX....................XXXXXXXXXXXXXX.XXXXXXXXXXXX.X...............X.XXXXXXXXXXXXXXXXXXX........................................'

  cctl__sImmOffset_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXX...XXXXX.XXXXXXXX........................................XXXXXXXX................'

  cctl__uImmOffset_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXX...XXXXX.XXXXXXXX........................................XXXXXXXX................'

  f2i_Rd64__Cb_16b_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXX......XX.XXXXXXXX....X...................XXXXXXXXXXXXXXXX........................'

  f2i_Rd64__Cb_32b_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXX......XX.XXXXXXXX..XXX...................XXXXXXXXXXXXXXXX........................'

  f2i_Rd64__Cb_64b_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXX......XX.XXXXXXXX..XXX...................XXXXXXXXXXXXXXXX........................'

  f2i_Rd64__IU_32b_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXX......XX.XXXXXXXX................................XXXXXXXX........................'

  f2i_Rd64__Ib_16b_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXX......XX.XXXXXXXXXXXXXXXXXXXXXXXX................XXXXXXXX........................'

  f2i_Rd64__Ib_64b_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXX......XX.XXXXXXXX................................XXXXXXXX........................'

  f2i_Rd64__Rb_16b_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXX......XX.XXXXXXXX....XXXXXXXXXXXXXXXXXXXX........XXXXXXXX........................'

  f2i_Rd64__Rb_32b_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXX......XX.XXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX........XXXXXXXX........................'

  f2i_Rd64__Rb_64b_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXX......XX.XXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX........XXXXXXXX........................'

  hsetp2_noBop__RC_unused 'XXX....................XXXXXXXXXXXXXX......................XXXXX....X...................XXXXXXXX........XXXXXXXX................'

  hsetp2_noBop__RI_unused 'XXX....................XXXXXXXXXXXXXX......................XXXXX........................................XXXXXXXX................'

  hsetp2_noBop__RR_unused 'XXX....................XXXXXXXXXXXXXX......................XXXXX....XXXXXXXXXXXXXXXXXXXX................XXXXXXXX................'

  i2f_Rd64__Cb_16b_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXXX..X...XXXXXXXXXXXX..X...................XXXXXXXXXXXXXXXX........................'

  i2f_Rd64__Cb_32b_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXXX..X...XXXXXXXXXXXXXXX...................XXXXXXXXXXXXXXXX........................'

  i2f_Rd64__Cb_64b_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXXX..X...XXXXXXXXXXXXXXX...................XXXXXXXXXXXXXXXX........................'

  i2f_Rd64__IS_32b_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXXX..X...XXXXXXXXXX................................XXXXXXXX........................'

  i2f_Rd64__IS_64b_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXXX..X...XXXXXXXXXX................................XXXXXXXX........................'

  i2f_Rd64__IU_32b_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXXX..X...XXXXXXXXXX................................XXXXXXXX........................'

  i2f_Rd64__IU_64b_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXXX..X...XXXXXXXXXX................................XXXXXXXX........................'

  i2f_Rd64__Rb_16b_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXXX..X...XXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXX........XXXXXXXX........................'

  i2f_Rd64__Rb_32b_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXXX..X...XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........XXXXXXXX........................'

  i2f_Rd64__Rb_64b_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXXX..X...XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........XXXXXXXX........................'

  imad_hi__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXX...X........XXXXX...................XXXXXXXX................................'

  imad_hi__RRC_RRC_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXXX..X.........XXXX...................XXXXXXXX................................'

  imad_hi__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXX...X........XXXXXXXXXXXXXXXXXXXXXXXX........................................'

  imad_x__RRsI_RRI_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXXX..X........................................................................'

  imad_x__RsIR_RIR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXX...X........................................................................'

 ast__LOGICAL_RaRZ_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXX...XX........XXXXXXXXXXXXXX..........................XXXXXXXX................'

 bmov_clear_bd__Bd_unused 'XXX....................XXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX......XXXX....................'

 call_rel_imm__RIR_unused 'XXX....................XXXXXXXXXXXXXX.....XXXX................................................XXXXXXXXXXXXXXXXXX................'

 call_rel_imm__RRR_unused 'XXX....................XXXXXXXXXXXXXX.....XXXX................................................XX........XXXXXXXX................'

 cctll__sImmOffset_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXXXXXXXXXXXXXXXXXXX........................XXXXXXXX........XXXXXXXX................'

 cctll__uImmOffset_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXXXXXXXXXXXXXXXXXXX........................XXXXXXXX........XXXXXXXX................'

 hmma_848__444_f32_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXX...................XXXXXXXXXXXXXXXXXXXXXXX........................................'

 hmma_848__884_f32_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXX...................XXXXXXXXXXXXXXXXXXXXXXX........................................'

 hmma__444_f16_f16_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXX...................XXXXXXXXXXXXXXXXXXXXXXX........................................'

 hmma__884_f16_f16_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXX...................XXXXXXXXXXXXXXXXXXXXXXX........................................'

 imad_hi__RsIR_RIR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXX...X........................................................................'

 ipa_offset__IPA_C_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXX...X....XXXX........XXXXX...................XXXXXXXXXXXXXXXX........................'

 ld_zd__sImmOffset_unused 'XXX....................XXXXXXXXXXXXXXXXX................XXXXXXXX................................................................'

 ld_zd__uImmOffset_unused 'XXX....................XXXXXXXXXXXXXXXXX................XXXXXXXX................................................................'

 lop3_imm__RIR_RIR_unused 'XXX....................XXXXXXXXXXXXXX....XXX....................................................................................'

 lop3_lut__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXX....XXX....................XXXXX...................XXXXXXXX................................'

 lop3_lut__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXX....XXX....................XXXXXXXXXXXXXXXXXXXXXXXX........................................'

 qspc_PuOnly__RaRZ_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXX...XXXXXX...XXXXXXXX........................XXXXXXXX................................'

 qspc_RdOnly__RaRZ_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXX...XXXXXX...XXXXXXXX........................XXXXXXXX................................'

 rpcmov_dstPc_imm__unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.................................XXXXXXXXXXXXXXX................'

 vabsdiff__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXX...XXXXXXX.X........XXXXX...................XXXXXXXX................................'

 vabsdiff__RRC_RRC_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXX...XXXXXXX.X........XXXXX...................XXXXXXXX................................'

 vabsdiff__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXX...XXXXXXX.X........XXXXXXXXXXXXXXXXXXXXXXXX........................................'

ald__LOGICAL_RaRZ_default_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXX.XX...XXXXXXXXXXXXXXXXXXXXXXXX..................................................'

ald__PATCH_RaNonRZOffset_P_RbRZ_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXX.XX...XXXXXXXXXXXXXXXXXXXXXXX...................................................'

ald__PATCH_RaRZ_P_RbRZ_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXX.XX...XXXXXXXXXXXXXXXXXXXXXXXX..................................................'

ast__PATCH_RaNonRZOffset_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXX...XX........XXXXXXXXXXXXX...........................XXXXXXXX................'

atom_cas__RaNonRZ_CAST_unused 'XXX....................XXXXXXXXXXXXXXXX.........................................................................................'

atom_cas__RaNonRZ_CAS_unused 'XXX....................XXXXXXXXXXXXXXXX.........................................................................................'

atom_cas__RaRZ_CAST_unused 'XXX....................XXXXXXXXXXXXXXXX.........................................................................................'

atom_cas__RaRZ_CAS_unused 'XXX....................XXXXXXXXXXXXXXXX.........................................................................................'

atom_cas_weakonly__RaNonRZ_CAST_unused 'XXX....................XXXXXXXXXXXXXXXX.........................................................................................'

atom_cas_weakonly__RaNonRZ_CAS_unused 'XXX....................XXXXXXXXXXXXXXXX.........................................................................................'

atom_cas_weakonly__RaRZ_CAST_unused 'XXX....................XXXXXXXXXXXXXXXX.........................................................................................'

atom_cas_weakonly__RaRZ_CAS_unused 'XXX....................XXXXXXXXXXXXXXXX.........................................................................................'

atom_weakonly__RaNonRZ_unused 'XXX....................XXXXXXXXXXXXXX...........................................................................................'

atom_weakonly__RaRZ_unused 'XXX....................XXXXXXXXXXXXXX...........................................................................................'

atomg_cas__RaNonRZ_unused 'XXX....................XXXXXXXXXXXXXXXXXX.......................................................................................'

atomg_cas_weakonly__RaNonRZ_unused 'XXX....................XXXXXXXXXXXXXXXXXX.......................................................................................'

atomg_cas_weakonly__RaRZ_unused 'XXX....................XXXXXXXXXXXXXXXXXX.......................................................................................'

atomg_weakonly__RaNonRZ_unused 'XXX....................XXXXXXXXXXXXXX...........................................................................................'

atomg_weakonly__RaRZ_unused 'XXX....................XXXXXXXXXXXXXX...........................................................................................'

atoms_cas__RaNonRZ_CAST_unused 'XXX....................XXXXXXXXXXXXXXXX..XXXXXXXXXXXX..X........................................................................'

atoms_cas__RaNonRZ_CAS_unused 'XXX....................XXXXXXXXXXXXXXXX..XXXXXXXXXXXX..X........................................................................'

atoms_cas__RaRZ_CAST_unused 'XXX....................XXXXXXXXXXXXXXXX..XXXXXXXXXXXX..X........................................................................'

atoms_cas__RaRZ_CAS_unused 'XXX....................XXXXXXXXXXXXXXXX..XXXXXXXXXXXX..X........................................................................'

bar__RED_II_optionalCount_II_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXX....X..XXXXXXXXXXXXXXXX................XXXXXXXXXXXXXXXXXXXXXXXXXX................'

bar__RED_IR_optionalCount_IR_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXX....X..XXXXXXXXXXXXXXXX....XXXXXXXXXXXXXX........XXXXXXXXXXXXXXXX................'

bar__RED_RI_optionalCount_RI_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXX....X..XXXXXXXXXXXXXXXXXXXX............XX........XXXXXXXXXXXXXXXX................'

bar__RED_dfrBlk_II_optionalCount_II_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXX....X..XXXXXXXXXXXXXXXX................XXXXXXXXXXXXXXXXXXXXXXXXXX................'

bar__RED_dfrBlk_IR_optionalCount_IR_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXX....X..XXXXXXXXXXXXXXXX....XXXXXXXXXXXXXX........XXXXXXXXXXXXXXXX................'

bar__RED_dfrBlk_RI_optionalCount_RI_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXX....X..XXXXXXXXXXXXXXXXXXXX............XX........XXXXXXXXXXXXXXXX................'

bar__RED_dfrBlk_RR_RR_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXX....X..XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........XXXXXXXXXXXXXXXX................'

bar__SYNCALL_dfrBlk_noSrc_II_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX....XXXXXXXXXXXXXXXXXXX................XXXXXXXXXXXXXXXXXXXXXXXXXX................'

bar__SYNCALL_noSrc_II_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX....XXXXXXXXXXXXXXXXXXX................XXXXXXXXXXXXXXXXXXXXXXXXXX................'

bar__SYNC_II_optionalCount_II_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX....XXXXXXXXXXXXXXXXXXX................XXXXXXXXXXXXXXXXXXXXXXXXXX................'

bar__SYNC_IR_optionalCount_IR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX....XXXXXXXXXXXXXXXXXXX....XXXXXXXXXXXXXX........XXXXXXXXXXXXXXXX................'

bar__SYNC_RI_optionalCount_RI_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX....XXXXXXXXXXXXXXXXXXXXXXX............XX........XXXXXXXXXXXXXXXX................'

bar__SYNC_dfrBlk_II_optionalCount_II_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX....XXXXXXXXXXXXXXXXXXX................XXXXXXXXXXXXXXXXXXXXXXXXXX................'

bar__SYNC_dfrBlk_IR_optionalCount_IR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX....XXXXXXXXXXXXXXXXXXX....XXXXXXXXXXXXXX........XXXXXXXXXXXXXXXX................'

bar__SYNC_dfrBlk_RI_optionalCount_RI_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX....XXXXXXXXXXXXXXXXXXXXXXX............XX........XXXXXXXXXXXXXXXX................'

bar__SYNC_dfrBlk_RR_RR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX....XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........XXXXXXXXXXXXXXXX................'

bmov_clear_barrier__unused 'XXX....................XXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX......XXXX....................'

bmov_pquad_bar__RBR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX......XXXX....................'

cctl__IVALL_WBALL_C_noSrc_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXX...XXXXX.XXXXXXXX........................................XXXXXXXX................'

cctl__IVALL_WBALL_D_U_noSrc_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXX...XXXXX.XXXXXXXX........................................XXXXXXXX................'

cctl__IVALL_WBALL_I_noSrc_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXX...XXXXX.XXXXXXXX........................................XXXXXXXX................'

cctll__IVALL_WBALL_D_U_noSrc_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXXXXXXXXXXXXXXXXXXX........................XXXXXXXX........XXXXXXXX................'

dsetp_simple__RRC_RC_unused 'XXX....................XXXXXXXXXXXXXX..........X........XXXXXXXX..XXX...................XXXXXXXX........XXXXXXXX................'

dsetp_simple__RRR_RR_unused 'XXX....................XXXXXXXXXXXXXX..........X........XXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX................XXXXXXXX................'

dsetp_simple__RRsI_RI_unused 'XXX....................XXXXXXXXXXXXXX..........X........XXXXXXXX........................................XXXXXXXX................'

f2f_f32_downconvert__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXX...X..XXXXXXXXXXX..XXX...................XXXXXXXXXXXXXXXX........................'

f2f_f32_downconvert__RIR_RIR_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXX...X..XXXXXXXXXXX................................XXXXXXXX........................'

f2f_f32_downconvert__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXX...X..XXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX........XXXXXXXX........................'

f2f_f32_upconvert__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXX...X..XXXXXXXXXXX....X...................XXXXXXXXXXXXXXXX........................'

f2f_f32_upconvert__RIR_RIR_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXX...X..XXXXXXXXXXXXXXXXXXXXXXXXXXX................XXXXXXXX........................'

f2f_f32_upconvert__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXX...X..XXXXXXXXXXX....XXXXXXXXXXXXXXXXXXXX........XXXXXXXX........................'

f2f_f64_downconvert__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXX...X..XXXXXXXXXXX..XXX...................XXXXXXXXXXXXXXXX........................'

f2f_f64_downconvert__RIR_RIR_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXX...X..XXXXXXXXXXX................................XXXXXXXX........................'

f2f_f64_downconvert__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXX...X..XXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX........XXXXXXXX........................'

f2f_f64_upconvert__R_32I_R_RIR_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXX...X..XXXXXXXXXXX................................XXXXXXXX........................'

f2f_f64_upconvert__R_C16_R_RCR_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXX...X..XXXXXXXXXXX....X...................XXXXXXXXXXXXXXXX........................'

f2f_f64_upconvert__R_C32_R_RCR_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXX...X..XXXXXXXXXXX..XXX...................XXXXXXXXXXXXXXXX........................'

f2f_f64_upconvert__R_I16_R_RIR_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXX...X..XXXXXXXXXXXXXXXXXXXXXXXXXXX................XXXXXXXX........................'

f2f_f64_upconvert__R_R16_R_RRR_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXX...X..XXXXXXXXXXX....XXXXXXXXXXXXXXXXXXXX........XXXXXXXX........................'

f2f_f64_upconvert__R_R32_R_RRR_unused 'XXX....................XXXXXXXXXXXXXXXXXXX..XXX...X..XXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX........XXXXXXXX........................'

fset_simple__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXX.........XXXXXXXX..XXX...................XXXXXXXX................................'

fset_simple__RIR_RIR_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXX.........XXXXXXXX................................................................'

fset_simple__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXX....XXXXXX.........XXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX........................................'

fsetp_simple__RCR_RC_unused 'XXX....................XXXXXXXXXXXXXX...................XXXXXXXX..XXX...................XXXXXXXX........XXXXXXXX................'

fsetp_simple__RIR_RI_unused 'XXX....................XXXXXXXXXXXXXX...................XXXXXXXX........................................XXXXXXXX................'

fsetp_simple__RRR_RR_unused 'XXX....................XXXXXXXXXXXXXX...................XXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX................XXXXXXXX................'

hmma_848__444_f16_f16_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXX...................XXXXXXXXXXXXXXXXXXXXXXX........................................'

hmma_848__884_f16_f16_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXX...................XXXXXXXXXXXXXXXXXXXXXXX........................................'

hmma_848_old_row_col__444_f16_f16_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXX...................XXXXXXXXXXXXXXXXXXXXXXX........................................'

hmma_848_old_row_col__444_f32_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXX...................XXXXXXXXXXXXXXXXXXXXXXX........................................'

hmma_848_old_row_col__884_f16_f16_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXX...................XXXXXXXXXXXXXXXXXXXXXXX........................................'

hmma_848_old_row_col__884_f32_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXX...................XXXXXXXXXXXXXXXXXXXXXXX........................................'

hmma_old_row_col__444_f16_f16_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXX...................XXXXXXXXXXXXXXXXXXXXXXX........................................'

hmma_old_row_col__444_f32_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXX...................XXXXXXXXXXXXXXXXXXXXXXX........................................'

hmma_old_row_col__884_f16_f16_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXX...................XXXXXXXXXXXXXXXXXXXXXXX........................................'

hmma_old_row_col__884_f32_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXX...................XXXXXXXXXXXXXXXXXXXXXXX........................................'

iadd32i_imm__RsIR_RIR_unused 'XXX....................XXXXXXXXXXXXXX..............X..X.........................................................................'

iadd32i_x_imm__RIR_RIR_unused 'XXX....................XXXXXXXXXXXXXX..............X..X.........................................................................'

iadd3_imm__RsIR_RIR_unused 'XXX....................XXXXXXXXXXXXXX..............X..X.........................................................................'

iadd3_noimm__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXX..............X..X..........XXXX...................XXXXXXXX................................'

iadd3_noimm__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXX..............X..X..........XXXXXXXXXXXXXXXXXXXXXXX........................................'

iadd3_x_imm__RIR_RIR_unused 'XXX....................XXXXXXXXXXXXXX..............X..X.........................................................................'

iadd3_x_noimm__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXX..............X..X..........XXXX...................XXXXXXXX................................'

iadd3_x_noimm__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXX..............X..X..........XXXXXXXXXXXXXXXXXXXXXXX........................................'

iadd_imm__RsIR_RIR_unused 'XXX....................XXXXXXXXXXXXXX..............X..X.........................................................................'

iadd_noimm__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXX..............X..X..........XXXX...................XXXXXXXX................................'

iadd_noimm__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXX..............X..X..........XXXXXXXXXXXXXXXXXXXXXXX........................................'

iadd_x_imm__RIR_RIR_unused 'XXX....................XXXXXXXXXXXXXX..............X..X.........................................................................'

iadd_x_noimm__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXX..............X..X..........XXXX...................XXXXXXXX................................'

iadd_x_noimm__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXX..............X..X..........XXXXXXXXXXXXXXXXXXXXXXX........................................'

imad_hi_pseudo__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXX...X........XXXXX...................XXXXXXXX................................'

imad_hi_pseudo__RRC_RRC_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXXX..X.........XXXX...................XXXXXXXX................................'

imad_hi_pseudo__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXX...X........XXXXXXXXXXXXXXXXXXXXXXXX........................................'

imad_hi_pseudo__RsIR_RIR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXX...X........................................................................'

imad_hi_x__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXX...X........XXXXX...................XXXXXXXX................................'

imad_hi_x__RRC_RRC_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXXX..X.........XXXX...................XXXXXXXX................................'

imad_hi_x__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXX...X........XXXXXXXXXXXXXXXXXXXXXXXX........................................'

imad_hi_x__RsIR_RIR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXX...X........................................................................'

imad_hi_x_pseudo__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXX...X........XXXXX...................XXXXXXXX................................'

imad_hi_x_pseudo__RRC_RRC_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXXX..X.........XXXX...................XXXXXXXX................................'

imad_hi_x_pseudo__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXX...X........XXXXXXXXXXXXXXXXXXXXXXXX........................................'

imad_hi_x_pseudo__RsIR_RIR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXX...X........................................................................'

imad_pseudo__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXX...X........XXXXX...................XXXXXXXX................................'

imad_pseudo__RRC_RRC_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXXX..X.........XXXX...................XXXXXXXX................................'

imad_pseudo__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXX...X........XXXXXXXXXXXXXXXXXXXXXXXX........................................'

imad_pseudo__RRsI_RRI_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXXX..X........................................................................'

imad_pseudo__RsIR_RIR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXX...X........................................................................'

imad_wide__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXX...X........XXXXX...................XXXXXXXX................................'

imad_wide__RRC_RRC_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXXX..X.........XXXX...................XXXXXXXX................................'

imad_wide__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXX...X........XXXXXXXXXXXXXXXXXXXXXXXX........................................'

imad_wide__RsIR_RIR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXX...X........................................................................'

imad_wide_pseudo__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXX...X........XXXXX...................XXXXXXXX................................'

imad_wide_pseudo__RRC_RRC_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXXX..X.........XXXX...................XXXXXXXX................................'

imad_wide_pseudo__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXX...X........XXXXXXXXXXXXXXXXXXXXXXXX........................................'

imad_wide_pseudo__RsIR_RIR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXX...X........................................................................'

imad_wide_x__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXX...X........XXXXX...................XXXXXXXX................................'

imad_wide_x__RRC_RRC_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXXX..X.........XXXX...................XXXXXXXX................................'

imad_wide_x__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXX...X........XXXXXXXXXXXXXXXXXXXXXXXX........................................'

imad_wide_x__RsIR_RIR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXX...X........................................................................'

imad_wide_x_pseudo__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXX...X........XXXXX...................XXXXXXXX................................'

imad_wide_x_pseudo__RRC_RRC_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXXX..X.........XXXX...................XXXXXXXX................................'

imad_wide_x_pseudo__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXX...X........XXXXXXXXXXXXXXXXXXXXXXXX........................................'

imad_wide_x_pseudo__RsIR_RIR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXX...X........................................................................'

imad_x_pseudo__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXX...X........XXXXX...................XXXXXXXX................................'

imad_x_pseudo__RRC_RRC_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXXX..X.........XXXX...................XXXXXXXX................................'

imad_x_pseudo__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXX...X........XXXXXXXXXXXXXXXXXXXXXXXX........................................'

imad_x_pseudo__RRsI_RRI_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXXX..X........................................................................'

imad_x_pseudo__RsIR_RIR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXX...X........................................................................'

imul32i_lo__RsIR_RIR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXXX..X........................................................................'

imul32i_wide__RsIR_RIR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXXX..X........................................................................'

imul_wide__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXXX..X........XXXXX...................XXXXXXXX................................'

imul_wide__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXXX..X........XXXXXXXXXXXXXXXXXXXXXXXX........................................'

imul_wide__RsIR_RIR_unused 'XXX....................XXXXXXXXXXXXXX....XXX...XXXXXX..X........................................................................'

ipa_offset__IPA_Imm_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXX...X....XXXX........................................XXXXXXXX........................'

ipa_offset__IPA_Rb_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXX...X....XXXX........XXXXXXXXXXXXXXXXXXXXXXXX........XXXXXXXX........................'

iscadd32i__RIR_RIR_unused 'XXX....................XXXXXXXXXXXXXX....XXX....................................................................................'

iscadd_imm__RIR_RIR_unused 'XXX....................XXXXXXXXXXXXXX....XXX....................................................................................'

iscadd_noimm__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXX....XXX.....................XXXX...................XXXXXXXX................................'

iscadd_noimm__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXX....XXX.....................XXXXXXXXXXXXXXXXXXXXXXX........................................'

isetp_simple__RCR_RC_unused 'XXX....................XXXXXXXXXXXXXX..........XX...........XXXXXXXXX...................XXXXXXXX........XXXXXXXX................'

isetp_simple__RRR_RR_unused 'XXX....................XXXXXXXXXXXXXX..........XX...........XXXXXXXXXXXXXXXXXXXXXXXXXXXX................XXXXXXXX................'

isetp_simple__RsIR_RI_unused 'XXX....................XXXXXXXXXXXXXX..........XX...........XXXX........................................XXXXXXXX................'

ld_weakonly__sImmOffset_unused 'XXX....................XXXXXXXXXXXXXXXXX....XXX.........XXXXXXXX................................................................'

ld_weakonly__uImmOffset_unused 'XXX....................XXXXXXXXXXXXXXXXX....XXX.........XXXXXXXX................................................................'

ld_weakonly_zd__sImmOffset_unused 'XXX....................XXXXXXXXXXXXXXXXX................XXXXXXXX................................................................'

ld_weakonly_zd__uImmOffset_unused 'XXX....................XXXXXXXXXXXXXXXXX................XXXXXXXX................................................................'

ldg_weakonly__sImmOffset_unused 'XXX....................XXXXXXXXXXXXXXXXX................XXXXXXXX........................XXXXXXXX................................'

ldg_weakonly__uImmOffset_unused 'XXX....................XXXXXXXXXXXXXXXXX................XXXXXXXX........................XXXXXXXX................................'

ldg_weakonly_zd__sImmOffset_unused 'XXX....................XXXXXXXXXXXXXXXXX................XXXXXXXX........................XXXXXXXX................................'

ldg_weakonly_zd__uImmOffset_unused 'XXX....................XXXXXXXXXXXXXXXXX................XXXXXXXX........................XXXXXXXX................................'

ldg_zd__sImmOffset_unused 'XXX....................XXXXXXXXXXXXXXXXX................XXXXXXXX........................XXXXXXXX................................'

ldg_zd__uImmOffset_unused 'XXX....................XXXXXXXXXXXXXXXXX................XXXXXXXX........................XXXXXXXX................................'

lds_zd__sImmOffset_unused 'XXX....................XXXXXXXXXXXXXXXXX.XXX...XXXX....XXXXXXXXX........................XXXXXXXX................................'

lds_zd__uImmOffset_unused 'XXX....................XXXXXXXXXXXXXXXXX.XXX...XXXX....XXXXXXXXX........................XXXXXXXX................................'

lea_hi_imm__RRuI_RRI_unused 'XXX....................XXXXXXXXXXXXXX....XXX....................................................................................'

lea_hi_imm__RuIR_RIR_unused 'XXX....................XXXXXXXXXXXXXX....XXX....................................................................................'

lea_hi_imm_sx32__RuIR_RIR_unused 'XXX....................XXXXXXXXXXXXXX....XXX....................................................................................'

lea_hi_imm_sx32_x__RuIR_RIR_unused 'XXX....................XXXXXXXXXXXXXX....XXX....................................................................................'

lea_hi_imm_x__RRuI_RRI_unused 'XXX....................XXXXXXXXXXXXXX....XXX....................................................................................'

lea_hi_imm_x__RuIR_RIR_unused 'XXX....................XXXXXXXXXXXXXX....XXX....................................................................................'

lea_hi_noimm__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXX....XXX.....................XXXX...................XXXXXXXX................................'

lea_hi_noimm__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXX....XXX.....................XXXXXXXXXXXXXXXXXXXXXXX........................................'

lea_hi_noimm_sx32__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXX....XXX.....................XXXX...................XXXXXXXX................................'

lea_hi_noimm_sx32__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXX....XXX.....................XXXXXXXXXXXXXXXXXXXXXXX........................................'

lea_hi_noimm_sx32_x__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXX....XXX.....................XXXX...................XXXXXXXX................................'

lea_hi_noimm_sx32_x__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXX....XXX.....................XXXXXXXXXXXXXXXXXXXXXXX........................................'

lea_hi_noimm_x__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXX....XXX.....................XXXX...................XXXXXXXX................................'

lea_hi_noimm_x__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXX....XXX.....................XXXXXXXXXXXXXXXXXXXXXXX........................................'

lea_lo_imm__RuIR_RIR_unused 'XXX....................XXXXXXXXXXXXXX....XXX....................................................................................'

lea_lo_imm_x__RuIR_RIR_unused 'XXX....................XXXXXXXXXXXXXX....XXX....................................................................................'

lea_lo_noimm__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXX....XXX.....................XXXX...................XXXXXXXX................................'

lea_lo_noimm__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXX....XXX.....................XXXXXXXXXXXXXXXXXXXXXXX........................................'

lea_lo_noimm_x__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXX....XXX.....................XXXX...................XXXXXXXX................................'

lea_lo_noimm_x__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXX....XXX.....................XXXXXXXXXXXXXXXXXXXXXXX........................................'

lop32i_optionalPp__unused 'XXX....................XXXXXXXXXXXXXX....XXX....................................................................................'

lop3_imm_optionalPp__RIR_RIR_unused 'XXX....................XXXXXXXXXXXXXX....XXX....................................................................................'

lop3_lut__RuIR_RIR_unused 'XXX....................XXXXXXXXXXXXXX....XXX....................................................................................'

lop3_lut_optionalPp__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXX....XXX....................XXXXX...................XXXXXXXX................................'

lop3_lut_optionalPp__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXX....XXX....................XXXXXXXXXXXXXXXXXXXXXXXX........................................'

lop3_lut_optionalPp__RuIR_RIR_unused 'XXX....................XXXXXXXXXXXXXX....XXX....................................................................................'

lop3_noimm__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXX....XXX....................XXXXX...................XXXXXXXX................................'

lop3_noimm__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXX....XXX....................XXXXXXXXXXXXXXXXXXXXXXXX........................................'

lop3_noimm_optionalPp__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXX....XXX....................XXXXX...................XXXXXXXX................................'

lop3_noimm_optionalPp__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXX....XXX....................XXXXXXXXXXXXXXXXXXXXXXXX........................................'

lop_imm_optionalPp__unused 'XXX....................XXXXXXXXXXXXXX....XXX....................................................................................'

lop_noimm__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXX....XXX....................XXXXX...................XXXXXXXX................................'

lop_noimm__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXX....XXX....................XXXXXXXXXXXXXXXXXXXXXXXX........................................'

lop_noimm_optionalPp__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXX....XXX....................XXXXX...................XXXXXXXX................................'

lop_noimm_optionalPp__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXX....XXX....................XXXXXXXXXXXXXXXXXXXXXXXX........................................'

plop3_lut_1out_1reg__RCR_unused 'XXX....................XXXXXXXXXXXXXX..........X............XXXXXXXXX...................XXXXXXXXXXXXXXXX........................'

plop3_lut_1out_1reg__RRR_unused 'XXX....................XXXXXXXXXXXXXX..........X............XXXXXXXXXXXXXXXXXXXXXXXXXXXX........XXXXXXXX........................'

plop3_lut_1out_2reg__RCR_unused 'XXX....................XXXXXXXXXXXXXX..........X................XXXXX...................XXXXXXXXXXXXXXXX........................'

plop3_lut_1out_2reg__RRR_unused 'XXX....................XXXXXXXXXXXXXX..........X................XXXXXXXXXXXXXXXXXXXXXXXX........XXXXXXXX........................'

plop3_lut_1out_3reg__RCR_unused 'XXX....................XXXXXXXXXXXXXXXXXX......X................XXXXX...................XXXXXXXX................................'

plop3_lut_1out_3reg__RRR_unused 'XXX....................XXXXXXXXXXXXXXXXXX......X................XXXXXXXXXXXXXXXXXXXXXXXX........................................'

plop3_lut_2out_1reg__RCR_unused 'XXX....................XXXXXXXXXXXXXX..........X............XXXXXXXXX...................XXXXXXXXXXXXXXXX........................'

plop3_lut_2out_1reg__RRR_unused 'XXX....................XXXXXXXXXXXXXX..........X............XXXXXXXXXXXXXXXXXXXXXXXXXXXX........XXXXXXXX........................'

plop3_lut_2out_2reg__RCR_unused 'XXX....................XXXXXXXXXXXXXX..........X................XXXXX...................XXXXXXXXXXXXXXXX........................'

plop3_lut_2out_2reg__RRR_unused 'XXX....................XXXXXXXXXXXXXX..........X................XXXXXXXXXXXXXXXXXXXXXXXX........XXXXXXXX........................'

plop3_lut_2out_3reg__RCR_unused 'XXX....................XXXXXXXXXXXXXXXXXX......X................XXXXX...................XXXXXXXX................................'

plop3_lut_2out_3reg__RRR_unused 'XXX....................XXXXXXXXXXXXXXXXXX......X................XXXXXXXXXXXXXXXXXXXXXXXX........................................'

qspc_PuOnly__RaNonRZ_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXX...XXXXXX...XXXXXXXX........................XXXXXXXX................................'

qspc_RdOnly__RaNonRZ_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXX...XXXXXX...XXXXXXXX........................XXXXXXXX................................'

red_weakonly__RaNonRZ_unused 'XXX....................XXXXXXXXXXXXXXX......XXX.........XXXXXXXX........................................XXXXXXXX................'

red_weakonly__RaRZ_unused 'XXX....................XXXXXXXXXXXXXXX......XXX.........XXXXXXXX........................................XXXXXXXX................'

rpcmov_dstPc64__Const_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX...................XXXXXXXXXXXXXXXXXXXXXXXX................'

rpcmov_dstPc64__Imm_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXX...............................................XXXXXXXXXXXXXXXXXX................'

rpcmov_dstPc_const__unused 'XXX....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.....................XXXXXX.XXXXXXXXXXXXXXX................'

st_weakonly__sImmOffset_unused 'XXX....................XXXXXXXXXXXXXXXXXX...XXX.........................................................XXXXXXXX................'

st_weakonly__uImmOffset_unused 'XXX....................XXXXXXXXXXXXXXXXXX...XXX.........................................................XXXXXXXX................'

stg_weakonly__sImmOffset_unused 'XXX....................XXXXXXXXXXXXXXXXXX...XXX.........XXXXXXXX........................................XXXXXXXX................'

stg_weakonly__uImmOffset_unused 'XXX....................XXXXXXXXXXXXXXXXXX...XXX.........XXXXXXXX........................................XXXXXXXX................'

suatom_cas_imm_weakonly__unused 'XXX....................XXXXXXXXXXXXXXXXXX...............XXXXXXXX................................................................'

suatom_cas_reg_weakonly__unused 'XXX....................XXXXXXXXXXXXXXXXXX............................XXXXXXXXXXXXXXXXXXX........................................'

suatom_cas_tid_weakonly__unused 'XXX....................XXXXXXXXXXXXXXXXXX...............XXXXXXXX................................................................'

suatom_imm_weakonly__unused 'XXX....................XXXXXXXXXXXXXX...................XXXXXXXX................................................................'

suatom_reg_weakonly__unused 'XXX....................XXXXXXXXXXXXXX................................XXXXXXXXXXXXXXXXXXX........................................'

suatom_tid_weakonly__unused 'XXX....................XXXXXXXXXXXXXX...................XXXXXXXX................................................................'

suld_d_imm_weakonly__unused 'XXX....................XXXXXXXXXXXXXXXXXX...............XXXXXXXX........................XXXXXXXX................................'

suld_d_reg_weakonly__unused 'XXX....................XXXXXXXXXXXXXXXXXX............................XXXXXXXXXXXXXXXXXXXXXXXXXXX................................'

suld_d_tid_weakonly__unused 'XXX....................XXXXXXXXXXXXXXXXXX...............XXXXXXXX........................XXXXXXXX................................'

suld_p_imm_weakonly__unused 'XXX....................XXXXXXXXXXXXXXXXXX...............XXXXXXXX........................XXXXXXXX................................'

suld_p_reg_weakonly__unused 'XXX....................XXXXXXXXXXXXXXXXXX............................XXXXXXXXXXXXXXXXXXXXXXXXXXX................................'

suld_p_tid_weakonly__unused 'XXX....................XXXXXXXXXXXXXXXXXX...............XXXXXXXX........................XXXXXXXX................................'

sured_imm_weakonly__unused 'XXX....................XXXXXXXXXXXXXXX......XXX.........XXXXXXXX........................................XXXXXXXX................'

sured_reg_weakonly__unused 'XXX....................XXXXXXXXXXXXXXX......XXX......................XXXXXXXXXXXXXXXXXXX................XXXXXXXX................'

sured_tid_weakonly__unused 'XXX....................XXXXXXXXXXXXXXX......XXX.........XXXXXXXX........................................XXXXXXXX................'

sust_d_imm_weakonly__unused 'XXX....................XXXXXXXXXXXXXXXXXX...XXX.........XXXXXXXX........................................XXXXXXXX................'

sust_d_reg_weakonly__unused 'XXX....................XXXXXXXXXXXXXXXXXX...XXX......................XXXXXXXXXXXXXXXXXXX................XXXXXXXX................'

sust_d_tid_weakonly__unused 'XXX....................XXXXXXXXXXXXXXXXXX...XXX.........XXXXXXXX........................................XXXXXXXX................'

sust_p_imm_weakonly__unused 'XXX....................XXXXXXXXXXXXXXXXXX...XXX.........XXXXXXXX........................................XXXXXXXX................'

sust_p_reg_weakonly__unused 'XXX....................XXXXXXXXXXXXXXXXXX...XXX......................XXXXXXXXXXXXXXXXXXX................XXXXXXXX................'

sust_p_tid_weakonly__unused 'XXX....................XXXXXXXXXXXXXXXXXX...XXX.........XXXXXXXX........................................XXXXXXXX................'

tex_scr_b_noConst__unused 'XXX....................XXXXXXXXXXXXXX................................XXXXXXXXXXXXXXXXXXX........................................'

tld4_scr_b_noConst__unused 'XXX....................XXXXXXXXXXXXXX.X..............................XXXXXXXXXXXXXXXXXXX........................................'

tld_scr_b_noConst__unused 'XXX....................XXXXXXXXXXXXXX................................XXXXXXXXXXXXXXXXXXX........................................'

vabsdiff4__RCR_RCR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXX...XXXXX.X.X........XXXXX...................XXXXXXXX................................'

vabsdiff4__RRC_RRC_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXX...XXXXX.X.X........XXXXX...................XXXXXXXX................................'

vabsdiff4__RRR_RRR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXX...XXXXX.X.X........XXXXXXXXXXXXXXXXXXXXXXXX........................................'

vabsdiff4__RRuI_RRI_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXX...XXXXX.X.X........................................................................'

vabsdiff4__RuIR_RIR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXX...XXXXX.X.X........................................................................'

vabsdiff__RRuI_RRI_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXX...XXXXXXX.X........................................................................'

vabsdiff__RuIR_RIR_unused 'XXX....................XXXXXXXXXXXXXXXXXXXXX...XXXXXXX.X........................................................................'
  Bank05_70 '.............................................XXXXX..............................................................................'
  Fp16rm_70 '..................................................X.............................................................................'
  Fp16_70 '...................................................X............................................................................'
  Lod_70 '....................................................XXX.........................................................................'
  Lc_70 '.......................................................X........................................................................'
  PredDst_70 '........................................................XXX.....................................................................'
  Dest1_70 '...........................................................XXXXXXXX.............................................................'
  Dc_70 '...................................................................X............................................................'
  Ndp_70 '....................................................................X...........................................................'
  Ndv_70 '.....................................................................X..........................................................'
  ParamA_70 '......................................................................XXX.......................................................'
  WrtMsk4_70 '.........................................................................XXXX...................................................'
  Aoffi_70 '.............................................................................X..................................................'
  Tid_70 '..............................................................................XXXXXXXXXXXXX.....................................'




  Sz3_70 '..............................................XXX...............................................................................'
  Ldcop_70 '.................................................XX.............................................................................'
  E_70 '...................................................X............................................................................'
  PredSrcNot_70 '....................................................X...........................................................................'
  PredSrc_70 '.....................................................XXX........................................................................'
  Imm32_70 '...................................................................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.............................'
  SrcB_70 '...........................................................................................XXXXXXXX.............................'
  SrcA_70 '...................................................................................................XXXXXXXX.....................'
  Dest0_70 '...........................................................................................................XXXXXXXX.............'
  PredNot_70 '...................................................................................................................X............'
  Pred_70 '....................................................................................................................XXX.........'
  Opcode9_70 '.......................................................................................................................XXXXXXXXX'
  Unused_70 '........................XXXXXXXXXXXXXXXXXXX.....................................................................................'
  Opex_70 'XXXXXXXXXXXXXXXXXXXXXXXX........................................................................................................'
  OEUSchedInfo_70 '...................XXXXX........................................................................................................'
  OECoupled_70 '...X............................................................................................................................'
  OEVarLatDest_70 '................XXX.............................................................................................................'
  OEVarLatSrc_70 '.............XXX................................................................................................................'
  OEWaitOnSb_70 '.......XXXXXX...................................................................................................................'
  OEReserved_70 '...XX...........................................................................................................................'
  OETexPhase_70 '.....XX.........................................................................................................................'
  OEReuseA_70 '......X.........................................................................................................................'
  OEReuseB_70 '.....X..........................................................................................................................'
  OEReuseC_70 '....X...........................................................................................................................'
  OEReserved1_70 'XXX.............................................................................................................................'




  NencTEX_70 '...........................................XX...................................................................................'
  NencLD_70 '...........................................XXX......X...XXXXXXXXXXX.............................................................'
  NOT_128b_READY 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........................................................................................'
  NOT_128b_MARIO '........................................XX......................................................................................'

NOP_ENCODING
    ALL = 0;



CLASS "atom__RaRZ"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /AtomsOp:op /COP("EN"):cop /REDATOMSIZE("U32"):sz /SEM_WEAK_STRONG("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private
Predicate:Pu
','Register:Rd
',' [ ZeroRegister("RZ"):Ra + UImm(24/0)*:Ra_offset ]
','Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((op !=`AtomsOp@INVALID9)&&(op !=`AtomsOp@INVALID10)&&(op !=`AtomsOp@INVALID11)&&(op !=`AtomsOp@INVALID12)&&(op !=`AtomsOp@INVALID13)&&(op !=`AtomsOp@INVALID14)&&(op !=`AtomsOp@INVALID15)) :
 "Invalid op field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`REDATOMSIZE@INVALID7)) :
 "Invalid sz field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sem !=`SEM_WEAK_STRONG@INVALID0)&&(sem !=`SEM_WEAK_STRONG@INVALID3)) :
 "Invalid sem field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)==`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F64.RN))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F64.RN))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@ADD))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32")||(sz == `REDATOMSIZE@S32)||(sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@F32.FTZ.RN)||(sz == `REDATOMSIZE@F16x2.RN)||(sz == `REDATOMSIZE@F64.RN))) :
 "Invalid instruction combination ( rule name: ADD)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@MIN)||(op == `AtomsOp@MAX))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32")||(sz == `REDATOMSIZE@S32)||(sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F16x2.RN))) :
 "Invalid instruction combination ( rule name: MIN_MAX)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@INC)||(op == `AtomsOp@DEC))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32"))) :
 "Invalid instruction combination ( rule name: INC_DEC)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@AND)||(op == `AtomsOp@OR)||(op == `AtomsOp@XOR)||(op == `AtomsOp@EXCH))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32")||(sz == `REDATOMSIZE@S32)||(sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64"))) :
 "Invalid instruction combination ( rule name: AND_OR_XOR_EXCH)"
OOR_REG_ERROR
 (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F64.RN))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F64.RN))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@ATOM ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU_UNORDERED_WR ;

OPCODES
        ATOMmio_pipe =  0b1110001010;
        ATOM =  0b1110001010;

ENCODING
!atom__RaRZ_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_4_90_87_op=*op;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=*255;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "atom__RaNonRZ"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /AtomsOp:op /COP("EN"):cop /REDATOMSIZE("U32"):sz /SEM_WEAK_STRONG("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private
Predicate:Pu
','Register:Rd
',' [ NonZeroRegister:Ra + SImm(24/0)*:Ra_offset ]
','Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((op !=`AtomsOp@INVALID9)&&(op !=`AtomsOp@INVALID10)&&(op !=`AtomsOp@INVALID11)&&(op !=`AtomsOp@INVALID12)&&(op !=`AtomsOp@INVALID13)&&(op !=`AtomsOp@INVALID14)&&(op !=`AtomsOp@INVALID15)) :
 "Invalid op field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`REDATOMSIZE@INVALID7)) :
 "Invalid sz field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sem !=`SEM_WEAK_STRONG@INVALID0)&&(sem !=`SEM_WEAK_STRONG@INVALID3)) :
 "Invalid sem field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F64.RN))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F64.RN))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((e == `E@E))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((e == `E@E))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((e == `E@E))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@ADD))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32")||(sz == `REDATOMSIZE@S32)||(sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@F32.FTZ.RN)||(sz == `REDATOMSIZE@F16x2.RN)||(sz == `REDATOMSIZE@F64.RN))) :
 "Invalid instruction combination ( rule name: ADD)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@MIN)||(op == `AtomsOp@MAX))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32")||(sz == `REDATOMSIZE@S32)||(sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F16x2.RN))) :
 "Invalid instruction combination ( rule name: MIN_MAX)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@INC)||(op == `AtomsOp@DEC))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32"))) :
 "Invalid instruction combination ( rule name: INC_DEC)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@AND)||(op == `AtomsOp@OR)||(op == `AtomsOp@XOR)||(op == `AtomsOp@EXCH))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32")||(sz == `REDATOMSIZE@S32)||(sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64"))) :
 "Invalid instruction combination ( rule name: AND_OR_XOR_EXCH)"
OOR_REG_ERROR
 (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F64.RN))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F64.RN))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@ATOM ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU_UNORDERED_WR ;

OPCODES
        ATOMmio_pipe =  0b1110001010;
        ATOM =  0b1110001010;

ENCODING
!atom__RaNonRZ_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_4_90_87_op=*op;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=*255;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "atom_weakonly__RaRZ"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /AtomsOp:op /COP("EN"):cop /REDATOMSIZE("U32"):sz /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private
Predicate:Pu
','Register:Rd
',' [ ZeroRegister("RZ"):Ra + UImm(24/0)*:Ra_offset ]
','Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((op !=`AtomsOp@INVALID9)&&(op !=`AtomsOp@INVALID10)&&(op !=`AtomsOp@INVALID11)&&(op !=`AtomsOp@INVALID12)&&(op !=`AtomsOp@INVALID13)&&(op !=`AtomsOp@INVALID14)&&(op !=`AtomsOp@INVALID15)) :
 "Invalid op field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`REDATOMSIZE@INVALID7)) :
 "Invalid sz field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)==`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F64.RN))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F64.RN))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@ADD))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32")||(sz == `REDATOMSIZE@S32)||(sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@F32.FTZ.RN)||(sz == `REDATOMSIZE@F16x2.RN)||(sz == `REDATOMSIZE@F64.RN))) :
 "Invalid instruction combination ( rule name: ADD)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@MIN)||(op == `AtomsOp@MAX))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32")||(sz == `REDATOMSIZE@S32)||(sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F16x2.RN))) :
 "Invalid instruction combination ( rule name: MIN_MAX)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@INC)||(op == `AtomsOp@DEC))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32"))) :
 "Invalid instruction combination ( rule name: INC_DEC)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@AND)||(op == `AtomsOp@OR)||(op == `AtomsOp@XOR)||(op == `AtomsOp@EXCH))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32")||(sz == `REDATOMSIZE@S32)||(sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64"))) :
 "Invalid instruction combination ( rule name: AND_OR_XOR_EXCH)"
OOR_REG_ERROR
 (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F64.RN))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F64.RN))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@ATOM ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU_UNORDERED_WR ;

OPCODES
        ATOMmio_pipe =  0b1110001010;
        ATOM =  0b1110001010;

ENCODING
!atom_weakonly__RaRZ_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_4_90_87_op=*op;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=*255;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "atom_weakonly__RaNonRZ"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /AtomsOp:op /COP("EN"):cop /REDATOMSIZE("U32"):sz /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private
Predicate:Pu
','Register:Rd
',' [ NonZeroRegister:Ra + SImm(24/0)*:Ra_offset ]
','Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((op !=`AtomsOp@INVALID9)&&(op !=`AtomsOp@INVALID10)&&(op !=`AtomsOp@INVALID11)&&(op !=`AtomsOp@INVALID12)&&(op !=`AtomsOp@INVALID13)&&(op !=`AtomsOp@INVALID14)&&(op !=`AtomsOp@INVALID15)) :
 "Invalid op field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`REDATOMSIZE@INVALID7)) :
 "Invalid sz field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F64.RN))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F64.RN))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((e == `E@E))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((e == `E@E))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((e == `E@E))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@ADD))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32")||(sz == `REDATOMSIZE@S32)||(sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@F32.FTZ.RN)||(sz == `REDATOMSIZE@F16x2.RN)||(sz == `REDATOMSIZE@F64.RN))) :
 "Invalid instruction combination ( rule name: ADD)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@MIN)||(op == `AtomsOp@MAX))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32")||(sz == `REDATOMSIZE@S32)||(sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F16x2.RN))) :
 "Invalid instruction combination ( rule name: MIN_MAX)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@INC)||(op == `AtomsOp@DEC))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32"))) :
 "Invalid instruction combination ( rule name: INC_DEC)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@AND)||(op == `AtomsOp@OR)||(op == `AtomsOp@XOR)||(op == `AtomsOp@EXCH))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32")||(sz == `REDATOMSIZE@S32)||(sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64"))) :
 "Invalid instruction combination ( rule name: AND_OR_XOR_EXCH)"
OOR_REG_ERROR
 (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F64.RN))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F64.RN))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@ATOM ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU_UNORDERED_WR ;

OPCODES
        ATOMmio_pipe =  0b1110001010;
        ATOM =  0b1110001010;

ENCODING
!atom_weakonly__RaNonRZ_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_4_90_87_op=*op;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=*255;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "atom_cas__RaRZ_CAS"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /CAS:cas /COP("EN"):cop /ATOMCASSZ("U32"):sz /SEM_WEAK_STRONG("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private
Predicate:Pu
','Register:Rd
',' [ ZeroRegister("RZ"):Ra + UImm(24/0)*:Ra_offset ]
','Register:Rb
','Register:Rc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`ATOMCASSZ@INVALID3)&&(sz !=`ATOMCASSZ@INVALID4)&&(sz !=`ATOMCASSZ@INVALID5)&&(sz !=`ATOMCASSZ@INVALID6)&&(sz !=`ATOMCASSZ@INVALID7)) :
 "Invalid sz field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sem !=`SEM_WEAK_STRONG@INVALID0)&&(sem !=`SEM_WEAK_STRONG@INVALID3)) :
 "Invalid sem field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)==`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rc)==`Register@RZ)||((Rc)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rc)+((Rc)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@ATOM_CAS ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_C_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU_UNORDERED_WR ;

OPCODES
        ATOMmio_pipe =  0b1110001011;
        ATOM =  0b1110001011;

ENCODING
!atom_cas__RaRZ_CAS_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_1_87_87_cas=*cas;
BITS_1_88_88_spin=*0;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "atom_cas__RaNonRZ_CAS"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /CAS:cas /COP("EN"):cop /ATOMCASSZ("U32"):sz /SEM_WEAK_STRONG("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private
Predicate:Pu
','Register:Rd
',' [ NonZeroRegister:Ra + SImm(24/0)*:Ra_offset ]
','Register:Rb
','Register:Rc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`ATOMCASSZ@INVALID3)&&(sz !=`ATOMCASSZ@INVALID4)&&(sz !=`ATOMCASSZ@INVALID5)&&(sz !=`ATOMCASSZ@INVALID6)&&(sz !=`ATOMCASSZ@INVALID7)) :
 "Invalid sz field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sem !=`SEM_WEAK_STRONG@INVALID0)&&(sem !=`SEM_WEAK_STRONG@INVALID3)) :
 "Invalid sem field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((e == `E@E))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((e == `E@E))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((e == `E@E))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rc)==`Register@RZ)||((Rc)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rc)+((Rc)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@ATOM_CAS ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_C_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU_UNORDERED_WR ;

OPCODES
        ATOMmio_pipe =  0b1110001011;
        ATOM =  0b1110001011;

ENCODING
!atom_cas__RaNonRZ_CAS_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_1_87_87_cas=*cas;
BITS_1_88_88_spin=*0;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "atom_cas__RaRZ_CAST"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /CASTONLY:cas /AtomsSPIN("noatomsspin"):spin /COP("EN"):cop /ATOMCASSZ("U32"):sz /SEM_WEAK_STRONG("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private
Predicate:Pu
','Register:Rd
',' [ ZeroRegister("RZ"):Ra + UImm(24/0)*:Ra_offset ]
','Register:Rb
','Register:Rc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`ATOMCASSZ@INVALID3)&&(sz !=`ATOMCASSZ@INVALID4)&&(sz !=`ATOMCASSZ@INVALID5)&&(sz !=`ATOMCASSZ@INVALID6)&&(sz !=`ATOMCASSZ@INVALID7)) :
 "Invalid sz field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sem !=`SEM_WEAK_STRONG@INVALID0)&&(sem !=`SEM_WEAK_STRONG@INVALID3)) :
 "Invalid sem field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)==`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rc)==`Register@RZ)||((Rc)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rc)+((Rc)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@ATOM_CAS ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_C_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU_UNORDERED_WR ;

OPCODES
        ATOMmio_pipe =  0b1110001011;
        ATOM =  0b1110001011;

ENCODING
!atom_cas__RaRZ_CAST_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_1_87_87_cas=*cas;
BITS_1_88_88_spin=*spin;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "atom_cas__RaNonRZ_CAST"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /CASTONLY:cas /AtomsSPIN("noatomsspin"):spin /COP("EN"):cop /ATOMCASSZ("U32"):sz /SEM_WEAK_STRONG("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private
Predicate:Pu
','Register:Rd
',' [ NonZeroRegister:Ra + SImm(24/0)*:Ra_offset ]
','Register:Rb
','Register:Rc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`ATOMCASSZ@INVALID3)&&(sz !=`ATOMCASSZ@INVALID4)&&(sz !=`ATOMCASSZ@INVALID5)&&(sz !=`ATOMCASSZ@INVALID6)&&(sz !=`ATOMCASSZ@INVALID7)) :
 "Invalid sz field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sem !=`SEM_WEAK_STRONG@INVALID0)&&(sem !=`SEM_WEAK_STRONG@INVALID3)) :
 "Invalid sem field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((e == `E@E))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((e == `E@E))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((e == `E@E))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rc)==`Register@RZ)||((Rc)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rc)+((Rc)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@ATOM_CAS ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_C_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU_UNORDERED_WR ;

OPCODES
        ATOMmio_pipe =  0b1110001011;
        ATOM =  0b1110001011;

ENCODING
!atom_cas__RaNonRZ_CAST_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_1_87_87_cas=*cas;
BITS_1_88_88_spin=*spin;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "atom_cas_weakonly__RaRZ_CAS"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /CAS:cas /COP("EN"):cop /ATOMCASSZ("U32"):sz /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private
Predicate:Pu
','Register:Rd
',' [ ZeroRegister("RZ"):Ra + UImm(24/0)*:Ra_offset ]
','Register:Rb
','Register:Rc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`ATOMCASSZ@INVALID3)&&(sz !=`ATOMCASSZ@INVALID4)&&(sz !=`ATOMCASSZ@INVALID5)&&(sz !=`ATOMCASSZ@INVALID6)&&(sz !=`ATOMCASSZ@INVALID7)) :
 "Invalid sz field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)==`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rc)==`Register@RZ)||((Rc)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rc)+((Rc)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@ATOM_CAS ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_C_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU_UNORDERED_WR ;

OPCODES
        ATOMmio_pipe =  0b1110001011;
        ATOM =  0b1110001011;

ENCODING
!atom_cas_weakonly__RaRZ_CAS_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_1_87_87_cas=*cas;
BITS_1_88_88_spin=*0;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "atom_cas_weakonly__RaNonRZ_CAS"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /CAS:cas /COP("EN"):cop /ATOMCASSZ("U32"):sz /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private
Predicate:Pu
','Register:Rd
',' [ NonZeroRegister:Ra + SImm(24/0)*:Ra_offset ]
','Register:Rb
','Register:Rc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`ATOMCASSZ@INVALID3)&&(sz !=`ATOMCASSZ@INVALID4)&&(sz !=`ATOMCASSZ@INVALID5)&&(sz !=`ATOMCASSZ@INVALID6)&&(sz !=`ATOMCASSZ@INVALID7)) :
 "Invalid sz field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((e == `E@E))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((e == `E@E))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((e == `E@E))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rc)==`Register@RZ)||((Rc)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rc)+((Rc)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@ATOM_CAS ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_C_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU_UNORDERED_WR ;

OPCODES
        ATOMmio_pipe =  0b1110001011;
        ATOM =  0b1110001011;

ENCODING
!atom_cas_weakonly__RaNonRZ_CAS_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_1_87_87_cas=*cas;
BITS_1_88_88_spin=*0;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "atom_cas_weakonly__RaRZ_CAST"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /CASTONLY:cas /AtomsSPIN("noatomsspin"):spin /COP("EN"):cop /ATOMCASSZ("U32"):sz /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private
Predicate:Pu
','Register:Rd
',' [ ZeroRegister("RZ"):Ra + UImm(24/0)*:Ra_offset ]
','Register:Rb
','Register:Rc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`ATOMCASSZ@INVALID3)&&(sz !=`ATOMCASSZ@INVALID4)&&(sz !=`ATOMCASSZ@INVALID5)&&(sz !=`ATOMCASSZ@INVALID6)&&(sz !=`ATOMCASSZ@INVALID7)) :
 "Invalid sz field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)==`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rc)==`Register@RZ)||((Rc)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rc)+((Rc)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@ATOM_CAS ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_C_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU_UNORDERED_WR ;

OPCODES
        ATOMmio_pipe =  0b1110001011;
        ATOM =  0b1110001011;

ENCODING
!atom_cas_weakonly__RaRZ_CAST_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_1_87_87_cas=*cas;
BITS_1_88_88_spin=*spin;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "atom_cas_weakonly__RaNonRZ_CAST"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /CASTONLY:cas /AtomsSPIN("noatomsspin"):spin /COP("EN"):cop /ATOMCASSZ("U32"):sz /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private
Predicate:Pu
','Register:Rd
',' [ NonZeroRegister:Ra + SImm(24/0)*:Ra_offset ]
','Register:Rb
','Register:Rc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`ATOMCASSZ@INVALID3)&&(sz !=`ATOMCASSZ@INVALID4)&&(sz !=`ATOMCASSZ@INVALID5)&&(sz !=`ATOMCASSZ@INVALID6)&&(sz !=`ATOMCASSZ@INVALID7)) :
 "Invalid sz field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((e == `E@E))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((e == `E@E))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((e == `E@E))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rc)==`Register@RZ)||((Rc)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rc)+((Rc)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@ATOM_CAS ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_C_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU_UNORDERED_WR ;

OPCODES
        ATOMmio_pipe =  0b1110001011;
        ATOM =  0b1110001011;

ENCODING
!atom_cas_weakonly__RaNonRZ_CAST_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_1_87_87_cas=*cas;
BITS_1_88_88_spin=*spin;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "atoms__RaRZ"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /AtomsOp:op /ATOMCASSZ("U32"):sz
Register:Rd
',' [ ZeroRegister("RZ"):Ra + UImm(24/0)*:Ra_offset ]
','Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS)) :
 "Can only be used with CS"
ILLEGAL_INSTR_ENCODING_ERROR
 ((op !=`AtomsOp@INVALID9)&&(op !=`AtomsOp@INVALID10)&&(op !=`AtomsOp@INVALID11)&&(op !=`AtomsOp@INVALID12)&&(op !=`AtomsOp@INVALID13)&&(op !=`AtomsOp@INVALID14)&&(op !=`AtomsOp@INVALID15)) :
 "Invalid op field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`ATOMCASSZ@INVALID3)) :
 "Invalid sz field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)==`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@ADD)||(op == `AtomsOp@MIN)||(op == `AtomsOp@MAX)||(op == `AtomsOp@AND)||(op == `AtomsOp@OR)||(op == `AtomsOp@XOR))) -> (((sz == `ATOMCASSZ@U32)||(sz == `ATOMCASSZ@"32")||(sz == `ATOMCASSZ@S32))) :
 "Invalid instruction combination ( rule name: ADD_MIN_MAX_AND_OR_XOR)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@INC)||(op == `AtomsOp@DEC))) -> (((sz == `ATOMCASSZ@U32)||(sz == `ATOMCASSZ@"32"))) :
 "Invalid instruction combination ( rule name: INC_DEC)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@EXCH))) -> (((sz == `ATOMCASSZ@U32)||(sz == `ATOMCASSZ@"32")||(sz == `ATOMCASSZ@S32)||(sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) :
 "Invalid instruction combination ( rule name: EXCH)"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@ATOMS ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_CS)+0 ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SHARED_ADDRESS);

PREDICATES
 IDEST_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        ATOMSmio_pipe =  0b1110001100;
        ATOMS =  0b1110001100;

ENCODING
!atoms__RaRZ_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_4_90_87_op=*op;
BITS_2_74_73_sz=sz;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=*255;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "atoms__RaNonRZ"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /AtomsOp:op /ATOMCASSZ("U32"):sz
Register:Rd
',' [ NonZeroRegister:Ra + SImm(24/0)*:Ra_offset ]
','Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS)) :
 "Can only be used with CS"
ILLEGAL_INSTR_ENCODING_ERROR
 ((op !=`AtomsOp@INVALID9)&&(op !=`AtomsOp@INVALID10)&&(op !=`AtomsOp@INVALID11)&&(op !=`AtomsOp@INVALID12)&&(op !=`AtomsOp@INVALID13)&&(op !=`AtomsOp@INVALID14)&&(op !=`AtomsOp@INVALID15)) :
 "Invalid op field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`ATOMCASSZ@INVALID3)) :
 "Invalid sz field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@ADD)||(op == `AtomsOp@MIN)||(op == `AtomsOp@MAX)||(op == `AtomsOp@AND)||(op == `AtomsOp@OR)||(op == `AtomsOp@XOR))) -> (((sz == `ATOMCASSZ@U32)||(sz == `ATOMCASSZ@"32")||(sz == `ATOMCASSZ@S32))) :
 "Invalid instruction combination ( rule name: ADD_MIN_MAX_AND_OR_XOR)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@INC)||(op == `AtomsOp@DEC))) -> (((sz == `ATOMCASSZ@U32)||(sz == `ATOMCASSZ@"32"))) :
 "Invalid instruction combination ( rule name: INC_DEC)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@EXCH))) -> (((sz == `ATOMCASSZ@U32)||(sz == `ATOMCASSZ@"32")||(sz == `ATOMCASSZ@S32)||(sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) :
 "Invalid instruction combination ( rule name: EXCH)"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@ATOMS ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_CS)+0 ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SHARED_ADDRESS);

PREDICATES
 IDEST_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        ATOMSmio_pipe =  0b1110001100;
        ATOMS =  0b1110001100;

ENCODING
!atoms__RaNonRZ_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_4_90_87_op=*op;
BITS_2_74_73_sz=sz;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=*255;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "atoms_cas__RaRZ_CAS"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /CAS:cas /ATOMCASSZ("U32"):sz
Register:Rd
',' [ ZeroRegister("RZ"):Ra + UImm(24/0)*:Ra_offset ]
','Register:Rb
','Register:Rc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS)) :
 "Can only be used with CS"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`ATOMCASSZ@INVALID3)) :
 "Invalid sz field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)==`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rc)==`Register@RZ)||((Rc)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rc)+((Rc)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@ATOMS_CAS ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_CS)+0 ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SHARED_ADDRESS);

PREDICATES
 IDEST_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_C_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        ATOMSmio_pipe =  0b1110001101;
        ATOMS =  0b1110001101;

ENCODING
!atoms_cas__RaRZ_CAS_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_87_87_cas=*cas;
BITS_1_88_88_spin=*0;
BITS_2_74_73_sz=sz;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "atoms_cas__RaNonRZ_CAS"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /CAS:cas /ATOMCASSZ("U32"):sz
Register:Rd
',' [ NonZeroRegister:Ra + SImm(24/0)*:Ra_offset ]
','Register:Rb
','Register:Rc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS)) :
 "Can only be used with CS"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`ATOMCASSZ@INVALID3)) :
 "Invalid sz field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rc)==`Register@RZ)||((Rc)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rc)+((Rc)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@ATOMS_CAS ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_CS)+0 ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SHARED_ADDRESS);

PREDICATES
 IDEST_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_C_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        ATOMSmio_pipe =  0b1110001101;
        ATOMS =  0b1110001101;

ENCODING
!atoms_cas__RaNonRZ_CAS_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_87_87_cas=*cas;
BITS_1_88_88_spin=*0;
BITS_2_74_73_sz=sz;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "atoms_cas__RaRZ_CAST"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /CASTONLY:cas /AtomsSPIN("noatomsspin"):spin /ATOMCASSZ("U32"):sz
Register:Rd
',' [ ZeroRegister("RZ"):Ra + UImm(24/0)*:Ra_offset ]
','Register:Rb
','Register:Rc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS)) :
 "Can only be used with CS"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`ATOMCASSZ@INVALID3)) :
 "Invalid sz field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)==`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rc)==`Register@RZ)||((Rc)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rc)+((Rc)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@ATOMS_CAS ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_CS)+0 ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SHARED_ADDRESS);

PREDICATES
 IDEST_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_C_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        ATOMSmio_pipe =  0b1110001101;
        ATOMS =  0b1110001101;

ENCODING
!atoms_cas__RaRZ_CAST_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_87_87_cas=*cas;
BITS_1_88_88_spin=*spin;
BITS_2_74_73_sz=sz;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "atoms_cas__RaNonRZ_CAST"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /CASTONLY:cas /AtomsSPIN("noatomsspin"):spin /ATOMCASSZ("U32"):sz
Register:Rd
',' [ NonZeroRegister:Ra + SImm(24/0)*:Ra_offset ]
','Register:Rb
','Register:Rc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS)) :
 "Can only be used with CS"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`ATOMCASSZ@INVALID3)) :
 "Invalid sz field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rc)==`Register@RZ)||((Rc)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rc)+((Rc)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@ATOMS_CAS ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_CS)+0 ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SHARED_ADDRESS);

PREDICATES
 IDEST_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_C_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        ATOMSmio_pipe =  0b1110001101;
        ATOMS =  0b1110001101;

ENCODING
!atoms_cas__RaNonRZ_CAST_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_87_87_cas=*cas;
BITS_1_88_88_spin=*spin;
BITS_2_74_73_sz=sz;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "ld__sImmOffset"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /COP("EN"):cop /SIZE3("32"):sz /SEM("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private
Register:Rd
',' [ NonZeroRegister:Ra + SImm(32/0)*:Ra_offset ]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rd)+((Rd)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((e == `E@E))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((e == `E@E))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((e == `E@E))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU_UNORDERED_WR ;

OPCODES
        LDmio_pipe =  0b100110000000;
        LD =  0b100110000000;

ENCODING
!ld__sImmOffset_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_1_87_87_cas=0;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_32_63_32_Ra_offset=Ra_offset;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "ld__uImmOffset"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /COP("EN"):cop /SIZE3("32"):sz /SEM("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private
Register:Rd
',' [ ZeroRegister("RZ"):Ra + UImm(32/0)*:Ra_offset ]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)==`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rd)+((Rd)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU_UNORDERED_WR ;

OPCODES
        LDmio_pipe =  0b100110000000;
        LD =  0b100110000000;

ENCODING
!ld__uImmOffset_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_1_87_87_cas=0;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_32_63_32_Ra_offset=Ra_offset;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "ld_weakonly__sImmOffset"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /COP("EN"):cop /SIZE3("32"):sz /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private
Register:Rd
',' [ NonZeroRegister:Ra + SImm(32/0)*:Ra_offset ]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rd)+((Rd)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((e == `E@E))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((e == `E@E))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((e == `E@E))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU_UNORDERED_WR ;

OPCODES
        LDmio_pipe =  0b100110000000;
        LD =  0b100110000000;

ENCODING
!ld_weakonly__sImmOffset_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_1_87_87_cas=0;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_32_63_32_Ra_offset=Ra_offset;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "ld_weakonly__uImmOffset"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /COP("EN"):cop /SIZE3("32"):sz /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private
Register:Rd
',' [ ZeroRegister("RZ"):Ra + UImm(32/0)*:Ra_offset ]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)==`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rd)+((Rd)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU_UNORDERED_WR ;

OPCODES
        LDmio_pipe =  0b100110000000;
        LD =  0b100110000000;

ENCODING
!ld_weakonly__uImmOffset_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_1_87_87_cas=0;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_32_63_32_Ra_offset=Ra_offset;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "ld_zd__sImmOffset"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /COP("EN"):cop /SIZE3("32"):sz /SEM("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private /ZDONLY:zd
Predicate:Pu
','Register:Rd
',' [ NonZeroRegister:Ra + SImm(32/0)*:Ra_offset ]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rd)+((Rd)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((e == `E@E))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((e == `E@E))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((e == `E@E))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU_UNORDERED_WR ;

OPCODES
        LDmio_pipe =  0b100110000000;
        LD =  0b100110000000;

ENCODING
!ld_zd__sImmOffset_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_1_87_87_cas=*zd;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_32_63_32_Ra_offset=Ra_offset;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "ld_zd__uImmOffset"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /COP("EN"):cop /SIZE3("32"):sz /SEM("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private /ZDONLY:zd
Predicate:Pu
','Register:Rd
',' [ ZeroRegister("RZ"):Ra + UImm(32/0)*:Ra_offset ]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)==`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rd)+((Rd)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU_UNORDERED_WR ;

OPCODES
        LDmio_pipe =  0b100110000000;
        LD =  0b100110000000;

ENCODING
!ld_zd__uImmOffset_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_1_87_87_cas=*zd;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_32_63_32_Ra_offset=Ra_offset;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "ld_weakonly_zd__sImmOffset"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /COP("EN"):cop /SIZE3("32"):sz /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private /ZDONLY:zd
Predicate:Pu
','Register:Rd
',' [ NonZeroRegister:Ra + SImm(32/0)*:Ra_offset ]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rd)+((Rd)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((e == `E@E))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((e == `E@E))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((e == `E@E))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU_UNORDERED_WR ;

OPCODES
        LDmio_pipe =  0b100110000000;
        LD =  0b100110000000;

ENCODING
!ld_weakonly_zd__sImmOffset_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_1_87_87_cas=*zd;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_32_63_32_Ra_offset=Ra_offset;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "ld_weakonly_zd__uImmOffset"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /COP("EN"):cop /SIZE3("32"):sz /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private /ZDONLY:zd
Predicate:Pu
','Register:Rd
',' [ ZeroRegister("RZ"):Ra + UImm(32/0)*:Ra_offset ]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)==`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rd)+((Rd)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU_UNORDERED_WR ;

OPCODES
        LDmio_pipe =  0b100110000000;
        LD =  0b100110000000;

ENCODING
!ld_weakonly_zd__uImmOffset_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_1_87_87_cas=*zd;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_32_63_32_Ra_offset=Ra_offset;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "lds__sImmOffset"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LDSSIZE_DIST("32"):sz
Register:Rd
',' [ NonZeroRegister:Ra + SImm(24/0)*:Ra_offset ]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS)) :
 "Can only be used with CS"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `LDSSIZE_DIST@"64")||(sz == `LDSSIZE_DIST@U.64))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `LDSSIZE_DIST@"64")||(sz == `LDSSIZE_DIST@U.64))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `LDSSIZE_DIST@"128")||(sz == `LDSSIZE_DIST@U.128))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `LDSSIZE_DIST@"128")||(sz == `LDSSIZE_DIST@U.128))) -> (((((Rd)+((Rd)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_CS)+0 ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SHARED_ADDRESS);

PREDICATES
 IDEST_SIZE = ((sz >= 8) ? ((sz <= 12) ? 1 : ((sz == 13) ? 2 : 4 )) : ((sz <= 4) ? 1 : ((sz == 5) ? 2 : 4 )))*32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        LDSmio_pipe =  0b100110000100;
        LDS =  0b100110000100;

ENCODING
!lds__sImmOffset_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_4_76_73_sz=*sz;
BITS_1_87_87_cas=0;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "lds__uImmOffset"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LDSSIZE_DIST("32"):sz
Register:Rd
',' [ ZeroRegister("RZ"):Ra + UImm(24/0)*:Ra_offset ]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS)) :
 "Can only be used with CS"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)==`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `LDSSIZE_DIST@"64")||(sz == `LDSSIZE_DIST@U.64))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `LDSSIZE_DIST@"64")||(sz == `LDSSIZE_DIST@U.64))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `LDSSIZE_DIST@"128")||(sz == `LDSSIZE_DIST@U.128))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `LDSSIZE_DIST@"128")||(sz == `LDSSIZE_DIST@U.128))) -> (((((Rd)+((Rd)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_CS)+0 ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SHARED_ADDRESS);

PREDICATES
 IDEST_SIZE = ((sz >= 8) ? ((sz <= 12) ? 1 : ((sz == 13) ? 2 : 4 )) : ((sz <= 4) ? 1 : ((sz == 5) ? 2 : 4 )))*32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        LDSmio_pipe =  0b100110000100;
        LDS =  0b100110000100;

ENCODING
!lds__uImmOffset_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_4_76_73_sz=*sz;
BITS_1_87_87_cas=0;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "lds_zd__sImmOffset"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LDSSIZE_DIST("32"):sz /ZDONLY:zd
Predicate:Pu
','Register:Rd
',' [ NonZeroRegister:Ra + SImm(24/0)*:Ra_offset ]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS)) :
 "Can only be used with CS"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `LDSSIZE_DIST@"64")||(sz == `LDSSIZE_DIST@U.64))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `LDSSIZE_DIST@"64")||(sz == `LDSSIZE_DIST@U.64))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `LDSSIZE_DIST@"128")||(sz == `LDSSIZE_DIST@U.128))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `LDSSIZE_DIST@"128")||(sz == `LDSSIZE_DIST@U.128))) -> (((((Rd)+((Rd)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_CS)+0 ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SHARED_ADDRESS);

PREDICATES
 IDEST_SIZE = ((sz >= 8) ? ((sz <= 12) ? 1 : ((sz == 13) ? 2 : 4 )) : ((sz <= 4) ? 1 : ((sz == 5) ? 2 : 4 )))*32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        LDSmio_pipe =  0b100110000100;
        LDS =  0b100110000100;

ENCODING
!lds_zd__sImmOffset_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_4_76_73_sz=*sz;
BITS_1_87_87_cas=*zd;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "lds_zd__uImmOffset"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LDSSIZE_DIST("32"):sz /ZDONLY:zd
Predicate:Pu
','Register:Rd
',' [ ZeroRegister("RZ"):Ra + UImm(24/0)*:Ra_offset ]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS)) :
 "Can only be used with CS"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)==`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `LDSSIZE_DIST@"64")||(sz == `LDSSIZE_DIST@U.64))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `LDSSIZE_DIST@"64")||(sz == `LDSSIZE_DIST@U.64))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `LDSSIZE_DIST@"128")||(sz == `LDSSIZE_DIST@U.128))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `LDSSIZE_DIST@"128")||(sz == `LDSSIZE_DIST@U.128))) -> (((((Rd)+((Rd)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_CS)+0 ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SHARED_ADDRESS);

PREDICATES
 IDEST_SIZE = ((sz >= 8) ? ((sz <= 12) ? 1 : ((sz == 13) ? 2 : 4 )) : ((sz <= 4) ? 1 : ((sz == 5) ? 2 : 4 )))*32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        LDSmio_pipe =  0b100110000100;
        LDS =  0b100110000100;

ENCODING
!lds_zd__uImmOffset_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_4_76_73_sz=*sz;
BITS_1_87_87_cas=*zd;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "match__ANY"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ANYONLY:op /MATCH_SZ("U32"):sz
Register:Rd
','Register:Ra
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `MATCH_SZ@U64))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `MATCH_SZ@U64))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = sz ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_UNORDERED ;

OPCODES
        MATCHmio_pipe =  0b1110100001;
        MATCH =  0b1110100001;

ENCODING
!match__ANY_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_79_79_op=*op;
BITS_1_73_73_sz=sz;
BITS_3_83_81_Pu=*7;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "match__ALL"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ALLOnly:op /MATCH_SZ("U32"):sz
Predicate:Pu
','Register:Rd
','Register:Ra
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `MATCH_SZ@U64))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `MATCH_SZ@U64))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = sz ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_UNORDERED ;

OPCODES
        MATCHmio_pipe =  0b1110100001;
        MATCH =  0b1110100001;

ENCODING
!match__ALL_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_79_79_op=*op;
BITS_1_73_73_sz=sz;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "qspc__RaRZ"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /QUERY_SPACE:space
Predicate:Pu
','Register:Rd
',' [ ZeroRegister("RZ"):Ra + UImm(24/0)*:Ra_offset ]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((space !=`QUERY_SPACE@INVALID3)) :
 "Invalid space field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)==`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        QSPCmio_pipe =  0b1110101010;
        QSPC =  0b1110101010;

ENCODING
!qspc__RaRZ_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_2_74_73_sz=space;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "qspc__RaNonRZ"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /QUERY_SPACE:space
Predicate:Pu
','Register:Rd
',' [ NonZeroRegister:Ra + SImm(24/0)*:Ra_offset ]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((space !=`QUERY_SPACE@INVALID3)) :
 "Invalid space field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((e == `E@E))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((e == `E@E))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((e == `E@E))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        QSPCmio_pipe =  0b1110101010;
        QSPC =  0b1110101010;

ENCODING
!qspc__RaNonRZ_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_2_74_73_sz=space;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "qspc_RdOnly__RaRZ"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /QUERY_SPACE:space
Register:Rd
',' [ ZeroRegister("RZ"):Ra + UImm(24/0)*:Ra_offset ]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((space !=`QUERY_SPACE@INVALID3)) :
 "Invalid space field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)==`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        QSPCmio_pipe =  0b1110101010;
        QSPC =  0b1110101010;

ENCODING
!qspc_RdOnly__RaRZ_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_2_74_73_sz=space;
BITS_3_83_81_Pu=*7;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "qspc_RdOnly__RaNonRZ"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /QUERY_SPACE:space
Register:Rd
',' [ NonZeroRegister:Ra + SImm(24/0)*:Ra_offset ]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((space !=`QUERY_SPACE@INVALID3)) :
 "Invalid space field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((e == `E@E))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((e == `E@E))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((e == `E@E))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        QSPCmio_pipe =  0b1110101010;
        QSPC =  0b1110101010;

ENCODING
!qspc_RdOnly__RaNonRZ_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_2_74_73_sz=space;
BITS_3_83_81_Pu=*7;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "qspc_PuOnly__RaRZ"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /QUERY_SPACE:space
Predicate:Pu
',' [ ZeroRegister("RZ"):Ra + UImm(24/0)*:Ra_offset ]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((space !=`QUERY_SPACE@INVALID3)) :
 "Invalid space field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)==`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        QSPCmio_pipe =  0b1110101010;
        QSPC =  0b1110101010;

ENCODING
!qspc_PuOnly__RaRZ_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_2_74_73_sz=space;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=*255;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "qspc_PuOnly__RaNonRZ"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /QUERY_SPACE:space
Predicate:Pu
',' [ NonZeroRegister:Ra + SImm(24/0)*:Ra_offset ]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((space !=`QUERY_SPACE@INVALID3)) :
 "Invalid space field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((e == `E@E))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((e == `E@E))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((e == `E@E))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        QSPCmio_pipe =  0b1110101010;
        QSPC =  0b1110101010;

ENCODING
!qspc_PuOnly__RaNonRZ_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_2_74_73_sz=space;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=*255;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "st__sImmOffset"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /COP("EN"):cop /SIZE3("32"):sz /SEM_WEAK_STRONG_MMIO("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private
 [ NonZeroRegister:Ra + SImm(32/0)*:Ra_offset ]
','Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sem !=`SEM_WEAK_STRONG_MMIO@INVALID0)) :
 "Invalid sem field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((e == `E@E))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((e == `E@E))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((e == `E@E))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        STmio_pipe =  0b1110000101;
        ST =  0b1110000101;

ENCODING
!st__sImmOffset_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_8_31_24_Ra=*Ra;
BITS_32_63_32_Ra_offset=Ra_offset;
BITS_8_71_64_Rc=Rb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "st__uImmOffset"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /COP("EN"):cop /SIZE3("32"):sz /SEM_WEAK_STRONG_MMIO("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private
 [ ZeroRegister("RZ"):Ra + UImm(32/0)*:Ra_offset ]
','Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sem !=`SEM_WEAK_STRONG_MMIO@INVALID0)) :
 "Invalid sem field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)==`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        STmio_pipe =  0b1110000101;
        ST =  0b1110000101;

ENCODING
!st__uImmOffset_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_8_31_24_Ra=*Ra;
BITS_32_63_32_Ra_offset=Ra_offset;
BITS_8_71_64_Rc=Rb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "st_weakonly__sImmOffset"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /COP("EN"):cop /SIZE3("32"):sz /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private
 [ NonZeroRegister:Ra + SImm(32/0)*:Ra_offset ]
','Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((e == `E@E))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((e == `E@E))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((e == `E@E))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        STmio_pipe =  0b1110000101;
        ST =  0b1110000101;

ENCODING
!st_weakonly__sImmOffset_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_8_31_24_Ra=*Ra;
BITS_32_63_32_Ra_offset=Ra_offset;
BITS_8_71_64_Rc=Rb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "st_weakonly__uImmOffset"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /COP("EN"):cop /SIZE3("32"):sz /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private
 [ ZeroRegister("RZ"):Ra + UImm(32/0)*:Ra_offset ]
','Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)==`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        STmio_pipe =  0b1110000101;
        ST =  0b1110000101;

ENCODING
!st_weakonly__uImmOffset_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_8_31_24_Ra=*Ra;
BITS_32_63_32_Ra_offset=Ra_offset;
BITS_8_71_64_Rc=Rb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "sts__sImmOffset"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /SZ_U8_S8_U16_S16_32_64_128("32"):sz
 [ NonZeroRegister:Ra + SImm(24/0)*:Ra_offset ]
','Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS)) :
 "Can only be used with CS"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`SZ_U8_S8_U16_S16_32_64_128@INVALID7)) :
 "Invalid sz field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"64"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"64"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"128"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"128"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_CS)+0 ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SHARED_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        STSmio_pipe =  0b1110001000;
        STS =  0b1110001000;

ENCODING
!sts__sImmOffset_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_75_73_sz=sz;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "sts__uImmOffset"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /SZ_U8_S8_U16_S16_32_64_128("32"):sz
 [ ZeroRegister("RZ"):Ra + UImm(24/0)*:Ra_offset ]
','Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS)) :
 "Can only be used with CS"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`SZ_U8_S8_U16_S16_32_64_128@INVALID7)) :
 "Invalid sz field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)==`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"64"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"64"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"128"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"128"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_CS)+0 ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SHARED_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        STSmio_pipe =  0b1110001000;
        STS =  0b1110001000;

ENCODING
!sts__uImmOffset_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_75_73_sz=sz;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "bmov_clear__Rd"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ONLY32:sz /CLEAR_DIST("noclear_dist"):clear
Register:Rd
','CBU_STATE_DIST:cbu_state
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
ILLEGAL_INSTR_ENCODING_ERROR
 (((clear == `CLEAR_DIST@CLEAR))) -> (((cbu_state == `CBU_STATE_DIST@B14)||(cbu_state == `CBU_STATE_DIST@B15)||(cbu_state == `CBU_STATE_DIST@B12)||(cbu_state == `CBU_STATE_DIST@B13)||(cbu_state == `CBU_STATE_DIST@B10)||(cbu_state == `CBU_STATE_DIST@B11)||(cbu_state == `CBU_STATE_DIST@B4)||(cbu_state == `CBU_STATE_DIST@B5)||(cbu_state == `CBU_STATE_DIST@B6)||(cbu_state == `CBU_STATE_DIST@B7)||(cbu_state == `CBU_STATE_DIST@B0)||(cbu_state == `CBU_STATE_DIST@B1)||(cbu_state == `CBU_STATE_DIST@B2)||(cbu_state == `CBU_STATE_DIST@B3)||(cbu_state == `CBU_STATE_DIST@B8)||(cbu_state == `CBU_STATE_DIST@B9))) :
 "Invalid instruction combination ( rule name: onlyBR)"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_ILLEGAL_INSTR_PARAM)+(1<<IERROR_ILLEGAL_INSTR_PARAM2)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@BMOV_clear_Rd ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_UNORDERED ;

OPCODES
        BMOVcbu_pipe =  0b1101010101;
        BMOV =  0b1101010101;

ENCODING
!bmov_clear__Rd_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_84_84_clear=*clear;
BITS_8_23_16_Rd=Rd;
BITS_6_29_24_cbu_state=*cbu_state;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "bmov_clear_bd__Bd"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ONLY32:sz
BD:barReg
','CBU_STATE_NONBAR_DIST:cbu_state
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_ILLEGAL_INSTR_PARAM)+(1<<IERROR_ILLEGAL_INSTR_PARAM2)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@BMOV_clear_Bd ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_UNORDERED ;

OPCODES
        BMOVcbu_pipe =  0b111101010101;
        BMOV =  0b111101010101;

ENCODING
!bmov_clear_bd__Bd_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_84_84_clear=0;
BITS_4_19_16_barReg=barReg;
BITS_6_29_24_cbu_state=*cbu_state;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "bmov_clear_barrier_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ONLY32:sz /CLEARONLY:clear
BD:barReg
','BD:Ba
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_ILLEGAL_INSTR_PARAM)+(1<<IERROR_ILLEGAL_INSTR_PARAM2)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@BMOV_clear_Bd ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_UNORDERED ;

OPCODES
        BMOVcbu_pipe =  0b111101010101;
        BMOV =  0b111101010101;

ENCODING
!bmov_clear_barrier__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_84_84_clear=*clear;
BITS_4_19_16_barReg=barReg;
BITS_6_29_24_cbu_state=*Ba;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "bmov_pquad__RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ONLY32:sz /PQUAD("nopquad"):pquad
CBU_STATE_DIST:cbu_state
','Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
ILLEGAL_INSTR_ENCODING_ERROR
 (((pquad == `PQUAD@PQUAD))) -> (((cbu_state == `CBU_STATE_DIST@MACTIVE))) :
 "Invalid instruction combination ( rule name: pquad)"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_ILLEGAL_INSTR_PARAM)+(1<<IERROR_ILLEGAL_INSTR_PARAM2)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_MISALIGNED)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@BMOV_pquad_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_UNORDERED ;

OPCODES
        BMOVcbu_pipe =  0b1101010110;
        BMOV =  0b1101010110;

ENCODING
!bmov_pquad__RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_84_84_clear=pquad;
BITS_6_29_24_cbu_state=cbu_state;
BITS_8_39_32_Rb=Rb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "bmov_pquad__RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ONLY32:sz /PQUAD("nopquad"):pquad
CBU_STATE_DIST:cbu_state
','UImm(32)*:Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
ILLEGAL_INSTR_ENCODING_ERROR
 (((pquad == `PQUAD@PQUAD))) -> (((cbu_state == `CBU_STATE_DIST@MACTIVE))) :
 "Invalid instruction combination ( rule name: pquad)"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_ILLEGAL_INSTR_PARAM)+(1<<IERROR_ILLEGAL_INSTR_PARAM2)+(1<<IERROR_PC_MISALIGNED)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@BMOV_pquad_I ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_UNORDERED ;

OPCODES
        BMOVcbu_pipe =  0b100101010110;
        BMOV =  0b100101010110;

ENCODING
!bmov_pquad__RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_84_84_clear=pquad;
BITS_6_29_24_cbu_state=cbu_state;
BITS_32_63_32_Ra_offset=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "bmov_pquad__RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ONLY32:sz /PQUAD("nopquad"):pquad
CBU_STATE_DIST:cbu_state
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
ILLEGAL_INSTR_ENCODING_ERROR
 (((pquad == `PQUAD@PQUAD))) -> (((cbu_state == `CBU_STATE_DIST@MACTIVE))) :
 "Invalid instruction combination ( rule name: pquad)"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_ILLEGAL_INSTR_PARAM)+(1<<IERROR_ILLEGAL_INSTR_PARAM2)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_PC_MISALIGNED)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@BMOV_pquad_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_UNORDERED ;

OPCODES
        BMOVcbu_pipe =  0b101101010110;
        BMOV =  0b101101010110;

ENCODING
!bmov_pquad__RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_84_84_clear=pquad;
BITS_6_29_24_cbu_state=cbu_state;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "bmov_pquad_bar__RBR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ONLY32:sz /PQUAD("nopquad"):pquad
CBU_STATE_DIST:cbu_state
','BD:barReg
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
ILLEGAL_INSTR_ENCODING_ERROR
 (((pquad == `PQUAD@PQUAD))) -> (((cbu_state == `CBU_STATE_DIST@MACTIVE))) :
 "Invalid instruction combination ( rule name: pquad)"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_ILLEGAL_INSTR_PARAM)+(1<<IERROR_ILLEGAL_INSTR_PARAM2)+(1<<IERROR_PC_MISALIGNED)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@BMOV_pquad_B ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_UNORDERED ;

OPCODES
        BMOVcbu_pipe =  0b111101010110;
        BMOV =  0b111101010110;

ENCODING
!bmov_pquad_bar__RBR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_84_84_clear=pquad;
BITS_6_29_24_cbu_state=cbu_state;
BITS_4_19_16_barReg=barReg;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "bmov_dst64__I"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ONLY64:sz
ATEXIT_PCONLY:atexit_pc
','UImm(49)*:Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_PC_MISALIGNED)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@BMOV_dst64_I ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 47;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_UNORDERED ;

OPCODES
        BMOVcbu_pipe =  0b100101010111;
        BMOV =  0b100101010111;

ENCODING
!bmov_dst64__I_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_47_80_34_Sb=Sb SCALE 4;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "bmov_dst64__R"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ONLY64:sz
ATEXIT_PCONLY:atexit_pc
','Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-2))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
MISALIGNED_REG_ERROR
 (((Rb)+((Rb)==`Register@RZ)) % 2) == 0 :
 "Register Rb is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_MISALIGNED)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@BMOV_dst64_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 64;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_UNORDERED ;

OPCODES
        BMOVcbu_pipe =  0b1101010111;
        BMOV =  0b1101010111;

ENCODING
!bmov_dst64__R_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_8_39_32_Rb=Rb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "bmov_dst64__C"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ONLY64:sz
ATEXIT_PCONLY:atexit_pc
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_PC_MISALIGNED)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@BMOV_dst64_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_UNORDERED ;

OPCODES
        BMOVcbu_pipe =  0b101101010111;
        BMOV =  0b101101010111;

ENCODING
!bmov_dst64__C_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "bpt__noWAIT"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BPT_INT_DRAIN:bpt
UImm(3/0)*:Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 3;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_CBU ;

OPCODES
        BPTcbu_pipe =  0b100101011100;
        BPT =  0b100101011100;

ENCODING
!bpt__noWAIT_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_86_84_cop=*bpt;
BITS_3_36_34_Sb=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "bpt__WAIT"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BPT_PAUSE_TRAP_PAUSE_QUIET:bpt
UImm(3/0)*:Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
ILLEGAL_INSTR_ENCODING_ERROR
 (((bpt == `BPT_PAUSE_TRAP_PAUSE_QUIET@TRAP))) -> (((Sb==0x1)||(Sb==0x2)||(Sb==0x3)||(Sb==0x4)||(Sb==0x5)||(Sb==0x6)||(Sb==0x7))) :
 "Invalid instruction combination ( rule name: TRAP)"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 4 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 3;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_CBU ;

OPCODES
        BPTcbu_pipe =  0b100101011100;
        BPT =  0b100101011100;

ENCODING
!bpt__WAIT_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_86_84_cop=*bpt;
BITS_3_36_34_Sb=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "bra_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DEPTH("nodepth"):depth /COND("nocond"):cond
 [!]Predicate("PT"):Pp
','RSImm(50)*:sImm
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((depth !=`DEPTH@INVALID3)) :
 "Invalid depth field value"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_PC_MISALIGNED)+(1<<IERROR_PC_WRAP)+0;
 BRANCH_TARGET_INDEX = INDEX(sImm) ;
 BRANCH_TYPE = BRT_BRANCH ;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 PRED_INDEX = INDEX(Pp) ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(sImm));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 48;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_CBU ;

OPCODES
        BRAcbu_pipe =  0b100101000111;
        BRA =  0b100101000111;

ENCODING
!bra__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_86_85_depth=depth;
BITS_2_33_32_cond=cond;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_48_81_34_sImm=sImm SCALE 4;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "bra_rel_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DEPTH("nodepth"):depth /COND("nocond"):cond
 [!]Predicate("PT"):Pp
','SImm(50)*:sImm /RelOpt:rel
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((depth !=`DEPTH@INVALID3)) :
 "Invalid depth field value"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_PC_MISALIGNED)+(1<<IERROR_PC_WRAP)+0;
 BRANCH_TARGET_INDEX = INDEX(sImm) ;
 BRANCH_TYPE = BRT_BRANCH ;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 PRED_INDEX = INDEX(Pp) ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(sImm));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 48;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_CBU ;

OPCODES
        BRAcbu_pipe =  0b100101000111;
        BRA =  0b100101000111;

ENCODING
!bra_rel__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_86_85_depth=depth;
BITS_2_33_32_cond=cond;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_48_81_34_sImm=sImm SCALE 4;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "break_inst_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
 [!]Predicate("PT"):Pp
','BD:barReg
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_PC_WRAP)+0;
 BRANCH_TYPE = BRT_BRANCH ;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 PRED_INDEX = INDEX(Pp) ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_CBU ;

OPCODES
        BREAKcbu_pipe =  0b100101000010;
        BREAK =  0b100101000010;

ENCODING
!break_inst__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_4_19_16_barReg=barReg;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "brx_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DEPTH("nodepth"):depth
 [!]Predicate("PT"):Pp
','Register:Ra SImm(50/0)*:Ra_offset
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((depth !=`DEPTH@INVALID3)) :
 "Invalid depth field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_MISALIGNED)+(1<<IERROR_PC_WRAP)+0;
 BRANCH_TARGET_INDEX = INDEX(Ra) ;
 BRANCH_TYPE = BRT_BRANCH ;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 PRED_INDEX = INDEX(Pp) ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_CBU ;

OPCODES
        BRXcbu_pipe =  0b100101001001;
        BRX =  0b100101001001;

ENCODING
!brx__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_86_85_depth=depth;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_8_31_24_Ra=Ra;
BITS_48_81_34_sImm=Ra_offset SCALE 4;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "brx_rel_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DEPTH("nodepth"):depth
 [!]Predicate("PT"):Pp
','Register:Ra SImm(50/0)*:Ra_offset /RelOpt:rel
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((depth !=`DEPTH@INVALID3)) :
 "Invalid depth field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_MISALIGNED)+(1<<IERROR_PC_WRAP)+0;
 BRANCH_TARGET_INDEX = INDEX(Ra) ;
 BRANCH_TYPE = BRT_BRANCH ;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 PRED_INDEX = INDEX(Pp) ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_CBU ;

OPCODES
        BRXcbu_pipe =  0b100101001001;
        BRX =  0b100101001001;

ENCODING
!brx_rel__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_86_85_depth=depth;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_8_31_24_Ra=Ra;
BITS_48_81_34_sImm=Ra_offset SCALE 4;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "bssy_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
 [!]Predicate("PT"):Pp
','BD:barReg
','RSImm(32)*:Sa
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_PC_MISALIGNED)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 PRED_INDEX = INDEX(Pp) ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Sa));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 30;
 VIRTUAL_QUEUE = $VQ_CBU ;

OPCODES
        BSSYcbu_pipe =  0b100101000101;
        BSSY =  0b100101000101;

ENCODING
!bssy__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_4_19_16_barReg=barReg;
BITS_30_63_34_Sa=Sa SCALE 4;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "bssy_rel_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
 [!]Predicate("PT"):Pp
','BD:barReg
','SImm(32)*:Sa /RelOpt:rel
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_PC_MISALIGNED)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 PRED_INDEX = INDEX(Pp) ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Sa));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 30;
 VIRTUAL_QUEUE = $VQ_CBU ;

OPCODES
        BSSYcbu_pipe =  0b100101000101;
        BSSY =  0b100101000101;

ENCODING
!bssy_rel__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_4_19_16_barReg=barReg;
BITS_30_63_34_Sa=Sa SCALE 4;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "bsync_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
 [!]Predicate("PT"):Pp
','BD:barReg
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 PRED_INDEX = INDEX(Pp) ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_CBU ;

OPCODES
        BSYNCcbu_pipe =  0b100101000001;
        BSYNC =  0b100101000001;

ENCODING
!bsync__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_4_19_16_barReg=barReg;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "call_abs__RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ABSONLY:abs /CALL_DEPTH("INC"):depth
 [!]Predicate("PT"):Pp
','C:Sa[UImm(5/0*):Sa_bank]*   [SImm(17)*:Sa_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sa_bank <= 17) || (Sa_bank >= 24 && Sa_bank <= 31)) :
 "Invalid constant bank error"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_API_STACK_ERROR)+(1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_PC_MISALIGNED)+(1<<IERROR_PC_WRAP)+0;
 BRANCH_TARGET_INDEX = INDEX(Sa) ;
 BRANCH_TYPE = BRT_CALL ;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@CALL_ABS_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 PRED_INDEX = INDEX(Pp) ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Sa_bank))+(1<<INDEX(Sa_addr));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_CBU ;

OPCODES
        CALLcbu_pipe =  0b101101000011;
        CALL =  0b101101000011;

ENCODING
!call_abs__RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_86_86_depth=depth;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;

BITS_5_58_54_Sb_bank,BITS_16_53_38_Sa_addr =  ConstBankAddress0(Sa_bank,Sa_addr);
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "call_abs__RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ABSONLY:abs /CALL_DEPTH("INC"):depth
 [!]Predicate("PT"):Pp
','UImm(49)*:Sa
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_API_STACK_ERROR)+(1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_PC_MISALIGNED)+(1<<IERROR_PC_WRAP)+0;
 BRANCH_TARGET_INDEX = INDEX(Sa) ;
 BRANCH_TYPE = BRT_CALL ;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@CALL_ABS_I ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 PRED_INDEX = INDEX(Pp) ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Sa));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 47;
 VIRTUAL_QUEUE = $VQ_CBU ;

OPCODES
        CALLcbu_pipe =  0b100101000011;
        CALL =  0b100101000011;

ENCODING
!call_abs__RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_86_86_depth=depth;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_47_80_34_Sb=Sa SCALE 4;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "call_abs__RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ABSONLY:abs /CALL_DEPTH("INC"):depth
 [!]Predicate("PT"):Pp
','Register:Ra SImm(50/0)*:Ra_offset
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_API_STACK_ERROR)+(1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_MISALIGNED)+(1<<IERROR_PC_WRAP)+0;
 BRANCH_TARGET_INDEX = INDEX(Ra) ;
 BRANCH_TYPE = BRT_CALL ;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@CALL_ABS_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 PRED_INDEX = INDEX(Pp) ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_CBU ;

OPCODES
        CALLcbu_pipe =  0b1101000011;
        CALL =  0b1101000011;

ENCODING
!call_abs__RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_86_86_depth=depth;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_8_31_24_Ra=Ra;
BITS_48_81_34_sImm=Ra_offset SCALE 4;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "call_rel__RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /RelOpt:rel /CALL_DEPTH("INC"):depth
 [!]Predicate("PT"):Pp
','RSImm(50)*:Sa
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_API_STACK_ERROR)+(1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_PC_MISALIGNED)+(1<<IERROR_PC_WRAP)+0;
 BRANCH_TARGET_INDEX = INDEX(Sa) ;
 BRANCH_TYPE = BRT_CALL ;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@CALL_REL_I ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 PRED_INDEX = INDEX(Pp) ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Sa));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 48;
 VIRTUAL_QUEUE = $VQ_CBU ;

OPCODES
        CALLcbu_pipe =  0b100101000100;
        CALL =  0b100101000100;

ENCODING
!call_rel__RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_86_86_depth=depth;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_48_81_34_sImm=Sa SCALE 4;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "call_rel__RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /RelOpt:rel /CALL_DEPTH("INC"):depth
 [!]Predicate("PT"):Pp
','Register:Ra RSImm(50)*:Ra_offset
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_API_STACK_ERROR)+(1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_MISALIGNED)+(1<<IERROR_PC_WRAP)+0;
 BRANCH_TARGET_INDEX = INDEX(Ra) ;
 BRANCH_TYPE = BRT_CALL ;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@CALL_REL_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 PRED_INDEX = INDEX(Pp) ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_CBU ;

OPCODES
        CALLcbu_pipe =  0b1101000100;
        CALL =  0b1101000100;

ENCODING
!call_rel__RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_86_86_depth=depth;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_8_31_24_Ra=Ra;
BITS_48_81_34_sImm=Ra_offset SCALE 4;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "call_rel_imm__RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /RelOpt:rel /CALL_DEPTH("INC"):depth
 [!]Predicate("PT"):Pp
','SImm(50)*:Sa /RelOpt:rel_imm
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_API_STACK_ERROR)+(1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_PC_MISALIGNED)+(1<<IERROR_PC_WRAP)+0;
 BRANCH_TARGET_INDEX = INDEX(Sa) ;
 BRANCH_TYPE = BRT_CALL ;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@CALL_REL_I ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 PRED_INDEX = INDEX(Pp) ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Sa));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 48;
 VIRTUAL_QUEUE = $VQ_CBU ;

OPCODES
        CALLcbu_pipe =  0b100101000100;
        CALL =  0b100101000100;

ENCODING
!call_rel_imm__RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_86_86_depth=depth;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_48_81_34_sImm=Sa SCALE 4;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "call_rel_imm__RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /RelOpt:rel /CALL_DEPTH("INC"):depth
 [!]Predicate("PT"):Pp
','Register:Ra SImm(50)*:Ra_offset /RelOpt:rel_imm
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_API_STACK_ERROR)+(1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_MISALIGNED)+(1<<IERROR_PC_WRAP)+0;
 BRANCH_TARGET_INDEX = INDEX(Ra) ;
 BRANCH_TYPE = BRT_CALL ;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@CALL_REL_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 PRED_INDEX = INDEX(Pp) ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_CBU ;

OPCODES
        CALLcbu_pipe =  0b1101000100;
        CALL =  0b1101000100;

ENCODING
!call_rel_imm__RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_86_86_depth=depth;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_8_31_24_Ra=Ra;
BITS_48_81_34_sImm=Ra_offset SCALE 4;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "call_rel_reg_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /RelOpt:rel /CALL_DEPTH("INC"):depth
 [!]Predicate("PT"):Pp
','Register:Ra
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_API_STACK_ERROR)+(1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_MISALIGNED)+(1<<IERROR_PC_WRAP)+0;
 BRANCH_TARGET_INDEX = INDEX(Ra) ;
 BRANCH_TYPE = BRT_CALL ;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@CALL_REL_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 PRED_INDEX = INDEX(Pp) ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 48;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_CBU ;

OPCODES
        CALLcbu_pipe =  0b1101000100;
        CALL =  0b1101000100;

ENCODING
!call_rel_reg__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_86_86_depth=depth;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_8_31_24_Ra=Ra;
BITS_48_81_34_sImm=*0;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "exit_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /EXIT_MODE("noexit_mode"):mode /NO_ATEXIT("nono_atexit"):no_atexit
 [!]Predicate("PT"):Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((mode !=`EXIT_MODE@INVALID3)) :
 "Invalid mode field value"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_PC_WRAP)+0;
 BRANCH_TYPE = BRT_BRANCHOUT ;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 PRED_INDEX = INDEX(Pp) ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_CBU ;

OPCODES
        EXITcbu_pipe =  0b100101001101;
        EXIT =  0b100101001101;

ENCODING
!exit__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_85_84_mode=mode;
BITS_1_86_86_depth=no_atexit;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "ide_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /IDEAction("DI"):action
UImm(16/3088)*:Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((Sb == 3088)) :
 "Invalid Sb field value"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_1(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 4 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 16;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;

OPCODES
        IDEint_pipe =  0b100101010001;
        IDE =  0b100101010001;

ENCODING
!ide__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_84_84_clear=action;
BITS_16_47_32_Sb=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_1(batch_t,usched_info);



CLASS "jmp_imm_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DEPTH("nodepth"):depth /COND("nocond"):cond
 [!]Predicate("PT"):Pp
','UImm(49)*:Sa
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((depth !=`DEPTH@INVALID3)) :
 "Invalid depth field value"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_PC_MISALIGNED)+(1<<IERROR_PC_WRAP)+0;
 BRANCH_TARGET_INDEX = INDEX(Sa) ;
 BRANCH_TYPE = BRT_BRANCH ;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@JMP_I ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 PRED_INDEX = INDEX(Pp) ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Sa));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 47;
 VIRTUAL_QUEUE = $VQ_CBU ;

OPCODES
        JMPcbu_pipe =  0b100101001010;
        JMP =  0b100101001010;

ENCODING
!jmp_imm__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_86_85_depth=depth;
BITS_2_33_32_cond=cond;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_47_80_34_Sb=Sa SCALE 4;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "jmp_imm_rel_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DEPTH("nodepth"):depth /COND("nocond"):cond
 [!]Predicate("PT"):Pp
','UImm(49)*:Sa /RelOpt:rel
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((depth !=`DEPTH@INVALID3)) :
 "Invalid depth field value"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_PC_MISALIGNED)+(1<<IERROR_PC_WRAP)+0;
 BRANCH_TARGET_INDEX = INDEX(Sa) ;
 BRANCH_TYPE = BRT_BRANCH ;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@JMP_I ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 PRED_INDEX = INDEX(Pp) ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Sa));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 47;
 VIRTUAL_QUEUE = $VQ_CBU ;

OPCODES
        JMPcbu_pipe =  0b100101001010;
        JMP =  0b100101001010;

ENCODING
!jmp_imm_rel__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_86_85_depth=depth;
BITS_2_33_32_cond=cond;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_47_80_34_Sb=Sa SCALE 4;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "jmp_const_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DEPTH("nodepth"):depth /COND("nocond"):cond
 [!]Predicate("PT"):Pp
','C:Sa[UImm(5/0*):Sa_bank]*   [SImm(17)*:Sa_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((depth !=`DEPTH@INVALID3)) :
 "Invalid depth field value"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sa_bank <= 17) || (Sa_bank >= 24 && Sa_bank <= 31)) :
 "Invalid constant bank error"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_PC_MISALIGNED)+(1<<IERROR_PC_WRAP)+0;
 BRANCH_TARGET_INDEX = INDEX(Sa) ;
 BRANCH_TYPE = BRT_BRANCH ;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@JMP_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 PRED_INDEX = INDEX(Pp) ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Sa_bank))+(1<<INDEX(Sa_addr));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_CBU ;

OPCODES
        JMPcbu_pipe =  0b101101001010;
        JMP =  0b101101001010;

ENCODING
!jmp_const__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_86_85_depth=depth;
BITS_2_33_32_cond=cond;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;

BITS_5_58_54_Sb_bank,BITS_16_53_38_Sa_addr =  ConstBankAddress0(Sa_bank,Sa_addr);
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "jmx_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DEPTH("nodepth"):depth
 [!]Predicate("PT"):Pp
','Register:Ra SImm(50/0)*:Ra_offset
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((depth !=`DEPTH@INVALID3)) :
 "Invalid depth field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_MISALIGNED)+(1<<IERROR_PC_WRAP)+0;
 BRANCH_TARGET_INDEX = INDEX(Ra) ;
 BRANCH_TYPE = BRT_BRANCH ;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 PRED_INDEX = INDEX(Pp) ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_CBU ;

OPCODES
        JMXcbu_pipe =  0b100101001100;
        JMX =  0b100101001100;

ENCODING
!jmx__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_86_85_depth=depth;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_8_31_24_Ra=Ra;
BITS_48_81_34_sImm=Ra_offset SCALE 4;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "jmx_rel_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DEPTH("nodepth"):depth
 [!]Predicate("PT"):Pp
','Register:Ra SImm(50/0)*:Ra_offset /RelOpt:rel
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((depth !=`DEPTH@INVALID3)) :
 "Invalid depth field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_MISALIGNED)+(1<<IERROR_PC_WRAP)+0;
 BRANCH_TARGET_INDEX = INDEX(Ra) ;
 BRANCH_TYPE = BRT_BRANCH ;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 PRED_INDEX = INDEX(Pp) ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_CBU ;

OPCODES
        JMXcbu_pipe =  0b100101001100;
        JMX =  0b100101001100;

ENCODING
!jmx_rel__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_86_85_depth=depth;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_8_31_24_Ra=Ra;
BITS_48_81_34_sImm=Ra_offset SCALE 4;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "kill_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
 [!]Predicate("PT"):Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_PS)) :
 "Can only be used with PS"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_PC_WRAP)+0;
 BRANCH_TYPE = BRT_BRANCHOUT ;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_PS)+0 ;
 PRED_INDEX = INDEX(Pp) ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_CBU ;

OPCODES
        KILLcbu_pipe =  0b100101011011;
        KILL =  0b100101011011;

ENCODING
!kill__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "nanosleep__R"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /RAND("norand"):rand /OPTIONAL_WARP("nooptional_warp"):warp
 [!]Predicate("PT"):Pp
','Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@NANOSLEEP_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 PRED_INDEX = INDEX(Pp) ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_CBU ;

OPCODES
        NANOSLEEPcbu_pipe =  0b1101011101;
        NANOSLEEP =  0b1101011101;

ENCODING
!nanosleep__R_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_86_86_depth=rand;
BITS_1_85_85_warp=warp;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_8_39_32_Rb=Rb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "nanosleep__I"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /RAND("norand"):rand /OPTIONAL_WARP("nooptional_warp"):warp
 [!]Predicate("PT"):Pp
','UImm(32)*:Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@NANOSLEEP_I ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 PRED_INDEX = INDEX(Pp) ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_CBU ;

OPCODES
        NANOSLEEPcbu_pipe =  0b100101011101;
        NANOSLEEP =  0b100101011101;

ENCODING
!nanosleep__I_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_86_86_depth=rand;
BITS_1_85_85_warp=warp;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_32_63_32_Ra_offset=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "nanosleep__C"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /RAND("norand"):rand /OPTIONAL_WARP("nooptional_warp"):warp
 [!]Predicate("PT"):Pp
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@NANOSLEEP_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 PRED_INDEX = INDEX(Pp) ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_CBU ;

OPCODES
        NANOSLEEPcbu_pipe =  0b101101011101;
        NANOSLEEP =  0b101101011101;

ENCODING
!nanosleep__C_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_86_86_depth=rand;
BITS_1_85_85_warp=warp;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "nanotrap__R"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /RAND("norand"):rand
 [!]Predicate("PT"):Pp
','Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@NANOTRAP_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 PRED_INDEX = INDEX(Pp) ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_UNORDERED ;

OPCODES
        NANOTRAPcbu_pipe =  0b1101011010;
        NANOTRAP =  0b1101011010;

ENCODING
!nanotrap__R_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_86_86_depth=rand;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_8_39_32_Rb=Rb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "nanotrap__I"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /RAND("norand"):rand
 [!]Predicate("PT"):Pp
','UImm(32)*:Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@NANOTRAP_I ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 PRED_INDEX = INDEX(Pp) ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_UNORDERED ;

OPCODES
        NANOTRAPcbu_pipe =  0b100101011010;
        NANOTRAP =  0b100101011010;

ENCODING
!nanotrap__I_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_86_86_depth=rand;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_32_63_32_Ra_offset=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "nanotrap__C"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /RAND("norand"):rand
 [!]Predicate("PT"):Pp
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@NANOTRAP_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 PRED_INDEX = INDEX(Pp) ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_UNORDERED ;

OPCODES
        NANOTRAPcbu_pipe =  0b101101011010;
        NANOTRAP =  0b101101011010;

ENCODING
!nanotrap__C_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_86_86_depth=rand;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "ret__REL"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /RELONLY:addr /RET_DEPTH("DEC"):depth
 [!]Predicate("PT"):Pp
','Register:Ra RSImm(50)*:Ra_offset
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_API_STACK_ERROR)+(1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_MISALIGNED)+(1<<IERROR_PC_WRAP)+0;
 BRANCH_TARGET_INDEX = INDEX(Ra) ;
 BRANCH_TYPE = BRT_RETURN ;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 PRED_INDEX = INDEX(Pp) ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_CBU ;

OPCODES
        RETcbu_pipe =  0b100101010000;
        RET =  0b100101010000;

ENCODING
!ret__REL_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_85_85_warp=*addr;
BITS_1_86_86_depth=depth;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_8_31_24_Ra=Ra;
BITS_48_81_34_sImm=Ra_offset SCALE 4;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "ret__ABS"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ABSONLY_ret:addr /RET_DEPTH("DEC"):depth
 [!]Predicate("PT"):Pp
','Register:Ra SImm(50)*:Ra_offset
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_API_STACK_ERROR)+(1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_MISALIGNED)+(1<<IERROR_PC_WRAP)+0;
 BRANCH_TARGET_INDEX = INDEX(Ra) ;
 BRANCH_TYPE = BRT_RETURN ;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 PRED_INDEX = INDEX(Pp) ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_CBU ;

OPCODES
        RETcbu_pipe =  0b100101010000;
        RET =  0b100101010000;

ENCODING
!ret__ABS_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_85_85_warp=*addr;
BITS_1_86_86_depth=depth;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_8_31_24_Ra=Ra;
BITS_48_81_34_sImm=Ra_offset SCALE 4;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "ret_rel_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /RELONLY:addr /RET_DEPTH("DEC"):depth
 [!]Predicate("PT"):Pp
','Register:Ra SImm(50)*:Ra_offset /RelOpt:rel_imm
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_API_STACK_ERROR)+(1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_MISALIGNED)+(1<<IERROR_PC_WRAP)+0;
 BRANCH_TARGET_INDEX = INDEX(Ra) ;
 BRANCH_TYPE = BRT_RETURN ;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 PRED_INDEX = INDEX(Pp) ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_CBU ;

OPCODES
        RETcbu_pipe =  0b100101010000;
        RET =  0b100101010000;

ENCODING
!ret_rel__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_85_85_warp=*addr;
BITS_1_86_86_depth=depth;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_8_31_24_Ra=Ra;
BITS_48_81_34_sImm=Ra_offset SCALE 4;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "ret_rel_reg_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /RET_ADDR_DIST:addr /RET_DEPTH("DEC"):depth
 [!]Predicate("PT"):Pp
','Register:Ra
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_API_STACK_ERROR)+(1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_MISALIGNED)+(1<<IERROR_PC_WRAP)+0;
 BRANCH_TARGET_INDEX = INDEX(Ra) ;
 BRANCH_TYPE = BRT_RETURN ;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 PRED_INDEX = INDEX(Pp) ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 48;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_CBU ;

OPCODES
        RETcbu_pipe =  0b100101010000;
        RET =  0b100101010000;

ENCODING
!ret_rel_reg__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_85_85_warp=*addr;
BITS_1_86_86_depth=depth;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_8_31_24_Ra=Ra;
BITS_48_81_34_sImm=*0;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "rpcmov_dstPc_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ONLY32:sz
PC_REG:RpcN
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_2(batch_t,usched_info,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_MISALIGNED)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 6 ;
 SIDL_NAME = `SIDL_NAMES@RPCMOV_dstPc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;

OPCODES
        RPCMOVint_pipe =  0b1101010010;
        RPCMOV =  0b1101010010;

ENCODING
!rpcmov_dstPc__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_31_31_RpcN=RpcN;
BITS_8_39_32_Rb=Rb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_2(batch_t,usched_info,reuse_src_b);



CLASS "rpcmov_dstPc_imm_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ONLY32:sz
PC_REG:RpcN
','UImm(32)*:Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_1(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_PC_MISALIGNED)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 6 ;
 SIDL_NAME = `SIDL_NAMES@RPCMOV_dstPc_imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;

OPCODES
        RPCMOVint_pipe =  0b100101010010;
        RPCMOV =  0b100101010010;

ENCODING
!rpcmov_dstPc_imm__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_31_31_RpcN=RpcN;
BITS_32_63_32_Ra_offset=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_1(batch_t,usched_info);



CLASS "rpcmov_dstPc_const_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ONLY32:sz
PC_REG:RpcN
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_1(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_PC_MISALIGNED)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 6 ;
 SIDL_NAME = `SIDL_NAMES@RPCMOV_dstPc_const ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;

OPCODES
        RPCMOVint_pipe =  0b101101010010;
        RPCMOV =  0b101101010010;

ENCODING
!rpcmov_dstPc_const__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_31_31_RpcN=RpcN;

BITS_5_58_54_Sb_bank,BITS_16_53_38_Sa_addr =  ConstBankAddress0(Sb_bank,Sb_addr);
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_1(batch_t,usched_info);



CLASS "rpcmov_srcPc_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ONLY32:sz
Register:Rd
','PC_REG:RpcN
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_1(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_MISALIGNED)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@RPCMOV_srcPc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;

OPCODES
        RPCMOVint_pipe =  0b1101010011;
        RPCMOV =  0b1101010011;

ENCODING
!rpcmov_srcPc__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_8_23_16_Rd=Rd;
BITS_1_31_31_RpcN=RpcN;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_1(batch_t,usched_info);



CLASS "rpcmov_dstPc64__Imm"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ONLY64:sz
RPCONLY:Rpc
','UImm(49)*:Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_1(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_PC_MISALIGNED)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 6 ;
 SIDL_NAME = `SIDL_NAMES@RPCMOV_dstPc64_I ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 47;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;

OPCODES
        RPCMOVint_pipe =  0b100101010100;
        RPCMOV =  0b100101010100;

ENCODING
!rpcmov_dstPc64__Imm_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_47_80_34_Sb=Sb SCALE 4;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_1(batch_t,usched_info);



CLASS "rpcmov_dstPc64__Const"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ONLY64:sz
RPCONLY:Rpc
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_1(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_PC_MISALIGNED)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 6 ;
 SIDL_NAME = `SIDL_NAMES@RPCMOV_dstPc64_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;

OPCODES
        RPCMOVint_pipe =  0b101101010100;
        RPCMOV =  0b101101010100;

ENCODING
!rpcmov_dstPc64__Const_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_1(batch_t,usched_info);



CLASS "rtt_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_PC_WRAP)+0;
 BRANCH_TYPE = BRT_RETURN ;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_CBU ;

OPCODES
        RTTcbu_pipe =  0b100101001111;
        RTT =  0b100101001111;

ENCODING
!rtt__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "warpsync__RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
 [!]Predicate("PT"):Pp
','Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@WARPSYNC_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 PRED_INDEX = INDEX(Pp) ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_CBU ;

OPCODES
        WARPSYNCcbu_pipe =  0b1101001000;
        WARPSYNC =  0b1101001000;

ENCODING
!warpsync__RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_8_39_32_Rb=Rb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "warpsync__RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
 [!]Predicate("PT"):Pp
','UImm(32)*:Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@WARPSYNC_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 PRED_INDEX = INDEX(Pp) ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_CBU ;

OPCODES
        WARPSYNCcbu_pipe =  0b100101001000;
        WARPSYNC =  0b100101001000;

ENCODING
!warpsync__RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_32_63_32_Ra_offset=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "warpsync__RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
 [!]Predicate("PT"):Pp
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@WARPSYNC_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 PRED_INDEX = INDEX(Pp) ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_CBU ;

OPCODES
        WARPSYNCcbu_pipe =  0b101101001000;
        WARPSYNC =  0b101101001000;

ENCODING
!warpsync__RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "yield_inst_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
 [!]Predicate("PT"):Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 PRED_INDEX = INDEX(Pp) ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_CBU ;

OPCODES
        YIELDcbu_pipe =  0b100101000110;
        YIELD =  0b100101000110;

ENCODING
!yield_inst__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "f2f_f32_upconvert__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /F2Ffmts2_16:dstfmt.srcfmt /Round1("RN"):rnd
Register:Rd
',' [-] [||] Register:Rb /HSEL("H0"):hsel
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_ERROR
 ((hsel !=`HSEL@INVALID2)&&(hsel !=`HSEL@INVALID3)) :
 "Invalid hsel field value"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@F2F_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_MUFU ;

OPCODES
        F2Fmio_pipe =  0b1100000100;
        F2F =  0b1100000100;

ENCODING
!f2f_f32_upconvert__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_4_85_84_76_75_dstfmt.srcfmt=*dstfmt.srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;
BITS_8_39_32_Rb=Rb;
BITS_2_61_60_hsel=hsel;
BITS_1_62_62_Sb_absolute=Rb@absolute;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "f2f_f32_upconvert__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /F2Ffmts2_16:dstfmt.srcfmt /Round1("RN"):rnd
Register:Rd
',' [-] [||] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr] /HSEL("H0"):hsel
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_ERROR
 ((hsel !=`HSEL@INVALID2)&&(hsel !=`HSEL@INVALID3)) :
 "Invalid hsel field value"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@F2F_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_MUFU ;

OPCODES
        F2Fmio_pipe =  0b101100000100;
        F2F =  0b101100000100;

ENCODING
!f2f_f32_upconvert__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_4_85_84_76_75_dstfmt.srcfmt=*dstfmt.srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_2_61_60_hsel=hsel;
BITS_1_62_62_Sb_absolute=Sb@absolute;
BITS_1_63_63_Sb_negate=Sb@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "f2f_f32_upconvert__RIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /F2Ffmts2_16:dstfmt.srcfmt /Round1("RN"):rnd
Register:Rd
','F16Imm(64):Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@F2F_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 16;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_MUFU ;

OPCODES
        F2Fmio_pipe =  0b100100000100;
        F2F =  0b100100000100;

ENCODING
!f2f_f32_upconvert__RIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_4_85_84_76_75_dstfmt.srcfmt=*dstfmt.srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;
BITS_16_47_32_Sb=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "f2f_f64_upconvert__R_R16_R_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /F2Ffmts2_64_16:dstfmt.srcfmt /Round1("RN"):rnd
Register:Rd
',' [-] [||] Register:Rb /HSEL("H0"):hsel
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_ERROR
 ((hsel !=`HSEL@INVALID2)&&(hsel !=`HSEL@INVALID3)) :
 "Invalid hsel field value"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@F2F64_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_FMA64 ;

OPCODES
        F2Fmio_pipe =  0b1100010000;
        F2F =  0b1100010000;

ENCODING
!f2f_f64_upconvert__R_R16_R_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_4_85_84_76_75_dstfmt.srcfmt=*dstfmt.srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;
BITS_8_39_32_Rb=Rb;
BITS_2_61_60_hsel=hsel;
BITS_1_62_62_Sb_absolute=Rb@absolute;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "f2f_f64_upconvert__R_R32_R_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /F2Ffmts2_64_32:dstfmt.srcfmt /Round1("RN"):rnd
Register:Rd
',' [-] [||] Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@F2F64_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_FMA64 ;

OPCODES
        F2Fmio_pipe =  0b1100010000;
        F2F =  0b1100010000;

ENCODING
!f2f_f64_upconvert__R_R32_R_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_4_85_84_76_75_dstfmt.srcfmt=*dstfmt.srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;
BITS_8_39_32_Rb=Rb;
BITS_1_62_62_Sb_absolute=Rb@absolute;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "f2f_f64_upconvert__R_C16_R_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /F2Ffmts2_64_16:dstfmt.srcfmt /Round1("RN"):rnd
Register:Rd
',' [-] [||] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr] /HSEL("H0"):hsel
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_ERROR
 ((hsel !=`HSEL@INVALID2)&&(hsel !=`HSEL@INVALID3)) :
 "Invalid hsel field value"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@F2F64_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_FMA64 ;

OPCODES
        F2Fmio_pipe =  0b101100010000;
        F2F =  0b101100010000;

ENCODING
!f2f_f64_upconvert__R_C16_R_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_4_85_84_76_75_dstfmt.srcfmt=*dstfmt.srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_2_61_60_hsel=hsel;
BITS_1_62_62_Sb_absolute=Sb@absolute;
BITS_1_63_63_Sb_negate=Sb@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "f2f_f64_upconvert__R_C32_R_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /F2Ffmts2_64_32:dstfmt.srcfmt /Round1("RN"):rnd
Register:Rd
',' [-] [||] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@F2F64_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_FMA64 ;

OPCODES
        F2Fmio_pipe =  0b101100010000;
        F2F =  0b101100010000;

ENCODING
!f2f_f64_upconvert__R_C32_R_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_4_85_84_76_75_dstfmt.srcfmt=*dstfmt.srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_1_62_62_Sb_absolute=Sb@absolute;
BITS_1_63_63_Sb_negate=Sb@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "f2f_f64_upconvert__R_I16_R_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /F2Ffmts2_64_16:dstfmt.srcfmt /Round1("RN"):rnd
Register:Rd
','F16Imm(64):Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@F2F64_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 16;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_FMA64 ;

OPCODES
        F2Fmio_pipe =  0b100100010000;
        F2F =  0b100100010000;

ENCODING
!f2f_f64_upconvert__R_I16_R_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_4_85_84_76_75_dstfmt.srcfmt=*dstfmt.srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;
BITS_16_47_32_Sb=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "f2f_f64_upconvert__R_32I_R_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /F2Ffmts2_64_32:dstfmt.srcfmt /Round1("RN"):rnd
Register:Rd
','F32Imm(64):Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@F2F64_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_FMA64 ;

OPCODES
        F2Fmio_pipe =  0b100100010000;
        F2F =  0b100100010000;

ENCODING
!f2f_f64_upconvert__R_32I_R_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_4_85_84_76_75_dstfmt.srcfmt=*dstfmt.srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;
BITS_32_63_32_Ra_offset=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "f2f_f32_downconvert__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /F2Ffmts2:dstfmt.srcfmt /Round1("RN"):rnd
Register:Rd
',' [-] [||] Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@F2F_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_MUFU ;

OPCODES
        F2Fmio_pipe =  0b1100000100;
        F2F =  0b1100000100;

ENCODING
!f2f_f32_downconvert__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_4_85_84_76_75_dstfmt.srcfmt=*dstfmt.srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;
BITS_8_39_32_Rb=Rb;
BITS_1_62_62_Sb_absolute=Rb@absolute;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "f2f_f32_downconvert__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /F2Ffmts2:dstfmt.srcfmt /Round1("RN"):rnd
Register:Rd
',' [-] [||] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@F2F_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_MUFU ;

OPCODES
        F2Fmio_pipe =  0b101100000100;
        F2F =  0b101100000100;

ENCODING
!f2f_f32_downconvert__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_4_85_84_76_75_dstfmt.srcfmt=*dstfmt.srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_1_62_62_Sb_absolute=Sb@absolute;
BITS_1_63_63_Sb_negate=Sb@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "f2f_f32_downconvert__RIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /F2Ffmts2:dstfmt.srcfmt /Round1("RN"):rnd
Register:Rd
','F32Imm(64):Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@F2F_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_MUFU ;

OPCODES
        F2Fmio_pipe =  0b100100000100;
        F2F =  0b100100000100;

ENCODING
!f2f_f32_downconvert__RIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_4_85_84_76_75_dstfmt.srcfmt=*dstfmt.srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;
BITS_32_63_32_Ra_offset=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "f2f_f64_downconvert__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /F2Ffmts2_64:dstfmt.srcfmt /Round1("RN"):rnd
Register:Rd
',' [-] [||] Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-2))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
MISALIGNED_REG_ERROR
 (((Rb)+((Rb)==`Register@RZ)) % 2) == 0 :
 "Register Rb is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@F2F64_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 64;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_FMA64 ;

OPCODES
        F2Fmio_pipe =  0b1100010000;
        F2F =  0b1100010000;

ENCODING
!f2f_f64_downconvert__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_4_85_84_76_75_dstfmt.srcfmt=*dstfmt.srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;
BITS_8_39_32_Rb=Rb;
BITS_1_62_62_Sb_absolute=Rb@absolute;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "f2f_f64_downconvert__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /F2Ffmts2_64:dstfmt.srcfmt /Round1("RN"):rnd
Register:Rd
',' [-] [||] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@F2F64_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_FMA64 ;

OPCODES
        F2Fmio_pipe =  0b101100010000;
        F2F =  0b101100010000;

ENCODING
!f2f_f64_downconvert__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_4_85_84_76_75_dstfmt.srcfmt=*dstfmt.srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_1_62_62_Sb_absolute=Sb@absolute;
BITS_1_63_63_Sb_negate=Sb@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "f2f_f64_downconvert__RIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /F2Ffmts2_64:dstfmt.srcfmt /Round1("RN"):rnd
Register:Rd
','F64Imm(64):Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@F2F64_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_FMA64 ;

OPCODES
        F2Fmio_pipe =  0b100100010000;
        F2F =  0b100100010000;

ENCODING
!f2f_f64_downconvert__RIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_4_85_84_76_75_dstfmt.srcfmt=*dstfmt.srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;
BITS_32_63_32_Ra_offset=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "f2i__Rb_16b"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /DSTFMT_U8_S8_U16_S16_U32_S32("S32"):dstfmt /Float16:srcfmt /Round3("ROUND"):rnd /NTZ("nontz"):ntz
Register:Rd
',' [-] [||] Register:Rb /HSEL("H0"):hsel
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_ERROR
 ((hsel !=`HSEL@INVALID2)&&(hsel !=`HSEL@INVALID3)) :
 "Invalid hsel field value"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@F2I_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_MUFU ;

OPCODES
        F2Imio_pipe =  0b1100000101;
        F2I =  0b1100000101;

ENCODING
!f2i__Rb_16b_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_3_76_75_72_72_dstfmt=*dstfmt;
BITS_2_85_84_mode=*srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_1_77_77_ntz=ntz;
BITS_8_23_16_Rd=Rd;
BITS_8_39_32_Rb=Rb;
BITS_2_61_60_hsel=hsel;
BITS_1_62_62_Sb_absolute=Rb@absolute;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "f2i__Cb_16b"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /DSTFMT_U8_S8_U16_S16_U32_S32("S32"):dstfmt /Float16:srcfmt /Round3("ROUND"):rnd /NTZ("nontz"):ntz
Register:Rd
',' [-] [||] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr] /HSEL("H0"):hsel
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_ERROR
 ((hsel !=`HSEL@INVALID2)&&(hsel !=`HSEL@INVALID3)) :
 "Invalid hsel field value"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@F2I_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_MUFU ;

OPCODES
        F2Imio_pipe =  0b101100000101;
        F2I =  0b101100000101;

ENCODING
!f2i__Cb_16b_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_3_76_75_72_72_dstfmt=*dstfmt;
BITS_2_85_84_mode=*srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_1_77_77_ntz=ntz;
BITS_8_23_16_Rd=Rd;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_2_61_60_hsel=hsel;
BITS_1_62_62_Sb_absolute=Sb@absolute;
BITS_1_63_63_Sb_negate=Sb@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "f2i__Ib_16b"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /DSTFMT_U8_S8_U16_S16_U32_S32("S32"):dstfmt /Float16:srcfmt /Round3("ROUND"):rnd /NTZ("nontz"):ntz
Register:Rd
','F16Imm(64):Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@F2I_I ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 16;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_MUFU ;

OPCODES
        F2Imio_pipe =  0b100100000101;
        F2I =  0b100100000101;

ENCODING
!f2i__Ib_16b_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_3_76_75_72_72_dstfmt=*dstfmt;
BITS_2_85_84_mode=*srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_1_77_77_ntz=ntz;
BITS_8_23_16_Rd=Rd;
BITS_16_47_32_Sb=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "f2i__Rb_32b"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /DSTFMT_U8_S8_U16_S16_U32_S32("S32"):dstfmt /Float32("F32"):srcfmt /Round3("ROUND"):rnd /NTZ("nontz"):ntz
Register:Rd
',' [-] [||] Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@F2I_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_MUFU ;

OPCODES
        F2Imio_pipe =  0b1100000101;
        F2I =  0b1100000101;

ENCODING
!f2i__Rb_32b_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_3_76_75_72_72_dstfmt=*dstfmt;
BITS_2_85_84_mode=*srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_1_77_77_ntz=ntz;
BITS_8_23_16_Rd=Rd;
BITS_8_39_32_Rb=Rb;
BITS_1_62_62_Sb_absolute=Rb@absolute;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "f2i__Cb_32b"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /DSTFMT_U8_S8_U16_S16_U32_S32("S32"):dstfmt /Float32("F32"):srcfmt /Round3("ROUND"):rnd /NTZ("nontz"):ntz
Register:Rd
',' [-] [||] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@F2I_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_MUFU ;

OPCODES
        F2Imio_pipe =  0b101100000101;
        F2I =  0b101100000101;

ENCODING
!f2i__Cb_32b_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_3_76_75_72_72_dstfmt=*dstfmt;
BITS_2_85_84_mode=*srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_1_77_77_ntz=ntz;
BITS_8_23_16_Rd=Rd;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_1_62_62_Sb_absolute=Sb@absolute;
BITS_1_63_63_Sb_negate=Sb@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "f2i__IU_32b"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /DSTFMT_U8_S8_U16_S16_U32_S32("S32"):dstfmt /Float32("F32"):srcfmt /Round3("ROUND"):rnd /NTZ("nontz"):ntz
Register:Rd
','F32Imm(64):Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@F2I_I ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_MUFU ;

OPCODES
        F2Imio_pipe =  0b100100000101;
        F2I =  0b100100000101;

ENCODING
!f2i__IU_32b_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_3_76_75_72_72_dstfmt=*dstfmt;
BITS_2_85_84_mode=*srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_1_77_77_ntz=ntz;
BITS_8_23_16_Rd=Rd;
BITS_32_63_32_Ra_offset=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "f2i__Rb_64b"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /DSTFMT_U8_S8_U16_S16_U32_S32("S32"):dstfmt /Float64:srcfmt /Round3("ROUND"):rnd /NTZ("nontz"):ntz
Register:Rd
',' [-] [||] Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-2))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
MISALIGNED_REG_ERROR
 (((Rb)+((Rb)==`Register@RZ)) % 2) == 0 :
 "Register Rb is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@F2I64_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 64;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_FMA64 ;

OPCODES
        F2Imio_pipe =  0b1100010001;
        F2I =  0b1100010001;

ENCODING
!f2i__Rb_64b_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_3_76_75_72_72_dstfmt=*dstfmt;
BITS_2_85_84_mode=*srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_1_77_77_ntz=ntz;
BITS_8_23_16_Rd=Rd;
BITS_8_39_32_Rb=Rb;
BITS_1_62_62_Sb_absolute=Rb@absolute;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "f2i__Cb_64b"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /DSTFMT_U8_S8_U16_S16_U32_S32("S32"):dstfmt /Float64:srcfmt /Round3("ROUND"):rnd /NTZ("nontz"):ntz
Register:Rd
',' [-] [||] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@F2I64_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_FMA64 ;

OPCODES
        F2Imio_pipe =  0b101100010001;
        F2I =  0b101100010001;

ENCODING
!f2i__Cb_64b_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_3_76_75_72_72_dstfmt=*dstfmt;
BITS_2_85_84_mode=*srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_1_77_77_ntz=ntz;
BITS_8_23_16_Rd=Rd;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_1_62_62_Sb_absolute=Sb@absolute;
BITS_1_63_63_Sb_negate=Sb@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "f2i__Ib_64b"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /DSTFMT_U8_S8_U16_S16_U32_S32("S32"):dstfmt /Float64:srcfmt /Round3("ROUND"):rnd /NTZ("nontz"):ntz
Register:Rd
','F64Imm(64):Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@F2I64_I ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_FMA64 ;

OPCODES
        F2Imio_pipe =  0b100100010001;
        F2I =  0b100100010001;

ENCODING
!f2i__Ib_64b_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_3_76_75_72_72_dstfmt=*dstfmt;
BITS_2_85_84_mode=*srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_1_77_77_ntz=ntz;
BITS_8_23_16_Rd=Rd;
BITS_32_63_32_Ra_offset=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "f2i_Rd64__Rb_16b"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /DSTFMT_U64_S64:dstfmt /Float16:srcfmt /Round3("ROUND"):rnd /NTZ("nontz"):ntz
Register:Rd
',' [-] [||] Register:Rb /HSEL("H0"):hsel
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_ERROR
 ((hsel !=`HSEL@INVALID2)&&(hsel !=`HSEL@INVALID3)) :
 "Invalid hsel field value"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@F2I64_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_FMA64 ;

OPCODES
        F2Imio_pipe =  0b1100010001;
        F2I =  0b1100010001;

ENCODING
!f2i_Rd64__Rb_16b_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_3_76_75_72_72_dstfmt=*dstfmt;
BITS_2_85_84_mode=*srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_1_77_77_ntz=ntz;
BITS_8_23_16_Rd=Rd;
BITS_8_39_32_Rb=Rb;
BITS_2_61_60_hsel=hsel;
BITS_1_62_62_Sb_absolute=Rb@absolute;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "f2i_Rd64__Cb_16b"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /DSTFMT_U64_S64:dstfmt /Float16:srcfmt /Round3("ROUND"):rnd /NTZ("nontz"):ntz
Register:Rd
',' [-] [||] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr] /HSEL("H0"):hsel
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_ERROR
 ((hsel !=`HSEL@INVALID2)&&(hsel !=`HSEL@INVALID3)) :
 "Invalid hsel field value"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@F2I64_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_FMA64 ;

OPCODES
        F2Imio_pipe =  0b101100010001;
        F2I =  0b101100010001;

ENCODING
!f2i_Rd64__Cb_16b_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_3_76_75_72_72_dstfmt=*dstfmt;
BITS_2_85_84_mode=*srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_1_77_77_ntz=ntz;
BITS_8_23_16_Rd=Rd;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_2_61_60_hsel=hsel;
BITS_1_62_62_Sb_absolute=Sb@absolute;
BITS_1_63_63_Sb_negate=Sb@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "f2i_Rd64__Ib_16b"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /DSTFMT_U64_S64:dstfmt /Float16:srcfmt /Round3("ROUND"):rnd /NTZ("nontz"):ntz
Register:Rd
','F16Imm(64):Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@F2I64_I ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 16;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_FMA64 ;

OPCODES
        F2Imio_pipe =  0b100100010001;
        F2I =  0b100100010001;

ENCODING
!f2i_Rd64__Ib_16b_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_3_76_75_72_72_dstfmt=*dstfmt;
BITS_2_85_84_mode=*srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_1_77_77_ntz=ntz;
BITS_8_23_16_Rd=Rd;
BITS_16_47_32_Sb=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "f2i_Rd64__Rb_32b"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /DSTFMT_U64_S64:dstfmt /Float32("F32"):srcfmt /Round3("ROUND"):rnd /NTZ("nontz"):ntz
Register:Rd
',' [-] [||] Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@F2I64_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_FMA64 ;

OPCODES
        F2Imio_pipe =  0b1100010001;
        F2I =  0b1100010001;

ENCODING
!f2i_Rd64__Rb_32b_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_3_76_75_72_72_dstfmt=*dstfmt;
BITS_2_85_84_mode=*srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_1_77_77_ntz=ntz;
BITS_8_23_16_Rd=Rd;
BITS_8_39_32_Rb=Rb;
BITS_1_62_62_Sb_absolute=Rb@absolute;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "f2i_Rd64__Cb_32b"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /DSTFMT_U64_S64:dstfmt /Float32("F32"):srcfmt /Round3("ROUND"):rnd /NTZ("nontz"):ntz
Register:Rd
',' [-] [||] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@F2I64_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_FMA64 ;

OPCODES
        F2Imio_pipe =  0b101100010001;
        F2I =  0b101100010001;

ENCODING
!f2i_Rd64__Cb_32b_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_3_76_75_72_72_dstfmt=*dstfmt;
BITS_2_85_84_mode=*srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_1_77_77_ntz=ntz;
BITS_8_23_16_Rd=Rd;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_1_62_62_Sb_absolute=Sb@absolute;
BITS_1_63_63_Sb_negate=Sb@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "f2i_Rd64__IU_32b"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /DSTFMT_U64_S64:dstfmt /Float32("F32"):srcfmt /Round3("ROUND"):rnd /NTZ("nontz"):ntz
Register:Rd
','F32Imm(64):Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@F2I64_I ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_FMA64 ;

OPCODES
        F2Imio_pipe =  0b100100010001;
        F2I =  0b100100010001;

ENCODING
!f2i_Rd64__IU_32b_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_3_76_75_72_72_dstfmt=*dstfmt;
BITS_2_85_84_mode=*srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_1_77_77_ntz=ntz;
BITS_8_23_16_Rd=Rd;
BITS_32_63_32_Ra_offset=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "f2i_Rd64__Rb_64b"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /DSTFMT_U64_S64:dstfmt /Float64:srcfmt /Round3("ROUND"):rnd /NTZ("nontz"):ntz
Register:Rd
',' [-] [||] Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-2))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
MISALIGNED_REG_ERROR
 (((Rb)+((Rb)==`Register@RZ)) % 2) == 0 :
 "Register Rb is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@F2I64_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 64;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_FMA64 ;

OPCODES
        F2Imio_pipe =  0b1100010001;
        F2I =  0b1100010001;

ENCODING
!f2i_Rd64__Rb_64b_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_3_76_75_72_72_dstfmt=*dstfmt;
BITS_2_85_84_mode=*srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_1_77_77_ntz=ntz;
BITS_8_23_16_Rd=Rd;
BITS_8_39_32_Rb=Rb;
BITS_1_62_62_Sb_absolute=Rb@absolute;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "f2i_Rd64__Cb_64b"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /DSTFMT_U64_S64:dstfmt /Float64:srcfmt /Round3("ROUND"):rnd /NTZ("nontz"):ntz
Register:Rd
',' [-] [||] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@F2I64_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_FMA64 ;

OPCODES
        F2Imio_pipe =  0b101100010001;
        F2I =  0b101100010001;

ENCODING
!f2i_Rd64__Cb_64b_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_3_76_75_72_72_dstfmt=*dstfmt;
BITS_2_85_84_mode=*srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_1_77_77_ntz=ntz;
BITS_8_23_16_Rd=Rd;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_1_62_62_Sb_absolute=Sb@absolute;
BITS_1_63_63_Sb_negate=Sb@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "f2i_Rd64__Ib_64b"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /DSTFMT_U64_S64:dstfmt /Float64:srcfmt /Round3("ROUND"):rnd /NTZ("nontz"):ntz
Register:Rd
','F64Imm(64):Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@F2I64_I ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_FMA64 ;

OPCODES
        F2Imio_pipe =  0b100100010001;
        F2I =  0b100100010001;

ENCODING
!f2i_Rd64__Ib_64b_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_3_76_75_72_72_dstfmt=*dstfmt;
BITS_2_85_84_mode=*srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_1_77_77_ntz=ntz;
BITS_8_23_16_Rd=Rd;
BITS_32_63_32_Ra_offset=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "frnd__f16_R"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /F16ONLY:fmt /Round3("ROUND"):rnd
Register:Rd
',' [-] [||] Register:Rb /HSEL("H0"):hsel
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_ERROR
 ((hsel !=`HSEL@INVALID2)&&(hsel !=`HSEL@INVALID3)) :
 "Invalid hsel field value"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@FRND_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_MUFU ;

OPCODES
        FRNDmio_pipe =  0b1100000111;
        FRND =  0b1100000111;

ENCODING
!frnd__f16_R_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_4_85_84_76_75_dstfmt.srcfmt=*fmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;
BITS_8_39_32_Rb=Rb;
BITS_2_61_60_hsel=hsel;
BITS_1_62_62_Sb_absolute=Rb@absolute;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "frnd__f16_C"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /F16ONLY:fmt /Round3("ROUND"):rnd
Register:Rd
',' [-] [||] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr] /HSEL("H0"):hsel
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_ERROR
 ((hsel !=`HSEL@INVALID2)&&(hsel !=`HSEL@INVALID3)) :
 "Invalid hsel field value"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@FRND_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_MUFU ;

OPCODES
        FRNDmio_pipe =  0b101100000111;
        FRND =  0b101100000111;

ENCODING
!frnd__f16_C_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_4_85_84_76_75_dstfmt.srcfmt=*fmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_2_61_60_hsel=hsel;
BITS_1_62_62_Sb_absolute=Sb@absolute;
BITS_1_63_63_Sb_negate=Sb@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "frnd__f16_I"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /F16ONLY:fmt /Round3("ROUND"):rnd
Register:Rd
','F16Imm(64):Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@FRND_I ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 16;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_MUFU ;

OPCODES
        FRNDmio_pipe =  0b100100000111;
        FRND =  0b100100000111;

ENCODING
!frnd__f16_I_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_4_85_84_76_75_dstfmt.srcfmt=*fmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;
BITS_16_47_32_Sb=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "frnd__f32_R"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /F32ONLY("F32"):fmt /Round3("ROUND"):rnd
Register:Rd
',' [-] [||] Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@FRND_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_MUFU ;

OPCODES
        FRNDmio_pipe =  0b1100000111;
        FRND =  0b1100000111;

ENCODING
!frnd__f32_R_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_4_85_84_76_75_dstfmt.srcfmt=*fmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;
BITS_8_39_32_Rb=Rb;
BITS_1_62_62_Sb_absolute=Rb@absolute;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "frnd__f32_C"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /F32ONLY("F32"):fmt /Round3("ROUND"):rnd
Register:Rd
',' [-] [||] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@FRND_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_MUFU ;

OPCODES
        FRNDmio_pipe =  0b101100000111;
        FRND =  0b101100000111;

ENCODING
!frnd__f32_C_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_4_85_84_76_75_dstfmt.srcfmt=*fmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_1_62_62_Sb_absolute=Sb@absolute;
BITS_1_63_63_Sb_negate=Sb@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "frnd__f32_I"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /F32ONLY("F32"):fmt /Round3("ROUND"):rnd
Register:Rd
','F32Imm(64):Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@FRND_I ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_MUFU ;

OPCODES
        FRNDmio_pipe =  0b100100000111;
        FRND =  0b100100000111;

ENCODING
!frnd__f32_I_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_4_85_84_76_75_dstfmt.srcfmt=*fmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;
BITS_32_63_32_Ra_offset=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "frnd__f64_R"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /F64ONLY:fmt /Round3("ROUND"):rnd
Register:Rd
',' [-] [||] Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-2))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
MISALIGNED_REG_ERROR
 (((Rb)+((Rb)==`Register@RZ)) % 2) == 0 :
 "Register Rb is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@FRND64_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 64;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_FMA64 ;

OPCODES
        FRNDmio_pipe =  0b1100010011;
        FRND =  0b1100010011;

ENCODING
!frnd__f64_R_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_4_85_84_76_75_dstfmt.srcfmt=*fmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;
BITS_8_39_32_Rb=Rb;
BITS_1_62_62_Sb_absolute=Rb@absolute;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "frnd__f64_C"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /F64ONLY:fmt /Round3("ROUND"):rnd
Register:Rd
',' [-] [||] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@FRND64_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_FMA64 ;

OPCODES
        FRNDmio_pipe =  0b101100010011;
        FRND =  0b101100010011;

ENCODING
!frnd__f64_C_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_4_85_84_76_75_dstfmt.srcfmt=*fmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_1_62_62_Sb_absolute=Sb@absolute;
BITS_1_63_63_Sb_negate=Sb@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "frnd__f64_I"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /F64ONLY:fmt /Round3("ROUND"):rnd
Register:Rd
','F64Imm(64):Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@FRND64_I ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_FMA64 ;

OPCODES
        FRNDmio_pipe =  0b100100010011;
        FRND =  0b100100010011;

ENCODING
!frnd__f64_I_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_4_85_84_76_75_dstfmt.srcfmt=*fmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;
BITS_32_63_32_Ra_offset=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "i2f__Rb_8b"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DSTFMT_F16_F32("F32"):dstfmt /SRCFMT_U8_S8:srcfmt /Round1("RN"):rnd
Register:Rd
','Register:Rb /B3B0("B0"):bsel
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@I2F_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_MUFU ;

OPCODES
        I2Fmio_pipe =  0b1100000110;
        I2F =  0b1100000110;

ENCODING
!i2f__Rb_8b_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_76_75_dstfmt=*dstfmt;
BITS_3_85_84_74_74_srcfmt=*srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;
BITS_8_39_32_Rb=Rb;
BITS_2_61_60_hsel=bsel;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "i2f__Cb_8b"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DSTFMT_F16_F32("F32"):dstfmt /SRCFMT_U8_S8:srcfmt /Round1("RN"):rnd
Register:Rd
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr] /B3B0("B0"):bsel
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@I2F_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_MUFU ;

OPCODES
        I2Fmio_pipe =  0b101100000110;
        I2F =  0b101100000110;

ENCODING
!i2f__Cb_8b_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_76_75_dstfmt=*dstfmt;
BITS_3_85_84_74_74_srcfmt=*srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_2_61_60_hsel=bsel;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "i2f__Rb_16b"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DSTFMT_F16_F32("F32"):dstfmt /SRCFMT_U16_S16:srcfmt /Round1("RN"):rnd
Register:Rd
','Register:Rb /HSEL("H0"):hsel
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_ERROR
 ((hsel !=`HSEL@INVALID2)&&(hsel !=`HSEL@INVALID3)) :
 "Invalid hsel field value"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@I2F_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_MUFU ;

OPCODES
        I2Fmio_pipe =  0b1100000110;
        I2F =  0b1100000110;

ENCODING
!i2f__Rb_16b_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_76_75_dstfmt=*dstfmt;
BITS_3_85_84_74_74_srcfmt=*srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;
BITS_8_39_32_Rb=Rb;
BITS_2_61_60_hsel=hsel;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "i2f__Cb_16b"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DSTFMT_F16_F32("F32"):dstfmt /SRCFMT_U16_S16:srcfmt /Round1("RN"):rnd
Register:Rd
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr] /HSEL("H0"):hsel
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_ERROR
 ((hsel !=`HSEL@INVALID2)&&(hsel !=`HSEL@INVALID3)) :
 "Invalid hsel field value"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@I2F_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_MUFU ;

OPCODES
        I2Fmio_pipe =  0b101100000110;
        I2F =  0b101100000110;

ENCODING
!i2f__Cb_16b_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_76_75_dstfmt=*dstfmt;
BITS_3_85_84_74_74_srcfmt=*srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_2_61_60_hsel=hsel;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "i2f__Rb_32b"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DSTFMT_F16_F32("F32"):dstfmt /SRCFMT_U32_S32("S32"):srcfmt /Round1("RN"):rnd
Register:Rd
','Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@I2F_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_MUFU ;

OPCODES
        I2Fmio_pipe =  0b1100000110;
        I2F =  0b1100000110;

ENCODING
!i2f__Rb_32b_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_76_75_dstfmt=*dstfmt;
BITS_3_85_84_74_74_srcfmt=*srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;
BITS_8_39_32_Rb=Rb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "i2f__Cb_32b"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DSTFMT_F16_F32("F32"):dstfmt /SRCFMT_U32_S32("S32"):srcfmt /Round1("RN"):rnd
Register:Rd
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@I2F_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_MUFU ;

OPCODES
        I2Fmio_pipe =  0b101100000110;
        I2F =  0b101100000110;

ENCODING
!i2f__Cb_32b_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_76_75_dstfmt=*dstfmt;
BITS_3_85_84_74_74_srcfmt=*srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "i2f__IU_32b"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DSTFMT_F16_F32("F32"):dstfmt /U32ONLY:srcfmt /Round1("RN"):rnd
Register:Rd
','UImm(32)*:Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@I2F_I ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_MUFU ;

OPCODES
        I2Fmio_pipe =  0b100100000110;
        I2F =  0b100100000110;

ENCODING
!i2f__IU_32b_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_76_75_dstfmt=*dstfmt;
BITS_3_85_84_74_74_srcfmt=*srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;
BITS_32_63_32_Ra_offset=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "i2f__IS_32b"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DSTFMT_F16_F32("F32"):dstfmt /S32ONLY("S32"):srcfmt /Round1("RN"):rnd
Register:Rd
','SImm(32)*:Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@I2F_I ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_MUFU ;

OPCODES
        I2Fmio_pipe =  0b100100000110;
        I2F =  0b100100000110;

ENCODING
!i2f__IS_32b_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_76_75_dstfmt=*dstfmt;
BITS_3_85_84_74_74_srcfmt=*srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;
BITS_32_63_32_Ra_offset=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "i2f__Rb_64b"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DSTFMT_F16_F32("F32"):dstfmt /DSTFMT_U64_S64:srcfmt /Round1("RN"):rnd
Register:Rd
','Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-2))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
MISALIGNED_REG_ERROR
 (((Rb)+((Rb)==`Register@RZ)) % 2) == 0 :
 "Register Rb is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@I2F64_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 64;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_FMA64 ;

OPCODES
        I2Fmio_pipe =  0b1100010010;
        I2F =  0b1100010010;

ENCODING
!i2f__Rb_64b_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_76_75_dstfmt=*dstfmt;
BITS_3_85_84_74_74_srcfmt=*srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;
BITS_8_39_32_Rb=Rb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "i2f__Cb_64b"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DSTFMT_F16_F32("F32"):dstfmt /DSTFMT_U64_S64:srcfmt /Round1("RN"):rnd
Register:Rd
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@I2F64_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_FMA64 ;

OPCODES
        I2Fmio_pipe =  0b101100010010;
        I2F =  0b101100010010;

ENCODING
!i2f__Cb_64b_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_76_75_dstfmt=*dstfmt;
BITS_3_85_84_74_74_srcfmt=*srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "i2f__IU_64b"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DSTFMT_F16_F32("F32"):dstfmt /U64ONLY:srcfmt /Round1("RN"):rnd
Register:Rd
','UImm(32)*:Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@I2F64_I ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_FMA64 ;

OPCODES
        I2Fmio_pipe =  0b100100010010;
        I2F =  0b100100010010;

ENCODING
!i2f__IU_64b_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_76_75_dstfmt=*dstfmt;
BITS_3_85_84_74_74_srcfmt=*srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;
BITS_32_63_32_Ra_offset=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "i2f__IS_64b"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DSTFMT_F16_F32("F32"):dstfmt /S64ONLY:srcfmt /Round1("RN"):rnd
Register:Rd
','SImm(32)*:Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@I2F64_I ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_FMA64 ;

OPCODES
        I2Fmio_pipe =  0b100100010010;
        I2F =  0b100100010010;

ENCODING
!i2f__IS_64b_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_76_75_dstfmt=*dstfmt;
BITS_3_85_84_74_74_srcfmt=*srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;
BITS_32_63_32_Ra_offset=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "i2f_Rd64__Rb_8b"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /Float64:dstfmt /SRCFMT_U8_S8:srcfmt /Round1("RN"):rnd
Register:Rd
','Register:Rb /B3B0("B0"):bsel
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@I2F64_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_FMA64 ;

OPCODES
        I2Fmio_pipe =  0b1100010010;
        I2F =  0b1100010010;

ENCODING
!i2f_Rd64__Rb_8b_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_76_75_dstfmt=*dstfmt;
BITS_3_85_84_74_74_srcfmt=*srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;
BITS_8_39_32_Rb=Rb;
BITS_2_61_60_hsel=bsel;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "i2f_Rd64__Cb_8b"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /Float64:dstfmt /SRCFMT_U8_S8:srcfmt /Round1("RN"):rnd
Register:Rd
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr] /B3B0("B0"):bsel
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@I2F64_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_FMA64 ;

OPCODES
        I2Fmio_pipe =  0b101100010010;
        I2F =  0b101100010010;

ENCODING
!i2f_Rd64__Cb_8b_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_76_75_dstfmt=*dstfmt;
BITS_3_85_84_74_74_srcfmt=*srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_2_61_60_hsel=bsel;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "i2f_Rd64__Rb_16b"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /Float64:dstfmt /SRCFMT_U16_S16:srcfmt /Round1("RN"):rnd
Register:Rd
','Register:Rb /HSEL("H0"):hsel
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_ERROR
 ((hsel !=`HSEL@INVALID2)&&(hsel !=`HSEL@INVALID3)) :
 "Invalid hsel field value"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@I2F64_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_FMA64 ;

OPCODES
        I2Fmio_pipe =  0b1100010010;
        I2F =  0b1100010010;

ENCODING
!i2f_Rd64__Rb_16b_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_76_75_dstfmt=*dstfmt;
BITS_3_85_84_74_74_srcfmt=*srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;
BITS_8_39_32_Rb=Rb;
BITS_2_61_60_hsel=hsel;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "i2f_Rd64__Cb_16b"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /Float64:dstfmt /SRCFMT_U16_S16:srcfmt /Round1("RN"):rnd
Register:Rd
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr] /HSEL("H0"):hsel
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_ERROR
 ((hsel !=`HSEL@INVALID2)&&(hsel !=`HSEL@INVALID3)) :
 "Invalid hsel field value"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@I2F64_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_FMA64 ;

OPCODES
        I2Fmio_pipe =  0b101100010010;
        I2F =  0b101100010010;

ENCODING
!i2f_Rd64__Cb_16b_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_76_75_dstfmt=*dstfmt;
BITS_3_85_84_74_74_srcfmt=*srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_2_61_60_hsel=hsel;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "i2f_Rd64__Rb_32b"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /Float64:dstfmt /SRCFMT_U32_S32("S32"):srcfmt /Round1("RN"):rnd
Register:Rd
','Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@I2F64_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_FMA64 ;

OPCODES
        I2Fmio_pipe =  0b1100010010;
        I2F =  0b1100010010;

ENCODING
!i2f_Rd64__Rb_32b_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_76_75_dstfmt=*dstfmt;
BITS_3_85_84_74_74_srcfmt=*srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;
BITS_8_39_32_Rb=Rb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "i2f_Rd64__Cb_32b"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /Float64:dstfmt /SRCFMT_U32_S32("S32"):srcfmt /Round1("RN"):rnd
Register:Rd
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@I2F64_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_FMA64 ;

OPCODES
        I2Fmio_pipe =  0b101100010010;
        I2F =  0b101100010010;

ENCODING
!i2f_Rd64__Cb_32b_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_76_75_dstfmt=*dstfmt;
BITS_3_85_84_74_74_srcfmt=*srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "i2f_Rd64__IU_32b"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /Float64:dstfmt /U32ONLY:srcfmt /Round1("RN"):rnd
Register:Rd
','UImm(32)*:Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@I2F64_I ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_FMA64 ;

OPCODES
        I2Fmio_pipe =  0b100100010010;
        I2F =  0b100100010010;

ENCODING
!i2f_Rd64__IU_32b_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_76_75_dstfmt=*dstfmt;
BITS_3_85_84_74_74_srcfmt=*srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;
BITS_32_63_32_Ra_offset=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "i2f_Rd64__IS_32b"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /Float64:dstfmt /S32ONLY("S32"):srcfmt /Round1("RN"):rnd
Register:Rd
','SImm(32)*:Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@I2F64_I ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_FMA64 ;

OPCODES
        I2Fmio_pipe =  0b100100010010;
        I2F =  0b100100010010;

ENCODING
!i2f_Rd64__IS_32b_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_76_75_dstfmt=*dstfmt;
BITS_3_85_84_74_74_srcfmt=*srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;
BITS_32_63_32_Ra_offset=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "i2f_Rd64__Rb_64b"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /Float64:dstfmt /DSTFMT_U64_S64:srcfmt /Round1("RN"):rnd
Register:Rd
','Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-2))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
MISALIGNED_REG_ERROR
 (((Rb)+((Rb)==`Register@RZ)) % 2) == 0 :
 "Register Rb is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@I2F64_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 64;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_FMA64 ;

OPCODES
        I2Fmio_pipe =  0b1100010010;
        I2F =  0b1100010010;

ENCODING
!i2f_Rd64__Rb_64b_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_76_75_dstfmt=*dstfmt;
BITS_3_85_84_74_74_srcfmt=*srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;
BITS_8_39_32_Rb=Rb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "i2f_Rd64__Cb_64b"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /Float64:dstfmt /DSTFMT_U64_S64:srcfmt /Round1("RN"):rnd
Register:Rd
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@I2F64_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_FMA64 ;

OPCODES
        I2Fmio_pipe =  0b101100010010;
        I2F =  0b101100010010;

ENCODING
!i2f_Rd64__Cb_64b_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_76_75_dstfmt=*dstfmt;
BITS_3_85_84_74_74_srcfmt=*srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "i2f_Rd64__IU_64b"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /Float64:dstfmt /U64ONLY:srcfmt /Round1("RN"):rnd
Register:Rd
','UImm(32)*:Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@I2F64_I ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_FMA64 ;

OPCODES
        I2Fmio_pipe =  0b100100010010;
        I2F =  0b100100010010;

ENCODING
!i2f_Rd64__IU_64b_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_76_75_dstfmt=*dstfmt;
BITS_3_85_84_74_74_srcfmt=*srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;
BITS_32_63_32_Ra_offset=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "i2f_Rd64__IS_64b"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /Float64:dstfmt /S64ONLY:srcfmt /Round1("RN"):rnd
Register:Rd
','SImm(32)*:Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@I2F64_I ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_FMA64 ;

OPCODES
        I2Fmio_pipe =  0b100100010010;
        I2F =  0b100100010010;

ENCODING
!i2f_Rd64__IS_64b_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_76_75_dstfmt=*dstfmt;
BITS_3_85_84_74_74_srcfmt=*srcfmt;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;
BITS_32_63_32_Ra_offset=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "hadd2__RR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /OFMT("F16_V2"):ofmt /FTZ("noftz"):ftz /SAT("nosat"):sat
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a} /ISWZ("H1_H0"):iswzA
',' [-] [||] Register:Rc {/REUSE("noreuse"):reuse_src_c} /ISWZ("H1_H0"):iswzB_as_C
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@HADD2_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_REDIRECTABLE_FP16 ;

OPCODES
        HADD2fp16_pipe =  0b1000110000;
        HADD2 =  0b1000110000;

ENCODING
!hadd2__RR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_78_78_ofmt=ofmt;
BITS_1_80_80_ftz=ftz;
BITS_1_77_77_ntz=sat;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_2_75_74_iswzA=iswzA;
BITS_8_39_32_Rb=Rc;
BITS_1_62_62_Sb_absolute=Rc@absolute;
BITS_1_63_63_Sb_negate=Rc@negate;
BITS_2_61_60_hsel=iswzB_as_C;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "hadd2__RI"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /OFMT("F16_V2"):ofmt /FTZ("noftz"):ftz /SAT("nosat"):sat
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a} /ISWZ("H1_H0"):iswzA
','F16Imm(64):Sc ',' F16Imm(64):Sc1
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@HADD2_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc))+(1<<INDEX(Sc1));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_REDIRECTABLE_FP16 ;

OPCODES
        HADD2fp16_pipe =  0b10000110000;
        HADD2 =  0b10000110000;

ENCODING
!hadd2__RI_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_78_78_ofmt=ofmt;
BITS_1_80_80_ftz=ftz;
BITS_1_77_77_ntz=sat;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_2_75_74_iswzA=iswzA;
BITS_16_63_48_Sc=Sc;
BITS_16_47_32_Sb=Sc1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "hadd2__RC"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /OFMT("F16_V2"):ofmt /FTZ("noftz"):ftz /SAT("nosat"):sat
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a} /ISWZ("H1_H0"):iswzA
',' [-] [||] C:Sc[UImm(5/0*):Sc_bank]*   [SImm(17)*:Sc_addr] /ISWZ("H1_H0"):iswzB
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sc_bank <= 17) || (Sc_bank >= 24 && Sc_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sc_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@HADD2_c ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc_bank))+(1<<INDEX(Sc_addr));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_REDIRECTABLE_FP16 ;

OPCODES
        HADD2fp16_pipe =  0b11000110000;
        HADD2 =  0b11000110000;

ENCODING
!hadd2__RC_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_78_78_ofmt=ofmt;
BITS_1_80_80_ftz=ftz;
BITS_1_77_77_ntz=sat;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_2_75_74_iswzA=iswzA;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sc_bank,Sc_addr);
BITS_1_62_62_Sb_absolute=Sc@absolute;
BITS_1_63_63_Sb_negate=Sc@negate;
BITS_2_61_60_hsel=iswzB;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



ALTERNATE CLASS "hadd2_32i_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /SAT("nosat"):sat
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a} /ISWZ("H1_H0"):iswzA
','F16Imm(64):Sc ',' F16Imm(64):Sc1
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@HADD2_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc))+(1<<INDEX(Sc1));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_REDIRECTABLE_FP16 ;

OPCODES
        HADD2_32Ifp16_pipe =  0b10000110000;
        HADD2_32I =  0b10000110000;

ENCODING
!hadd2_32i__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_78_78_ofmt=*0;
BITS_1_80_80_ftz=ftz;
BITS_1_77_77_ntz=sat;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_2_75_74_iswzA=iswzA;
BITS_16_63_48_Sc=Sc;
BITS_16_47_32_Sb=Sc1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "hfma2__RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /OFMT("F16_V2"):ofmt /FMZ("nofmz"):fmz /SAT("nosat"):sat
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a} /ISWZ("H1_H0"):iswzA
',' [-] [||] Register:Rb {/REUSE("noreuse"):reuse_src_b} /ISWZ("H1_H0"):iswzB
',' [-] [||] Register:Rc {/REUSE("noreuse"):reuse_src_c} /ISWZ("H1_H0"):iswzC
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((fmz !=`FMZ@INVALID3)) :
 "Invalid fmz field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@HFMA2_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_REDIRECTABLE_FP16 ;

OPCODES
        HFMA2fp16_pipe =  0b1000110001;
        HFMA2 =  0b1000110001;

ENCODING
!hfma2__RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_78_78_ofmt=ofmt;
BITS_2_80_80_76_76_fmz=fmz;
BITS_1_77_77_ntz=sat;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_2_75_74_iswzA=iswzA;
BITS_8_39_32_Rb=Rb;
BITS_1_62_62_Sb_absolute=Rb@absolute;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_2_61_60_hsel=iswzB;
BITS_8_71_64_Rc=Rc;
BITS_1_83_83_Sc_absolute=Rc@absolute;
BITS_1_84_84_clear=Rc@negate;
BITS_2_82_81_iswzC=iswzC;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



CLASS "hfma2__RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /OFMT("F16_V2"):ofmt /FMZ("nofmz"):fmz /SAT("nosat"):sat
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a} /ISWZ("H1_H0"):iswzA
','F16Imm(64):Sb ',' F16Imm(64):Sb1
',' [-] [||] Register:Rc {/REUSE("noreuse"):reuse_src_c} /ISWZ("H1_H0"):iswzC
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((fmz !=`FMZ@INVALID3)) :
 "Invalid fmz field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@HFMA2_Imm_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb))+(1<<INDEX(Sb1));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_REDIRECTABLE_FP16 ;

OPCODES
        HFMA2fp16_pipe =  0b100000110001;
        HFMA2 =  0b100000110001;

ENCODING
!hfma2__RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_78_78_ofmt=ofmt;
BITS_2_80_80_76_76_fmz=fmz;
BITS_1_77_77_ntz=sat;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_2_75_74_iswzA=iswzA;
BITS_16_63_48_Sc=Sb;
BITS_16_47_32_Sb=Sb1;
BITS_8_71_64_Rc=Rc;
BITS_1_83_83_Sc_absolute=Rc@absolute;
BITS_1_84_84_clear=Rc@negate;
BITS_2_82_81_iswzC=iswzC;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "hfma2__RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /OFMT("F16_V2"):ofmt /FMZ("nofmz"):fmz /SAT("nosat"):sat
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a} /ISWZ("H1_H0"):iswzA
',' [-] [||] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr] /ISWZ("H1_H0"):iswzB
',' [-] [||] Register:Rc {/REUSE("noreuse"):reuse_src_c} /ISWZ("H1_H0"):iswzC
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((fmz !=`FMZ@INVALID3)) :
 "Invalid fmz field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@HFMA2_c_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_REDIRECTABLE_FP16 ;

OPCODES
        HFMA2fp16_pipe =  0b101000110001;
        HFMA2 =  0b101000110001;

ENCODING
!hfma2__RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_78_78_ofmt=ofmt;
BITS_2_80_80_76_76_fmz=fmz;
BITS_1_77_77_ntz=sat;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_2_75_74_iswzA=iswzA;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_1_62_62_Sb_absolute=Sb@absolute;
BITS_1_63_63_Sb_negate=Sb@negate;
BITS_2_61_60_hsel=iswzB;
BITS_8_71_64_Rc=Rc;
BITS_1_83_83_Sc_absolute=Rc@absolute;
BITS_1_84_84_clear=Rc@negate;
BITS_2_82_81_iswzC=iswzC;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "hfma2__RRC"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /OFMT("F16_V2"):ofmt /FMZ("nofmz"):fmz /SAT("nosat"):sat
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a} /ISWZ("H1_H0"):iswzA
',' [-] [||] Register:Rb {/REUSE("noreuse"):reuse_src_b} /ISWZ("H1_H0"):iswzC_as_B
',' [-] [||] C:Sc[UImm(5/0*):Sc_bank]*   [SImm(17)*:Sc_addr] /ISWZ("H1_H0"):iswzB_as_C
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((fmz !=`FMZ@INVALID3)) :
 "Invalid fmz field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sc_bank <= 17) || (Sc_bank >= 24 && Sc_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sc_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@HFMA2_Rb_c ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc_bank))+(1<<INDEX(Sc_addr));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_REDIRECTABLE_FP16 ;

OPCODES
        HFMA2fp16_pipe =  0b11000110001;
        HFMA2 =  0b11000110001;

ENCODING
!hfma2__RRC_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_78_78_ofmt=ofmt;
BITS_2_80_80_76_76_fmz=fmz;
BITS_1_77_77_ntz=sat;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_2_75_74_iswzA=iswzA;
BITS_8_71_64_Rc=Rb;
BITS_1_83_83_Sc_absolute=Rb@absolute;
BITS_1_84_84_clear=Rb@negate;
BITS_2_82_81_iswzC=iswzC_as_B;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sc_bank,Sc_addr);
BITS_1_62_62_Sb_absolute=Sc@absolute;
BITS_1_63_63_Sb_negate=Sc@negate;
BITS_2_61_60_hsel=iswzB_as_C;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



CLASS "hfma2__RRI"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /OFMT("F16_V2"):ofmt /FMZ("nofmz"):fmz /SAT("nosat"):sat
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a} /ISWZ("H1_H0"):iswzA
',' [-] [||] Register:Rb {/REUSE("noreuse"):reuse_src_b} /ISWZ("H1_H0"):iswzC_as_B
','F16Imm(64):Sc ',' F16Imm(64):Sc1
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((fmz !=`FMZ@INVALID3)) :
 "Invalid fmz field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@HFMA2_Rb_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc))+(1<<INDEX(Sc1));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_REDIRECTABLE_FP16 ;

OPCODES
        HFMA2fp16_pipe =  0b10000110001;
        HFMA2 =  0b10000110001;

ENCODING
!hfma2__RRI_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_78_78_ofmt=ofmt;
BITS_2_80_80_76_76_fmz=fmz;
BITS_1_77_77_ntz=sat;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_2_75_74_iswzA=iswzA;
BITS_8_71_64_Rc=Rb;
BITS_1_83_83_Sc_absolute=Rb@absolute;
BITS_1_84_84_clear=Rb@negate;
BITS_2_82_81_iswzC=iswzC_as_B;
BITS_16_63_48_Sc=Sc;
BITS_16_47_32_Sb=Sc1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



ALTERNATE CLASS "hfma2_32i_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FMZ("nofmz"):fmz
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a} /ISWZ("H1_H0"):iswzA
','F16Imm(64):Sb ',' F16Imm(64):Sb1
',' [-] [||] Register:Rc {/REUSE("noreuse"):reuse_src_c} /ISWZ("H1_H0"):iswzC
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((fmz !=`FMZ@INVALID3)) :
 "Invalid fmz field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@HFMA2_Imm_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb))+(1<<INDEX(Sb1));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_REDIRECTABLE_FP16 ;

OPCODES
        HFMA2_32Ifp16_pipe =  0b100000110001;
        HFMA2_32I =  0b100000110001;

ENCODING
!hfma2_32i__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_78_78_ofmt=*0;
BITS_2_80_80_76_76_fmz=fmz;
BITS_1_77_77_ntz=*0;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_2_75_74_iswzA=iswzA;
BITS_16_63_48_Sc=Sb;
BITS_16_47_32_Sb=Sb1;
BITS_8_71_64_Rc=Rc;
BITS_1_83_83_Sc_absolute=Rc@absolute;
BITS_1_84_84_clear=Rc@negate;
BITS_2_82_81_iswzC=iswzC;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "hmma__444_f16_f16"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ONLY444:size /F16ONLY_hmma:dstfmt /F16ONLY_hmma:srcfmt /SATFINITE("nosatfinite"):satfinite
Register:Rd
',' [-] Register:Ra {/REUSE("noreuse"):reuse_src_a} /TNSPA:tnspA
',' [-] Register:Rb {/REUSE("noreuse"):reuse_src_b} /TNSPA:tnspB
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (size==0) :
 "HMMA.444 is unsupported!"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-2))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
MISALIGNED_REG_ERROR
 (((Rb)+((Rb)==`Register@RZ)) % 2) == 0 :
 "Register Rb is misaligned"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@HMMA_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 64;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_HMMA ;

OPCODES
        HMMAfp16_pipe =  0b1000110110;
        HMMA =  0b1000110110;

ENCODING
!hmma__444_f16_f16_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_75_75_size=*size;
BITS_1_76_76_private=*dstfmt;
BITS_1_78_78_ofmt=*srcfmt;
BITS_2_80_79_sem=*0;
BITS_1_77_77_ntz=satfinite;
BITS_1_81_81_andC=*0;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@negate;
BITS_1_73_73_sz=tnspA;
BITS_8_39_32_Rb=Rb;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_1_74_74_tnspB=tnspB;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



CLASS "hmma__444_f32"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ONLY444:size /F32ONLY_hmma:dstfmt /F32ONLY_hmma:srcfmt /STEP_STEP0_STEP1:step /SATFINITE("nosatfinite"):satfinite
Register:Rd
',' [-] Register:Ra {/REUSE("noreuse"):reuse_src_a} /TNSPA:tnspA
',' [-] Register:Rb {/REUSE("noreuse"):reuse_src_b} /TNSPA:tnspB
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (size==0) :
 "HMMA.444 is unsupported!"
ILLEGAL_INSTR_ENCODING_ERROR
 ((step !=`STEP_STEP0_STEP1@INVALID2)&&(step !=`STEP_STEP0_STEP1@INVALID3)) :
 "Invalid step field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-2))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
MISALIGNED_REG_ERROR
 (((Rb)+((Rb)==`Register@RZ)) % 2) == 0 :
 "Register Rb is misaligned"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@HMMA_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 64;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_HMMA ;

OPCODES
        HMMAfp16_pipe =  0b1000110110;
        HMMA =  0b1000110110;

ENCODING
!hmma__444_f32_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_75_75_size=*size;
BITS_1_76_76_private=*dstfmt;
BITS_1_78_78_ofmt=*srcfmt;
BITS_2_80_79_sem=step;
BITS_1_77_77_ntz=satfinite;
BITS_1_81_81_andC=*0;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@negate;
BITS_1_73_73_sz=tnspA;
BITS_8_39_32_Rb=Rb;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_1_74_74_tnspB=tnspB;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



CLASS "hmma__884_f16_f16"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ONLY884:size /F16ONLY_hmma:dstfmt /F16ONLY_hmma:srcfmt /STEP_STEP0_STEP1:step /SATFINITE("nosatfinite"):satfinite
Register:Rd
',' [-] Register:Ra {/REUSE("noreuse"):reuse_src_a} /TNSPA:tnspA
',' [-] Register:Rb {/REUSE("noreuse"):reuse_src_b} /TNSPA:tnspB
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (size==0) :
 "HMMA.444 is unsupported!"
ILLEGAL_INSTR_ENCODING_ERROR
 ((step !=`STEP_STEP0_STEP1@INVALID2)&&(step !=`STEP_STEP0_STEP1@INVALID3)) :
 "Invalid step field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-2))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
MISALIGNED_REG_ERROR
 (((Rb)+((Rb)==`Register@RZ)) % 2) == 0 :
 "Register Rb is misaligned"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@HMMA_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 64;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_HMMA ;

OPCODES
        HMMAfp16_pipe =  0b1000110110;
        HMMA =  0b1000110110;

ENCODING
!hmma__884_f16_f16_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_75_75_size=*size;
BITS_1_76_76_private=*dstfmt;
BITS_1_78_78_ofmt=*srcfmt;
BITS_2_80_79_sem=step;
BITS_1_77_77_ntz=satfinite;
BITS_1_81_81_andC=*0;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@negate;
BITS_1_73_73_sz=tnspA;
BITS_8_39_32_Rb=Rb;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_1_74_74_tnspB=tnspB;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



CLASS "hmma__884_f32"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ONLY884:size /F32ONLY_hmma:dstfmt /FloatNo64:srcfmt /STEPS:step /SATFINITE("nosatfinite"):satfinite
Register:Rd
',' [-] Register:Ra {/REUSE("noreuse"):reuse_src_a} /TNSPA:tnspA
',' [-] Register:Rb {/REUSE("noreuse"):reuse_src_b} /TNSPA:tnspB
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (size==0) :
 "HMMA.444 is unsupported!"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-2))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
MISALIGNED_REG_ERROR
 (((Rb)+((Rb)==`Register@RZ)) % 2) == 0 :
 "Register Rb is misaligned"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@HMMA_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 64;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_HMMA ;

OPCODES
        HMMAfp16_pipe =  0b1000110110;
        HMMA =  0b1000110110;

ENCODING
!hmma__884_f32_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_75_75_size=*size;
BITS_1_76_76_private=*dstfmt;
BITS_1_78_78_ofmt=srcfmt;
BITS_2_80_79_sem=step;
BITS_1_77_77_ntz=satfinite;
BITS_1_81_81_andC=*0;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@negate;
BITS_1_73_73_sz=tnspA;
BITS_8_39_32_Rb=Rb;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_1_74_74_tnspB=tnspB;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



ALTERNATE CLASS "hmma_old_row_col__444_f16_f16"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ONLY444:size /F16ONLY_hmma:dstfmt /F16ONLY_hmma:srcfmt /SATFINITE("nosatfinite"):satfinite
Register:Rd
',' [-] Register:Ra {/REUSE("noreuse"):reuse_src_a} /TNSPA_hmma("notnspa_hmma"):tnspA
',' [-] Register:Rb {/REUSE("noreuse"):reuse_src_b} /TNSPA_hmma("notnspa_hmma"):tnspB
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (size==0) :
 "HMMA.444 is unsupported!"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-2))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
MISALIGNED_REG_ERROR
 (((Rb)+((Rb)==`Register@RZ)) % 2) == 0 :
 "Register Rb is misaligned"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@HMMA_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 64;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_HMMA ;

OPCODES
        HMMAfp16_pipe =  0b1000110110;
        HMMA =  0b1000110110;

ENCODING
!hmma_old_row_col__444_f16_f16_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_75_75_size=*size;
BITS_1_76_76_private=*dstfmt;
BITS_1_78_78_ofmt=*srcfmt;
BITS_2_80_79_sem=*0;
BITS_1_77_77_ntz=satfinite;
BITS_1_81_81_andC=*0;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@negate;
BITS_1_73_73_sz=tnspA;
BITS_8_39_32_Rb=Rb;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_1_74_74_tnspB=tnspB;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



ALTERNATE CLASS "hmma_old_row_col__444_f32"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ONLY444:size /F32ONLY_hmma:dstfmt /F32ONLY_hmma:srcfmt /STEP_STEP0_STEP1:step /SATFINITE("nosatfinite"):satfinite
Register:Rd
',' [-] Register:Ra {/REUSE("noreuse"):reuse_src_a} /TNSPA_hmma("notnspa_hmma"):tnspA
',' [-] Register:Rb {/REUSE("noreuse"):reuse_src_b} /TNSPA_hmma("notnspa_hmma"):tnspB
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (size==0) :
 "HMMA.444 is unsupported!"
ILLEGAL_INSTR_ENCODING_ERROR
 ((step !=`STEP_STEP0_STEP1@INVALID2)&&(step !=`STEP_STEP0_STEP1@INVALID3)) :
 "Invalid step field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-2))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
MISALIGNED_REG_ERROR
 (((Rb)+((Rb)==`Register@RZ)) % 2) == 0 :
 "Register Rb is misaligned"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@HMMA_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 64;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_HMMA ;

OPCODES
        HMMAfp16_pipe =  0b1000110110;
        HMMA =  0b1000110110;

ENCODING
!hmma_old_row_col__444_f32_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_75_75_size=*size;
BITS_1_76_76_private=*dstfmt;
BITS_1_78_78_ofmt=*srcfmt;
BITS_2_80_79_sem=step;
BITS_1_77_77_ntz=satfinite;
BITS_1_81_81_andC=*0;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@negate;
BITS_1_73_73_sz=tnspA;
BITS_8_39_32_Rb=Rb;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_1_74_74_tnspB=tnspB;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



ALTERNATE CLASS "hmma_old_row_col__884_f16_f16"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ONLY884:size /F16ONLY_hmma:dstfmt /F16ONLY_hmma:srcfmt /STEP_STEP0_STEP1:step /SATFINITE("nosatfinite"):satfinite
Register:Rd
',' [-] Register:Ra {/REUSE("noreuse"):reuse_src_a} /TNSPA_hmma("notnspa_hmma"):tnspA
',' [-] Register:Rb {/REUSE("noreuse"):reuse_src_b} /TNSPA_hmma("notnspa_hmma"):tnspB
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (size==0) :
 "HMMA.444 is unsupported!"
ILLEGAL_INSTR_ENCODING_ERROR
 ((step !=`STEP_STEP0_STEP1@INVALID2)&&(step !=`STEP_STEP0_STEP1@INVALID3)) :
 "Invalid step field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-2))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
MISALIGNED_REG_ERROR
 (((Rb)+((Rb)==`Register@RZ)) % 2) == 0 :
 "Register Rb is misaligned"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@HMMA_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 64;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_HMMA ;

OPCODES
        HMMAfp16_pipe =  0b1000110110;
        HMMA =  0b1000110110;

ENCODING
!hmma_old_row_col__884_f16_f16_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_75_75_size=*size;
BITS_1_76_76_private=*dstfmt;
BITS_1_78_78_ofmt=*srcfmt;
BITS_2_80_79_sem=step;
BITS_1_77_77_ntz=satfinite;
BITS_1_81_81_andC=*0;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@negate;
BITS_1_73_73_sz=tnspA;
BITS_8_39_32_Rb=Rb;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_1_74_74_tnspB=tnspB;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



ALTERNATE CLASS "hmma_old_row_col__884_f32"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ONLY884:size /F32ONLY_hmma:dstfmt /FloatNo64:srcfmt /STEPS:step /SATFINITE("nosatfinite"):satfinite
Register:Rd
',' [-] Register:Ra {/REUSE("noreuse"):reuse_src_a} /TNSPA_hmma("notnspa_hmma"):tnspA
',' [-] Register:Rb {/REUSE("noreuse"):reuse_src_b} /TNSPA_hmma("notnspa_hmma"):tnspB
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (size==0) :
 "HMMA.444 is unsupported!"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-2))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
MISALIGNED_REG_ERROR
 (((Rb)+((Rb)==`Register@RZ)) % 2) == 0 :
 "Register Rb is misaligned"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@HMMA_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 64;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_HMMA ;

OPCODES
        HMMAfp16_pipe =  0b1000110110;
        HMMA =  0b1000110110;

ENCODING
!hmma_old_row_col__884_f32_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_75_75_size=*size;
BITS_1_76_76_private=*dstfmt;
BITS_1_78_78_ofmt=srcfmt;
BITS_2_80_79_sem=step;
BITS_1_77_77_ntz=satfinite;
BITS_1_81_81_andC=*0;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@negate;
BITS_1_73_73_sz=tnspA;
BITS_8_39_32_Rb=Rb;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_1_74_74_tnspB=tnspB;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



ALTERNATE CLASS "hmma_848__444_f16_f16"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ONLY444:size /F16ONLY_hmma:dstfmt /F16ONLY_hmma:srcfmt /SATFINITE("nosatfinite"):satfinite
Register:Rd
',' [-] Register:Ra {/REUSE("noreuse"):reuse_src_a} /TNSPA:tnspA
',' [-] Register:Rb {/REUSE("noreuse"):reuse_src_b} /TNSPA:tnspB
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (size==0) :
 "HMMA.444 is unsupported!"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-2))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
MISALIGNED_REG_ERROR
 (((Rb)+((Rb)==`Register@RZ)) % 2) == 0 :
 "Register Rb is misaligned"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@HMMA_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 64;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_HMMA ;

OPCODES
        HMMAfp16_pipe =  0b1000110110;
        HMMA =  0b1000110110;

ENCODING
!hmma_848__444_f16_f16_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_75_75_size=*size;
BITS_1_76_76_private=*dstfmt;
BITS_1_78_78_ofmt=*srcfmt;
BITS_2_80_79_sem=*0;
BITS_1_77_77_ntz=satfinite;
BITS_1_81_81_andC=*0;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@negate;
BITS_1_73_73_sz=tnspA;
BITS_8_39_32_Rb=Rb;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_1_74_74_tnspB=tnspB;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



ALTERNATE CLASS "hmma_848__444_f32"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ONLY444:size /F32ONLY_hmma:dstfmt /F32ONLY_hmma:srcfmt /STEP_STEP0_STEP1:step /SATFINITE("nosatfinite"):satfinite
Register:Rd
',' [-] Register:Ra {/REUSE("noreuse"):reuse_src_a} /TNSPA:tnspA
',' [-] Register:Rb {/REUSE("noreuse"):reuse_src_b} /TNSPA:tnspB
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (size==0) :
 "HMMA.444 is unsupported!"
ILLEGAL_INSTR_ENCODING_ERROR
 ((step !=`STEP_STEP0_STEP1@INVALID2)&&(step !=`STEP_STEP0_STEP1@INVALID3)) :
 "Invalid step field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-2))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
MISALIGNED_REG_ERROR
 (((Rb)+((Rb)==`Register@RZ)) % 2) == 0 :
 "Register Rb is misaligned"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@HMMA_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 64;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_HMMA ;

OPCODES
        HMMAfp16_pipe =  0b1000110110;
        HMMA =  0b1000110110;

ENCODING
!hmma_848__444_f32_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_75_75_size=*size;
BITS_1_76_76_private=*dstfmt;
BITS_1_78_78_ofmt=*srcfmt;
BITS_2_80_79_sem=step;
BITS_1_77_77_ntz=satfinite;
BITS_1_81_81_andC=*0;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@negate;
BITS_1_73_73_sz=tnspA;
BITS_8_39_32_Rb=Rb;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_1_74_74_tnspB=tnspB;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



ALTERNATE CLASS "hmma_848__884_f16_f16"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ONLY848:size /F16ONLY_hmma:dstfmt /F16ONLY_hmma:srcfmt /STEP_STEP0_STEP1:step /SATFINITE("nosatfinite"):satfinite
Register:Rd
',' [-] Register:Ra {/REUSE("noreuse"):reuse_src_a} /TNSPA:tnspA
',' [-] Register:Rb {/REUSE("noreuse"):reuse_src_b} /TNSPA:tnspB
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (size==0) :
 "HMMA.444 is unsupported!"
ILLEGAL_INSTR_ENCODING_ERROR
 ((step !=`STEP_STEP0_STEP1@INVALID2)&&(step !=`STEP_STEP0_STEP1@INVALID3)) :
 "Invalid step field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-2))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
MISALIGNED_REG_ERROR
 (((Rb)+((Rb)==`Register@RZ)) % 2) == 0 :
 "Register Rb is misaligned"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@HMMA_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 64;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_HMMA ;

OPCODES
        HMMAfp16_pipe =  0b1000110110;
        HMMA =  0b1000110110;

ENCODING
!hmma_848__884_f16_f16_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_75_75_size=*size;
BITS_1_76_76_private=*dstfmt;
BITS_1_78_78_ofmt=*srcfmt;
BITS_2_80_79_sem=step;
BITS_1_77_77_ntz=satfinite;
BITS_1_81_81_andC=*0;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@negate;
BITS_1_73_73_sz=tnspA;
BITS_8_39_32_Rb=Rb;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_1_74_74_tnspB=tnspB;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



ALTERNATE CLASS "hmma_848__884_f32"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ONLY848:size /F32ONLY_hmma:dstfmt /FloatNo64:srcfmt /STEPS:step /SATFINITE("nosatfinite"):satfinite
Register:Rd
',' [-] Register:Ra {/REUSE("noreuse"):reuse_src_a} /TNSPA:tnspA
',' [-] Register:Rb {/REUSE("noreuse"):reuse_src_b} /TNSPA:tnspB
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (size==0) :
 "HMMA.444 is unsupported!"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-2))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
MISALIGNED_REG_ERROR
 (((Rb)+((Rb)==`Register@RZ)) % 2) == 0 :
 "Register Rb is misaligned"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@HMMA_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 64;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_HMMA ;

OPCODES
        HMMAfp16_pipe =  0b1000110110;
        HMMA =  0b1000110110;

ENCODING
!hmma_848__884_f32_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_75_75_size=*size;
BITS_1_76_76_private=*dstfmt;
BITS_1_78_78_ofmt=srcfmt;
BITS_2_80_79_sem=step;
BITS_1_77_77_ntz=satfinite;
BITS_1_81_81_andC=*0;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@negate;
BITS_1_73_73_sz=tnspA;
BITS_8_39_32_Rb=Rb;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_1_74_74_tnspB=tnspB;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



ALTERNATE CLASS "hmma_848_old_row_col__444_f16_f16"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ONLY444:size /F16ONLY_hmma:dstfmt /F16ONLY_hmma:srcfmt /SATFINITE("nosatfinite"):satfinite
Register:Rd
',' [-] Register:Ra {/REUSE("noreuse"):reuse_src_a} /TNSPA_hmma("notnspa_hmma"):tnspA
',' [-] Register:Rb {/REUSE("noreuse"):reuse_src_b} /TNSPA_hmma("notnspa_hmma"):tnspB
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (size==0) :
 "HMMA.444 is unsupported!"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-2))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
MISALIGNED_REG_ERROR
 (((Rb)+((Rb)==`Register@RZ)) % 2) == 0 :
 "Register Rb is misaligned"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@HMMA_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 64;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_HMMA ;

OPCODES
        HMMAfp16_pipe =  0b1000110110;
        HMMA =  0b1000110110;

ENCODING
!hmma_848_old_row_col__444_f16_f16_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_75_75_size=*size;
BITS_1_76_76_private=*dstfmt;
BITS_1_78_78_ofmt=*srcfmt;
BITS_2_80_79_sem=*0;
BITS_1_77_77_ntz=satfinite;
BITS_1_81_81_andC=*0;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@negate;
BITS_1_73_73_sz=tnspA;
BITS_8_39_32_Rb=Rb;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_1_74_74_tnspB=tnspB;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



ALTERNATE CLASS "hmma_848_old_row_col__444_f32"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ONLY444:size /F32ONLY_hmma:dstfmt /F32ONLY_hmma:srcfmt /STEP_STEP0_STEP1:step /SATFINITE("nosatfinite"):satfinite
Register:Rd
',' [-] Register:Ra {/REUSE("noreuse"):reuse_src_a} /TNSPA_hmma("notnspa_hmma"):tnspA
',' [-] Register:Rb {/REUSE("noreuse"):reuse_src_b} /TNSPA_hmma("notnspa_hmma"):tnspB
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (size==0) :
 "HMMA.444 is unsupported!"
ILLEGAL_INSTR_ENCODING_ERROR
 ((step !=`STEP_STEP0_STEP1@INVALID2)&&(step !=`STEP_STEP0_STEP1@INVALID3)) :
 "Invalid step field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-2))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
MISALIGNED_REG_ERROR
 (((Rb)+((Rb)==`Register@RZ)) % 2) == 0 :
 "Register Rb is misaligned"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@HMMA_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 64;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_HMMA ;

OPCODES
        HMMAfp16_pipe =  0b1000110110;
        HMMA =  0b1000110110;

ENCODING
!hmma_848_old_row_col__444_f32_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_75_75_size=*size;
BITS_1_76_76_private=*dstfmt;
BITS_1_78_78_ofmt=*srcfmt;
BITS_2_80_79_sem=step;
BITS_1_77_77_ntz=satfinite;
BITS_1_81_81_andC=*0;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@negate;
BITS_1_73_73_sz=tnspA;
BITS_8_39_32_Rb=Rb;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_1_74_74_tnspB=tnspB;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



ALTERNATE CLASS "hmma_848_old_row_col__884_f16_f16"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ONLY848:size /F16ONLY_hmma:dstfmt /F16ONLY_hmma:srcfmt /STEP_STEP0_STEP1:step /SATFINITE("nosatfinite"):satfinite
Register:Rd
',' [-] Register:Ra {/REUSE("noreuse"):reuse_src_a} /TNSPA_hmma("notnspa_hmma"):tnspA
',' [-] Register:Rb {/REUSE("noreuse"):reuse_src_b} /TNSPA_hmma("notnspa_hmma"):tnspB
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (size==0) :
 "HMMA.444 is unsupported!"
ILLEGAL_INSTR_ENCODING_ERROR
 ((step !=`STEP_STEP0_STEP1@INVALID2)&&(step !=`STEP_STEP0_STEP1@INVALID3)) :
 "Invalid step field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-2))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
MISALIGNED_REG_ERROR
 (((Rb)+((Rb)==`Register@RZ)) % 2) == 0 :
 "Register Rb is misaligned"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@HMMA_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 64;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_HMMA ;

OPCODES
        HMMAfp16_pipe =  0b1000110110;
        HMMA =  0b1000110110;

ENCODING
!hmma_848_old_row_col__884_f16_f16_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_75_75_size=*size;
BITS_1_76_76_private=*dstfmt;
BITS_1_78_78_ofmt=*srcfmt;
BITS_2_80_79_sem=step;
BITS_1_77_77_ntz=satfinite;
BITS_1_81_81_andC=*0;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@negate;
BITS_1_73_73_sz=tnspA;
BITS_8_39_32_Rb=Rb;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_1_74_74_tnspB=tnspB;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



ALTERNATE CLASS "hmma_848_old_row_col__884_f32"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ONLY848:size /F32ONLY_hmma:dstfmt /FloatNo64:srcfmt /STEPS:step /SATFINITE("nosatfinite"):satfinite
Register:Rd
',' [-] Register:Ra {/REUSE("noreuse"):reuse_src_a} /TNSPA_hmma("notnspa_hmma"):tnspA
',' [-] Register:Rb {/REUSE("noreuse"):reuse_src_b} /TNSPA_hmma("notnspa_hmma"):tnspB
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (size==0) :
 "HMMA.444 is unsupported!"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-2))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
MISALIGNED_REG_ERROR
 (((Rb)+((Rb)==`Register@RZ)) % 2) == 0 :
 "Register Rb is misaligned"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@HMMA_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 64;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_HMMA ;

OPCODES
        HMMAfp16_pipe =  0b1000110110;
        HMMA =  0b1000110110;

ENCODING
!hmma_848_old_row_col__884_f32_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_75_75_size=*size;
BITS_1_76_76_private=*dstfmt;
BITS_1_78_78_ofmt=srcfmt;
BITS_2_80_79_sem=step;
BITS_1_77_77_ntz=satfinite;
BITS_1_81_81_andC=*0;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@negate;
BITS_1_73_73_sz=tnspA;
BITS_8_39_32_Rb=Rb;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_1_74_74_tnspB=tnspB;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



CLASS "hmul2__RR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /OFMT("F16_V2"):ofmt /FMZ("nofmz"):fmz /SAT("nosat"):sat
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a} /ISWZ("H1_H0"):iswzA
',' [-] [||] Register:Rb {/REUSE("noreuse"):reuse_src_b} /ISWZ("H1_H0"):iswzB
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((fmz !=`FMZ@INVALID3)) :
 "Invalid fmz field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@HMUL2_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_REDIRECTABLE_FP16 ;

OPCODES
        HMUL2fp16_pipe =  0b1000110010;
        HMUL2 =  0b1000110010;

ENCODING
!hmul2__RR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_78_78_ofmt=ofmt;
BITS_2_80_80_76_76_fmz=fmz;
BITS_1_77_77_ntz=sat;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_2_75_74_iswzA=iswzA;
BITS_8_39_32_Rb=Rb;
BITS_1_62_62_Sb_absolute=Rb@absolute;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_2_61_60_hsel=iswzB;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



CLASS "hmul2__RI"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /OFMT("F16_V2"):ofmt /FMZ("nofmz"):fmz /SAT("nosat"):sat
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a} /ISWZ("H1_H0"):iswzA
','F16Imm(64):Sb ',' F16Imm(64):Sb1
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((fmz !=`FMZ@INVALID3)) :
 "Invalid fmz field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@HMUL2_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb))+(1<<INDEX(Sb1));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_REDIRECTABLE_FP16 ;

OPCODES
        HMUL2fp16_pipe =  0b100000110010;
        HMUL2 =  0b100000110010;

ENCODING
!hmul2__RI_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_78_78_ofmt=ofmt;
BITS_2_80_80_76_76_fmz=fmz;
BITS_1_77_77_ntz=sat;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_2_75_74_iswzA=iswzA;
BITS_16_63_48_Sc=Sb;
BITS_16_47_32_Sb=Sb1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "hmul2__RC"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /OFMT("F16_V2"):ofmt /FMZ("nofmz"):fmz /SAT("nosat"):sat
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a} /ISWZ("H1_H0"):iswzA
',' [-] [||] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr] /ISWZ("H1_H0"):iswzB
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((fmz !=`FMZ@INVALID3)) :
 "Invalid fmz field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@HMUL2_c ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_REDIRECTABLE_FP16 ;

OPCODES
        HMUL2fp16_pipe =  0b101000110010;
        HMUL2 =  0b101000110010;

ENCODING
!hmul2__RC_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_78_78_ofmt=ofmt;
BITS_2_80_80_76_76_fmz=fmz;
BITS_1_77_77_ntz=sat;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_2_75_74_iswzA=iswzA;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_1_62_62_Sb_absolute=Sb@absolute;
BITS_1_63_63_Sb_negate=Sb@negate;
BITS_2_61_60_hsel=iswzB;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



ALTERNATE CLASS "hmul2_32i_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FMZ("nofmz"):fmz /SAT("nosat"):sat
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a} /ISWZ("H1_H0"):iswzA
','F16Imm(64):Sb ',' F16Imm(64):Sb1
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((fmz !=`FMZ@INVALID3)) :
 "Invalid fmz field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@HMUL2_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb))+(1<<INDEX(Sb1));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_REDIRECTABLE_FP16 ;

OPCODES
        HMUL2_32Ifp16_pipe =  0b100000110010;
        HMUL2_32I =  0b100000110010;

ENCODING
!hmul2_32i__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_78_78_ofmt=*0;
BITS_2_80_80_76_76_fmz=fmz;
BITS_1_77_77_ntz=sat;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_2_75_74_iswzA=iswzA;
BITS_16_63_48_Sc=Sb;
BITS_16_47_32_Sb=Sb1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "hset2__RR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BVal("BM"):bval /FCMP:cmp /FTZ("noftz"):ftz /Bop:bop
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a} /ISWZ("H1_H0"):iswzA
',' [-] [||] Register:Rc {/REUSE("noreuse"):reuse_src_c} /ISWZ("H1_H0"):iswzB_as_C
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((bop !=`Bop@INVALID3)) :
 "Invalid bop field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@HSET2_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_REDIRECTABLE_FP16 ;

OPCODES
        HSET2fp16_pipe =  0b1000110011;
        HSET2 =  0b1000110011;

ENCODING
!hset2__RR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_71_71_bval=bval;
BITS_4_79_76_cmp=cmp;
BITS_1_80_80_ftz=ftz;
BITS_2_70_69_bop=bop;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_2_75_74_iswzA=iswzA;
BITS_8_39_32_Rb=Rc;
BITS_1_62_62_Sb_absolute=Rc@absolute;
BITS_1_63_63_Sb_negate=Rc@negate;
BITS_2_61_60_hsel=iswzB_as_C;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "hset2__RI"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BVal("BM"):bval /FCMP:cmp /FTZ("noftz"):ftz /Bop:bop
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a} /ISWZ("H1_H0"):iswzA
','F16Imm(64):Sc ',' F16Imm(64):Sc1
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((bop !=`Bop@INVALID3)) :
 "Invalid bop field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@HSET2_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc))+(1<<INDEX(Sc1));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_REDIRECTABLE_FP16 ;

OPCODES
        HSET2fp16_pipe =  0b10000110011;
        HSET2 =  0b10000110011;

ENCODING
!hset2__RI_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_71_71_bval=bval;
BITS_4_79_76_cmp=cmp;
BITS_1_80_80_ftz=ftz;
BITS_2_70_69_bop=bop;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_2_75_74_iswzA=iswzA;
BITS_16_63_48_Sc=Sc;
BITS_16_47_32_Sb=Sc1;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "hset2__RC"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BVal("BM"):bval /FCMP:cmp /FTZ("noftz"):ftz /Bop:bop
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a} /ISWZ("H1_H0"):iswzA
',' [-] [||] C:Sc[UImm(5/0*):Sc_bank]*   [SImm(17)*:Sc_addr] /ISWZ("H1_H0"):iswzB
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((bop !=`Bop@INVALID3)) :
 "Invalid bop field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sc_bank <= 17) || (Sc_bank >= 24 && Sc_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sc_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@HSET2_c ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc_bank))+(1<<INDEX(Sc_addr));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_REDIRECTABLE_FP16 ;

OPCODES
        HSET2fp16_pipe =  0b11000110011;
        HSET2 =  0b11000110011;

ENCODING
!hset2__RC_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_71_71_bval=bval;
BITS_4_79_76_cmp=cmp;
BITS_1_80_80_ftz=ftz;
BITS_2_70_69_bop=bop;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_2_75_74_iswzA=iswzA;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sc_bank,Sc_addr);
BITS_1_62_62_Sb_absolute=Sc@absolute;
BITS_1_63_63_Sb_negate=Sc@negate;
BITS_2_61_60_hsel=iswzB;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



ALTERNATE CLASS "hset2_noBop__RR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BVal("BM"):bval /FCMP:cmp /FTZ("noftz"):ftz
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a} /ISWZ("H1_H0"):iswzA
',' [-] [||] Register:Rc {/REUSE("noreuse"):reuse_src_c} /ISWZ("H1_H0"):iswzB_as_C
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@HSET2_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_REDIRECTABLE_FP16 ;

OPCODES
        HSET2fp16_pipe =  0b1000110011;
        HSET2 =  0b1000110011;

ENCODING
!hset2_noBop__RR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_71_71_bval=bval;
BITS_4_79_76_cmp=cmp;
BITS_1_80_80_ftz=ftz;
BITS_2_70_69_bop=*0;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_2_75_74_iswzA=iswzA;
BITS_8_39_32_Rb=Rc;
BITS_1_62_62_Sb_absolute=Rc@absolute;
BITS_1_63_63_Sb_negate=Rc@negate;
BITS_2_61_60_hsel=iswzB_as_C;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*0;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



ALTERNATE CLASS "hset2_noBop__RI"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BVal("BM"):bval /FCMP:cmp /FTZ("noftz"):ftz
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a} /ISWZ("H1_H0"):iswzA
','F16Imm(64):Sc ',' F16Imm(64):Sc1
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@HSET2_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc))+(1<<INDEX(Sc1));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_REDIRECTABLE_FP16 ;

OPCODES
        HSET2fp16_pipe =  0b10000110011;
        HSET2 =  0b10000110011;

ENCODING
!hset2_noBop__RI_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_71_71_bval=bval;
BITS_4_79_76_cmp=cmp;
BITS_1_80_80_ftz=ftz;
BITS_2_70_69_bop=*0;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_2_75_74_iswzA=iswzA;
BITS_16_63_48_Sc=Sc;
BITS_16_47_32_Sb=Sc1;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*0;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



ALTERNATE CLASS "hset2_noBop__RC"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BVal("BM"):bval /FCMP:cmp /FTZ("noftz"):ftz
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a} /ISWZ("H1_H0"):iswzA
',' [-] [||] C:Sc[UImm(5/0*):Sc_bank]*   [SImm(17)*:Sc_addr] /ISWZ("H1_H0"):iswzB
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sc_bank <= 17) || (Sc_bank >= 24 && Sc_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sc_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@HSET2_c ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc_bank))+(1<<INDEX(Sc_addr));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_REDIRECTABLE_FP16 ;

OPCODES
        HSET2fp16_pipe =  0b11000110011;
        HSET2 =  0b11000110011;

ENCODING
!hset2_noBop__RC_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_71_71_bval=bval;
BITS_4_79_76_cmp=cmp;
BITS_1_80_80_ftz=ftz;
BITS_2_70_69_bop=*0;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_2_75_74_iswzA=iswzA;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sc_bank,Sc_addr);
BITS_1_62_62_Sb_absolute=Sc@absolute;
BITS_1_63_63_Sb_negate=Sc@negate;
BITS_2_61_60_hsel=iswzB;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*0;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "hsetp2__RR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FCMP:cmp /H_AND("noh_and"):h_and /FTZ("noftz"):ftz /Bop:bop
Predicate:Pu
','Predicate:Pv
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a} /ISWZ("H1_H0"):iswzA
',' [-] [||] Register:Rc {/REUSE("noreuse"):reuse_src_c} /ISWZ("H1_H0"):iswzB_as_C
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((bop !=`Bop@INVALID3)) :
 "Invalid bop field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@HSETP2_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_REDIRECTABLE_FP16 ;

OPCODES
        HSETP2fp16_pipe =  0b1000110100;
        HSETP2 =  0b1000110100;

ENCODING
!hsetp2__RR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_4_79_76_cmp=cmp;
BITS_1_71_71_bval=h_and;
BITS_1_80_80_ftz=ftz;
BITS_2_70_69_bop=bop;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=Pv;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_2_75_74_iswzA=iswzA;
BITS_8_39_32_Rb=Rc;
BITS_1_62_62_Sb_absolute=Rc@absolute;
BITS_1_63_63_Sb_negate=Rc@negate;
BITS_2_61_60_hsel=iswzB_as_C;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "hsetp2__RI"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FCMP:cmp /H_AND("noh_and"):h_and /FTZ("noftz"):ftz /Bop:bop
Predicate:Pu
','Predicate:Pv
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a} /ISWZ("H1_H0"):iswzA
','F16Imm(64):Sc ',' F16Imm(64):Sc1
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((bop !=`Bop@INVALID3)) :
 "Invalid bop field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@HSETP2_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc))+(1<<INDEX(Sc1));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_REDIRECTABLE_FP16 ;

OPCODES
        HSETP2fp16_pipe =  0b10000110100;
        HSETP2 =  0b10000110100;

ENCODING
!hsetp2__RI_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_4_79_76_cmp=cmp;
BITS_1_71_71_bval=h_and;
BITS_1_80_80_ftz=ftz;
BITS_2_70_69_bop=bop;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=Pv;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_2_75_74_iswzA=iswzA;
BITS_16_63_48_Sc=Sc;
BITS_16_47_32_Sb=Sc1;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "hsetp2__RC"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FCMP:cmp /H_AND("noh_and"):h_and /FTZ("noftz"):ftz /Bop:bop
Predicate:Pu
','Predicate:Pv
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a} /ISWZ("H1_H0"):iswzA
',' [-] [||] C:Sc[UImm(5/0*):Sc_bank]*   [SImm(17)*:Sc_addr] /ISWZ("H1_H0"):iswzB
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((bop !=`Bop@INVALID3)) :
 "Invalid bop field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sc_bank <= 17) || (Sc_bank >= 24 && Sc_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sc_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@HSETP2_c ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc_bank))+(1<<INDEX(Sc_addr));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_REDIRECTABLE_FP16 ;

OPCODES
        HSETP2fp16_pipe =  0b11000110100;
        HSETP2 =  0b11000110100;

ENCODING
!hsetp2__RC_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_4_79_76_cmp=cmp;
BITS_1_71_71_bval=h_and;
BITS_1_80_80_ftz=ftz;
BITS_2_70_69_bop=bop;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=Pv;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_2_75_74_iswzA=iswzA;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sc_bank,Sc_addr);
BITS_1_62_62_Sb_absolute=Sc@absolute;
BITS_1_63_63_Sb_negate=Sc@negate;
BITS_2_61_60_hsel=iswzB;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



ALTERNATE CLASS "hsetp2_noBop__RR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FCMP:cmp /H_AND("noh_and"):h_and /FTZ("noftz"):ftz
Predicate:Pu
','Predicate:Pv
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a} /ISWZ("H1_H0"):iswzA
',' [-] [||] Register:Rc {/REUSE("noreuse"):reuse_src_c} /ISWZ("H1_H0"):iswzB_as_C
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@HSETP2_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_REDIRECTABLE_FP16 ;

OPCODES
        HSETP2fp16_pipe =  0b1000110100;
        HSETP2 =  0b1000110100;

ENCODING
!hsetp2_noBop__RR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_4_79_76_cmp=cmp;
BITS_1_71_71_bval=h_and;
BITS_1_80_80_ftz=ftz;
BITS_2_70_69_bop=*0;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=Pv;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_2_75_74_iswzA=iswzA;
BITS_8_39_32_Rb=Rc;
BITS_1_62_62_Sb_absolute=Rc@absolute;
BITS_1_63_63_Sb_negate=Rc@negate;
BITS_2_61_60_hsel=iswzB_as_C;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*0;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



ALTERNATE CLASS "hsetp2_noBop__RI"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FCMP:cmp /H_AND("noh_and"):h_and /FTZ("noftz"):ftz
Predicate:Pu
','Predicate:Pv
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a} /ISWZ("H1_H0"):iswzA
','F16Imm(64):Sc ',' F16Imm(64):Sc1
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@HSETP2_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc))+(1<<INDEX(Sc1));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_REDIRECTABLE_FP16 ;

OPCODES
        HSETP2fp16_pipe =  0b10000110100;
        HSETP2 =  0b10000110100;

ENCODING
!hsetp2_noBop__RI_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_4_79_76_cmp=cmp;
BITS_1_71_71_bval=h_and;
BITS_1_80_80_ftz=ftz;
BITS_2_70_69_bop=*0;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=Pv;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_2_75_74_iswzA=iswzA;
BITS_16_63_48_Sc=Sc;
BITS_16_47_32_Sb=Sc1;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*0;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



ALTERNATE CLASS "hsetp2_noBop__RC"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FCMP:cmp /H_AND("noh_and"):h_and /FTZ("noftz"):ftz
Predicate:Pu
','Predicate:Pv
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a} /ISWZ("H1_H0"):iswzA
',' [-] [||] C:Sc[UImm(5/0*):Sc_bank]*   [SImm(17)*:Sc_addr] /ISWZ("H1_H0"):iswzB
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sc_bank <= 17) || (Sc_bank >= 24 && Sc_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sc_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@HSETP2_c ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc_bank))+(1<<INDEX(Sc_addr));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FP16SIMD);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_REDIRECTABLE_FP16 ;

OPCODES
        HSETP2fp16_pipe =  0b11000110100;
        HSETP2 =  0b11000110100;

ENCODING
!hsetp2_noBop__RC_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_4_79_76_cmp=cmp;
BITS_1_71_71_bval=h_and;
BITS_1_80_80_ftz=ftz;
BITS_2_70_69_bop=*0;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=Pv;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_2_75_74_iswzA=iswzA;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sc_bank,Sc_addr);
BITS_1_62_62_Sb_absolute=Sc@absolute;
BITS_1_63_63_Sb_negate=Sc@negate;
BITS_2_61_60_hsel=iswzB;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*0;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "fadd__RRR_RR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /Round1("RN"):rnd /SAT("nosat"):sat
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] [||] Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@FADD_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        FADDfmalighter_pipe =  0b1000100001;
        FADD =  0b1000100001;

ENCODING
!fadd__RRR_RR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_2_79_78_rnd=rnd;
BITS_1_77_77_ntz=sat;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_8_39_32_Rb=Rc;
BITS_1_62_62_Sb_absolute=Rc@absolute;
BITS_1_63_63_Sb_negate=Rc@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "fadd__RRI_RI"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /Round1("RN"):rnd /SAT("nosat"):sat
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
','F32Imm(64):Sc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@FADD_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        FADDfmalighter_pipe =  0b10000100001;
        FADD =  0b10000100001;

ENCODING
!fadd__RRI_RI_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_2_79_78_rnd=rnd;
BITS_1_77_77_ntz=sat;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_32_63_32_Ra_offset=Sc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "fadd__RRC_RC"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /Round1("RN"):rnd /SAT("nosat"):sat
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] [||] C:Sc[UImm(5/0*):Sc_bank]*   [SImm(17)*:Sc_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sc_bank <= 17) || (Sc_bank >= 24 && Sc_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sc_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@FADD_c ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc_bank))+(1<<INDEX(Sc_addr));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        FADDfmalighter_pipe =  0b11000100001;
        FADD =  0b11000100001;

ENCODING
!fadd__RRC_RC_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_2_79_78_rnd=rnd;
BITS_1_77_77_ntz=sat;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sc_bank,Sc_addr);
BITS_1_62_62_Sb_absolute=Sc@absolute;
BITS_1_63_63_Sb_negate=Sc@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



ALTERNATE CLASS "fadd32i_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
','F32Imm(64):Sc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@FADD_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        FADD32Ifmalighter_pipe =  0b10000100001;
        FADD32I =  0b10000100001;

ENCODING
!fadd32i__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_2_79_78_rnd=*0;
BITS_1_77_77_ntz=*0;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_32_63_32_Ra_offset=Sc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "fchk__RRR_RR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ChkMode("DIVIDE"):mode
Predicate:Pu
',' [-] [||] Register:Ra
',' [-] [||] Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@FCHK_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_MUFU ;

OPCODES
        FCHKmio_pipe =  0b1100000010;
        FCHK =  0b1100000010;

ENCODING
!fchk__RRR_RR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_8_39_32_Rb=Rb;
BITS_1_62_62_Sb_absolute=Rb@absolute;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "fchk__RIR_RI"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ChkMode("DIVIDE"):mode
Predicate:Pu
',' [-] [||] Register:Ra
','F32Imm(64):Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@FCHK_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_MUFU ;

OPCODES
        FCHKmio_pipe =  0b100100000010;
        FCHK =  0b100100000010;

ENCODING
!fchk__RIR_RI_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_32_63_32_Ra_offset=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "fchk__RCR_RC"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ChkMode("DIVIDE"):mode
Predicate:Pu
',' [-] [||] Register:Ra
',' [-] [||] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@FCHK_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_MUFU ;

OPCODES
        FCHKmio_pipe =  0b101100000010;
        FCHK =  0b101100000010;

ENCODING
!fchk__RCR_RC_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_1_62_62_Sb_absolute=Sb@absolute;
BITS_1_63_63_Sb_negate=Sb@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "ffma__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FMZ("nofmz"):fmz /Round1("RN"):rnd /SAT("nosat"):sat
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] [||] Register:Rb {/REUSE("noreuse"):reuse_src_b}
',' [-] [||] Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((fmz !=`FMZ@INVALID3)) :
 "Invalid fmz field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@FFMA_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        FFMAfmalighter_pipe =  0b1000100011;
        FFMA =  0b1000100011;

ENCODING
!ffma__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_80_80_76_76_fmz=fmz;
BITS_2_79_78_rnd=rnd;
BITS_1_77_77_ntz=sat;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_8_39_32_Rb=Rb;
BITS_1_62_62_Sb_absolute=Rb@absolute;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_8_71_64_Rc=Rc;
BITS_1_74_74_tnspB=Rc@absolute;
BITS_1_75_75_size=Rc@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



CLASS "ffma__RIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FMZ("nofmz"):fmz /Round1("RN"):rnd /SAT("nosat"):sat
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
','F32Imm(64):Sb
',' [-] [||] Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((fmz !=`FMZ@INVALID3)) :
 "Invalid fmz field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@FFMA_Imm_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        FFMAfmalighter_pipe =  0b100000100011;
        FFMA =  0b100000100011;

ENCODING
!ffma__RIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_80_80_76_76_fmz=fmz;
BITS_2_79_78_rnd=rnd;
BITS_1_77_77_ntz=sat;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=Rc;
BITS_1_74_74_tnspB=Rc@absolute;
BITS_1_75_75_size=Rc@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "ffma__RRI_RRI"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FMZ("nofmz"):fmz /Round1("RN"):rnd /SAT("nosat"):sat
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] [||] Register:Rb {/REUSE("noreuse"):reuse_src_b}
','F32Imm(64):Sc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((fmz !=`FMZ@INVALID3)) :
 "Invalid fmz field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@FFMA_Rb_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        FFMAfmalighter_pipe =  0b10000100011;
        FFMA =  0b10000100011;

ENCODING
!ffma__RRI_RRI_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_80_80_76_76_fmz=fmz;
BITS_2_79_78_rnd=rnd;
BITS_1_77_77_ntz=sat;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_8_71_64_Rc=Rb;
BITS_1_74_74_tnspB=Rb@absolute;
BITS_1_75_75_size=Rb@negate;
BITS_32_63_32_Ra_offset=Sc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



CLASS "ffma__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FMZ("nofmz"):fmz /Round1("RN"):rnd /SAT("nosat"):sat
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] [||] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
',' [-] [||] Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((fmz !=`FMZ@INVALID3)) :
 "Invalid fmz field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@FFMA_c_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        FFMAfmalighter_pipe =  0b101000100011;
        FFMA =  0b101000100011;

ENCODING
!ffma__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_80_80_76_76_fmz=fmz;
BITS_2_79_78_rnd=rnd;
BITS_1_77_77_ntz=sat;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_1_62_62_Sb_absolute=Sb@absolute;
BITS_1_63_63_Sb_negate=Sb@negate;
BITS_8_71_64_Rc=Rc;
BITS_1_74_74_tnspB=Rc@absolute;
BITS_1_75_75_size=Rc@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "ffma__RRC_RRC"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FMZ("nofmz"):fmz /Round1("RN"):rnd /SAT("nosat"):sat
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] [||] Register:Rb {/REUSE("noreuse"):reuse_src_b}
',' [-] [||] C:Sc[UImm(5/0*):Sc_bank]*   [SImm(17)*:Sc_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((fmz !=`FMZ@INVALID3)) :
 "Invalid fmz field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sc_bank <= 17) || (Sc_bank >= 24 && Sc_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sc_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@FFMA_Rb_c ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc_bank))+(1<<INDEX(Sc_addr));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        FFMAfmalighter_pipe =  0b11000100011;
        FFMA =  0b11000100011;

ENCODING
!ffma__RRC_RRC_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_80_80_76_76_fmz=fmz;
BITS_2_79_78_rnd=rnd;
BITS_1_77_77_ntz=sat;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_8_71_64_Rc=Rb;
BITS_1_74_74_tnspB=Rb@absolute;
BITS_1_75_75_size=Rb@negate;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sc_bank,Sc_addr);
BITS_1_62_62_Sb_absolute=Sc@absolute;
BITS_1_63_63_Sb_negate=Sc@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



ALTERNATE CLASS "ffma32i_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FMZ("nofmz"):fmz /SAT("nosat"):sat
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
','F32Imm(64):Sb
',' [-] [||] Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((fmz !=`FMZ@INVALID3)) :
 "Invalid fmz field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@FFMA_Imm_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        FFMA32Ifmalighter_pipe =  0b100000100011;
        FFMA32I =  0b100000100011;

ENCODING
!ffma32i__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_80_80_76_76_fmz=fmz;
BITS_2_79_78_rnd=*0;
BITS_1_77_77_ntz=sat;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=Rc;
BITS_1_74_74_tnspB=Rc@absolute;
BITS_1_75_75_size=Rc@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "fmnmx__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] [||] Register:Rb {/REUSE("noreuse"):reuse_src_b}
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@FMNMX_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        FMNMXint_pipe =  0b1000001001;
        FMNMX =  0b1000001001;

ENCODING
!fmnmx__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_8_39_32_Rb=Rb;
BITS_1_62_62_Sb_absolute=Rb@absolute;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



CLASS "fmnmx__RIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
','F32Imm(64):Sb
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@FMNMX_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        FMNMXint_pipe =  0b100000001001;
        FMNMX =  0b100000001001;

ENCODING
!fmnmx__RIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_32_63_32_Ra_offset=Sb;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "fmnmx__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] [||] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@FMNMX_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        FMNMXint_pipe =  0b101000001001;
        FMNMX =  0b101000001001;

ENCODING
!fmnmx__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_1_62_62_Sb_absolute=Sb@absolute;
BITS_1_63_63_Sb_negate=Sb@negate;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "fmul__RRR_RR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FMZ("nofmz"):fmz /Scale("noscale"):scale /Round1("RN"):rnd /SAT("nosat"):sat
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] [||] Register:Rb {/REUSE("noreuse"):reuse_src_b}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((fmz !=`FMZ@INVALID3)) :
 "Invalid fmz field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((scale !=`Scale@INVALID0)) :
 "Invalid scale field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@FMUL_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        FMULfmalighter_pipe =  0b1000100000;
        FMUL =  0b1000100000;

ENCODING
!fmul__RRR_RR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_80_80_76_76_fmz=fmz;
BITS_3_86_84_cop=scale;
BITS_2_79_78_rnd=rnd;
BITS_1_77_77_ntz=sat;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_8_39_32_Rb=Rb;
BITS_1_62_62_Sb_absolute=Rb@absolute;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



CLASS "fmul__RIR_RI"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FMZ("nofmz"):fmz /Scale("noscale"):scale /Round1("RN"):rnd /SAT("nosat"):sat
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
','F32Imm(64):Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((fmz !=`FMZ@INVALID3)) :
 "Invalid fmz field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((scale !=`Scale@INVALID0)) :
 "Invalid scale field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@FMUL_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        FMULfmalighter_pipe =  0b100000100000;
        FMUL =  0b100000100000;

ENCODING
!fmul__RIR_RI_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_80_80_76_76_fmz=fmz;
BITS_3_86_84_cop=scale;
BITS_2_79_78_rnd=rnd;
BITS_1_77_77_ntz=sat;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_32_63_32_Ra_offset=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "fmul__RCR_RC"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FMZ("nofmz"):fmz /Scale("noscale"):scale /Round1("RN"):rnd /SAT("nosat"):sat
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] [||] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((fmz !=`FMZ@INVALID3)) :
 "Invalid fmz field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((scale !=`Scale@INVALID0)) :
 "Invalid scale field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@FMUL_c ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        FMULfmalighter_pipe =  0b101000100000;
        FMUL =  0b101000100000;

ENCODING
!fmul__RCR_RC_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_80_80_76_76_fmz=fmz;
BITS_3_86_84_cop=scale;
BITS_2_79_78_rnd=rnd;
BITS_1_77_77_ntz=sat;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_1_62_62_Sb_absolute=Sb@absolute;
BITS_1_63_63_Sb_negate=Sb@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



ALTERNATE CLASS "fmul32i_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FMZ("nofmz"):fmz /SAT("nosat"):sat
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','F32Imm(64):Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((fmz !=`FMZ@INVALID3)) :
 "Invalid fmz field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@FMUL_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        FMUL32Ifmalighter_pipe =  0b100000100000;
        FMUL32I =  0b100000100000;

ENCODING
!fmul32i__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_80_80_76_76_fmz=fmz;
BITS_3_86_84_cop=*4;
BITS_2_79_78_rnd=*0;
BITS_1_77_77_ntz=sat;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_32_63_32_Ra_offset=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "fsel__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] [||] Register:Rb {/REUSE("noreuse"):reuse_src_b}
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@FSEL_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        FSELint_pipe =  0b1000001000;
        FSEL =  0b1000001000;

ENCODING
!fsel__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_8_39_32_Rb=Rb;
BITS_1_62_62_Sb_absolute=Rb@absolute;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



CLASS "fsel__RIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
','F32Imm(64):Sb
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@FSEL_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        FSELint_pipe =  0b100000001000;
        FSEL =  0b100000001000;

ENCODING
!fsel__RIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_32_63_32_Ra_offset=Sb;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "fsel__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] [||] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@FSEL_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        FSELint_pipe =  0b101000001000;
        FSEL =  0b101000001000;

ENCODING
!fsel__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_1_62_62_Sb_absolute=Sb@absolute;
BITS_1_63_63_Sb_negate=Sb@negate;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "fset__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BFONLY:bf /FCMP:fcomp /FTZ("noftz"):ftz /Bop:bop
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] [||] Register:Rb {/REUSE("noreuse"):reuse_src_b}
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((bop !=`Bop@INVALID3)) :
 "Invalid bop field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@FSET_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        FSETint_pipe =  0b1000001010;
        FSET =  0b1000001010;

ENCODING
!fset__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_4_79_76_cmp=fcomp;
BITS_1_80_80_ftz=ftz;
BITS_2_75_74_iswzA=bop;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_8_39_32_Rb=Rb;
BITS_1_62_62_Sb_absolute=Rb@absolute;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



CLASS "fset__RIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BFONLY:bf /FCMP:fcomp /FTZ("noftz"):ftz /Bop:bop
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
','F32Imm(64):Sb
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((bop !=`Bop@INVALID3)) :
 "Invalid bop field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@FSET_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        FSETint_pipe =  0b100000001010;
        FSET =  0b100000001010;

ENCODING
!fset__RIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_4_79_76_cmp=fcomp;
BITS_1_80_80_ftz=ftz;
BITS_2_75_74_iswzA=bop;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_32_63_32_Ra_offset=Sb;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "fset__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BFONLY:bf /FCMP:fcomp /FTZ("noftz"):ftz /Bop:bop
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] [||] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((bop !=`Bop@INVALID3)) :
 "Invalid bop field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@FSET_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        FSETint_pipe =  0b101000001010;
        FSET =  0b101000001010;

ENCODING
!fset__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_4_79_76_cmp=fcomp;
BITS_1_80_80_ftz=ftz;
BITS_2_75_74_iswzA=bop;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_1_62_62_Sb_absolute=Sb@absolute;
BITS_1_63_63_Sb_negate=Sb@negate;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



ALTERNATE CLASS "fset_simple__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BFONLY:bf /FCMP:fcomp /FTZ("noftz"):ftz
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] [||] Register:Rb {/REUSE("noreuse"):reuse_src_b}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@FSET_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        FSETint_pipe =  0b1000001010;
        FSET =  0b1000001010;

ENCODING
!fset_simple__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_4_79_76_cmp=fcomp;
BITS_1_80_80_ftz=ftz;
BITS_2_75_74_iswzA=0;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_8_39_32_Rb=Rb;
BITS_1_62_62_Sb_absolute=Rb@absolute;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*0;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



ALTERNATE CLASS "fset_simple__RIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BFONLY:bf /FCMP:fcomp /FTZ("noftz"):ftz
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
','F32Imm(64):Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@FSET_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        FSETint_pipe =  0b100000001010;
        FSET =  0b100000001010;

ENCODING
!fset_simple__RIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_4_79_76_cmp=fcomp;
BITS_1_80_80_ftz=ftz;
BITS_2_75_74_iswzA=0;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_32_63_32_Ra_offset=Sb;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*0;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



ALTERNATE CLASS "fset_simple__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BFONLY:bf /FCMP:fcomp /FTZ("noftz"):ftz
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] [||] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@FSET_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        FSETint_pipe =  0b101000001010;
        FSET =  0b101000001010;

ENCODING
!fset_simple__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_4_79_76_cmp=fcomp;
BITS_1_80_80_ftz=ftz;
BITS_2_75_74_iswzA=0;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_1_62_62_Sb_absolute=Sb@absolute;
BITS_1_63_63_Sb_negate=Sb@negate;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*0;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "fsetp__RRR_RR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FCMP:fcomp /FTZ("noftz"):ftz /Bop:bop
Predicate:Pu
','Predicate:Pv
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] [||] Register:Rb {/REUSE("noreuse"):reuse_src_b}
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((bop !=`Bop@INVALID3)) :
 "Invalid bop field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@FSETP_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        FSETPint_pipe =  0b1000001011;
        FSETP =  0b1000001011;

ENCODING
!fsetp__RRR_RR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_4_79_76_cmp=fcomp;
BITS_1_80_80_ftz=ftz;
BITS_2_75_74_iswzA=bop;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=Pv;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_8_39_32_Rb=Rb;
BITS_1_62_62_Sb_absolute=Rb@absolute;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



CLASS "fsetp__RIR_RI"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FCMP:fcomp /FTZ("noftz"):ftz /Bop:bop
Predicate:Pu
','Predicate:Pv
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
','F32Imm(64):Sb
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((bop !=`Bop@INVALID3)) :
 "Invalid bop field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@FSETP_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        FSETPint_pipe =  0b100000001011;
        FSETP =  0b100000001011;

ENCODING
!fsetp__RIR_RI_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_4_79_76_cmp=fcomp;
BITS_1_80_80_ftz=ftz;
BITS_2_75_74_iswzA=bop;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=Pv;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_32_63_32_Ra_offset=Sb;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "fsetp__RCR_RC"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FCMP:fcomp /FTZ("noftz"):ftz /Bop:bop
Predicate:Pu
','Predicate:Pv
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] [||] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((bop !=`Bop@INVALID3)) :
 "Invalid bop field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@FSETP_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        FSETPint_pipe =  0b101000001011;
        FSETP =  0b101000001011;

ENCODING
!fsetp__RCR_RC_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_4_79_76_cmp=fcomp;
BITS_1_80_80_ftz=ftz;
BITS_2_75_74_iswzA=bop;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=Pv;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_1_62_62_Sb_absolute=Sb@absolute;
BITS_1_63_63_Sb_negate=Sb@negate;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



ALTERNATE CLASS "fsetp_simple__RRR_RR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FCMP:fcomp /FTZ("noftz"):ftz
Predicate:Pu
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] [||] Register:Rb {/REUSE("noreuse"):reuse_src_b}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@FSETP_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        FSETPint_pipe =  0b1000001011;
        FSETP =  0b1000001011;

ENCODING
!fsetp_simple__RRR_RR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_4_79_76_cmp=fcomp;
BITS_1_80_80_ftz=ftz;
BITS_2_75_74_iswzA=*0;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=*7;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_8_39_32_Rb=Rb;
BITS_1_62_62_Sb_absolute=Rb@absolute;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*0;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



ALTERNATE CLASS "fsetp_simple__RIR_RI"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FCMP:fcomp /FTZ("noftz"):ftz
Predicate:Pu
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
','F32Imm(64):Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@FSETP_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        FSETPint_pipe =  0b100000001011;
        FSETP =  0b100000001011;

ENCODING
!fsetp_simple__RIR_RI_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_4_79_76_cmp=fcomp;
BITS_1_80_80_ftz=ftz;
BITS_2_75_74_iswzA=*0;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=*7;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_32_63_32_Ra_offset=Sb;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*0;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



ALTERNATE CLASS "fsetp_simple__RCR_RC"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FCMP:fcomp /FTZ("noftz"):ftz
Predicate:Pu
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] [||] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@FSETP_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        FSETPint_pipe =  0b101000001011;
        FSETP =  0b101000001011;

ENCODING
!fsetp_simple__RCR_RC_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_4_79_76_cmp=fcomp;
BITS_1_80_80_ftz=ftz;
BITS_2_75_74_iswzA=*0;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=*7;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_1_62_62_Sb_absolute=Sb@absolute;
BITS_1_63_63_Sb_negate=Sb@negate;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*0;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "fswzadd_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FTZ("noftz"):ftz /Round1("RN"):rnd /NDV("nondv"):ndv
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
','NP:npCtrl
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        FSWZADDfmalighter_pipe =  0b100000100010;
        FSWZADD =  0b100000100010;

ENCODING
!fswzadd__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=ftz;
BITS_2_79_78_rnd=rnd;
BITS_1_77_77_ntz=ndv;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_71_64_Rc=Rc;
BITS_8_39_32_Rb=npCtrl;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "mufu__RRR_RR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /MufuOp:mufuop
Register:Rd
',' [-] [||] Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((mufuop !=`MufuOp@INVALID9)&&(mufuop !=`MufuOp@INVALID10)&&(mufuop !=`MufuOp@INVALID11)&&(mufuop !=`MufuOp@INVALID12)&&(mufuop !=`MufuOp@INVALID13)&&(mufuop !=`MufuOp@INVALID14)&&(mufuop !=`MufuOp@INVALID15)) :
 "Invalid mufuop field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@MUFU_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_MUFU ;

OPCODES
        MUFUmio_pipe =  0b1100001000;
        MUFU =  0b1100001000;

ENCODING
!mufu__RRR_RR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_4_77_74_mufuop=mufuop;
BITS_8_23_16_Rd=Rd;
BITS_8_39_32_Rb=Rb;
BITS_1_62_62_Sb_absolute=Rb@absolute;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "mufu__RIR_RI"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /MufuOp:mufuop
Register:Rd
','F32Imm(64):Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((mufuop !=`MufuOp@INVALID9)&&(mufuop !=`MufuOp@INVALID10)&&(mufuop !=`MufuOp@INVALID11)&&(mufuop !=`MufuOp@INVALID12)&&(mufuop !=`MufuOp@INVALID13)&&(mufuop !=`MufuOp@INVALID14)&&(mufuop !=`MufuOp@INVALID15)) :
 "Invalid mufuop field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@MUFU_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_MUFU ;

OPCODES
        MUFUmio_pipe =  0b100100001000;
        MUFU =  0b100100001000;

ENCODING
!mufu__RIR_RI_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_4_77_74_mufuop=mufuop;
BITS_8_23_16_Rd=Rd;
BITS_32_63_32_Ra_offset=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "mufu__RCR_RC"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /MufuOp:mufuop
Register:Rd
',' [-] [||] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((mufuop !=`MufuOp@INVALID9)&&(mufuop !=`MufuOp@INVALID10)&&(mufuop !=`MufuOp@INVALID11)&&(mufuop !=`MufuOp@INVALID12)&&(mufuop !=`MufuOp@INVALID13)&&(mufuop !=`MufuOp@INVALID14)&&(mufuop !=`MufuOp@INVALID15)) :
 "Invalid mufuop field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@MUFU_c ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_MUFU ;

OPCODES
        MUFUmio_pipe =  0b101100001000;
        MUFU =  0b101100001000;

ENCODING
!mufu__RCR_RC_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_4_77_74_mufuop=mufuop;
BITS_8_23_16_Rd=Rd;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_1_62_62_Sb_absolute=Sb@absolute;
BITS_1_63_63_Sb_negate=Sb@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "dadd__RRR_RR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /Round1("RN"):rnd
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] [||] Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@DADD_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_REDIRECTABLE ;

OPCODES
        DADDfma64lite_pipe =  0b1000101001;
        DADD =  0b1000101001;

ENCODING
!dadd__RRR_RR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_8_71_64_Rc=Rc;
BITS_1_74_74_tnspB=Rc@absolute;
BITS_1_75_75_size=Rc@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "dadd__RRsI_RI"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /Round1("RN"):rnd
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
','F64Imm(64):Sc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@DADD_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_REDIRECTABLE ;

OPCODES
        DADDfma64lite_pipe =  0b10000101001;
        DADD =  0b10000101001;

ENCODING
!dadd__RRsI_RI_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_32_63_32_Ra_offset=Sc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "dadd__RRC_RC"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /Round1("RN"):rnd
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] [||] C:Sc[UImm(5/0*):Sc_bank]*   [SImm(17)*:Sc_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sc_bank <= 17) || (Sc_bank >= 24 && Sc_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sc_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@DADD_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc_bank))+(1<<INDEX(Sc_addr));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_REDIRECTABLE ;

OPCODES
        DADDfma64lite_pipe =  0b11000101001;
        DADD =  0b11000101001;

ENCODING
!dadd__RRC_RC_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sc_bank,Sc_addr);
BITS_1_62_62_Sb_absolute=Sc@absolute;
BITS_1_63_63_Sb_negate=Sc@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "dfma__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /Round1("RN"):rnd
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] [||] Register:Rb {/REUSE("noreuse"):reuse_src_b}
',' [-] [||] Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-2))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
MISALIGNED_REG_ERROR
 (((Rb)+((Rb)==`Register@RZ)) % 2) == 0 :
 "Register Rb is misaligned"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@DFMA_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 64;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_REDIRECTABLE ;

OPCODES
        DFMAfma64lite_pipe =  0b1000101011;
        DFMA =  0b1000101011;

ENCODING
!dfma__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_8_39_32_Rb=Rb;
BITS_1_62_62_Sb_absolute=Rb@absolute;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_8_71_64_Rc=Rc;
BITS_1_74_74_tnspB=Rc@absolute;
BITS_1_75_75_size=Rc@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



CLASS "dfma__RsIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /Round1("RN"):rnd
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
','F64Imm(64):Sb
',' [-] [||] Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@DFMA_Imm_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 64;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_REDIRECTABLE ;

OPCODES
        DFMAfma64lite_pipe =  0b100000101011;
        DFMA =  0b100000101011;

ENCODING
!dfma__RsIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=Rc;
BITS_1_74_74_tnspB=Rc@absolute;
BITS_1_75_75_size=Rc@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "dfma__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /Round1("RN"):rnd
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] [||] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
',' [-] [||] Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@DFMA_C_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 64;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_REDIRECTABLE ;

OPCODES
        DFMAfma64lite_pipe =  0b101000101011;
        DFMA =  0b101000101011;

ENCODING
!dfma__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_1_62_62_Sb_absolute=Sb@absolute;
BITS_1_63_63_Sb_negate=Sb@negate;
BITS_8_71_64_Rc=Rc;
BITS_1_74_74_tnspB=Rc@absolute;
BITS_1_75_75_size=Rc@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "dfma__RRsI_RRI"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /Round1("RN"):rnd
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] [||] Register:Rb {/REUSE("noreuse"):reuse_src_b}
','F64Imm(64):Sc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-2))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
MISALIGNED_REG_ERROR
 (((Rb)+((Rb)==`Register@RZ)) % 2) == 0 :
 "Register Rb is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@DFMA_Rb_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 64;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_REDIRECTABLE ;

OPCODES
        DFMAfma64lite_pipe =  0b10000101011;
        DFMA =  0b10000101011;

ENCODING
!dfma__RRsI_RRI_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_8_71_64_Rc=Rb;
BITS_1_74_74_tnspB=Rb@absolute;
BITS_1_75_75_size=Rb@negate;
BITS_32_63_32_Ra_offset=Sc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



CLASS "dfma__RRC_RRC"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /Round1("RN"):rnd
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] [||] Register:Rb {/REUSE("noreuse"):reuse_src_b}
',' [-] [||] C:Sc[UImm(5/0*):Sc_bank]*   [SImm(17)*:Sc_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-2))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
MISALIGNED_REG_ERROR
 (((Rb)+((Rb)==`Register@RZ)) % 2) == 0 :
 "Register Rb is misaligned"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sc_bank <= 17) || (Sc_bank >= 24 && Sc_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sc_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@DFMA_Rb_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc_bank))+(1<<INDEX(Sc_addr));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 64;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_REDIRECTABLE ;

OPCODES
        DFMAfma64lite_pipe =  0b11000101011;
        DFMA =  0b11000101011;

ENCODING
!dfma__RRC_RRC_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_8_71_64_Rc=Rb;
BITS_1_74_74_tnspB=Rb@absolute;
BITS_1_75_75_size=Rb@negate;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sc_bank,Sc_addr);
BITS_1_62_62_Sb_absolute=Sc@absolute;
BITS_1_63_63_Sb_negate=Sc@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



CLASS "dmul__RRR_RR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /Round1("RN"):rnd
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] [||] Register:Rb {/REUSE("noreuse"):reuse_src_b}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-2))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
MISALIGNED_REG_ERROR
 (((Rb)+((Rb)==`Register@RZ)) % 2) == 0 :
 "Register Rb is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@DMUL_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 64;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_REDIRECTABLE ;

OPCODES
        DMULfma64lite_pipe =  0b1000101000;
        DMUL =  0b1000101000;

ENCODING
!dmul__RRR_RR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_8_39_32_Rb=Rb;
BITS_1_62_62_Sb_absolute=Rb@absolute;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



CLASS "dmul__RsIR_RI"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /Round1("RN"):rnd
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
','F64Imm(64):Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@DMUL_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 64;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_REDIRECTABLE ;

OPCODES
        DMULfma64lite_pipe =  0b100000101000;
        DMUL =  0b100000101000;

ENCODING
!dmul__RsIR_RI_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_32_63_32_Ra_offset=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "dmul__RCR_RC"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /Round1("RN"):rnd
Register:Rd
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] [||] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@DMUL_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 64;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_REDIRECTABLE ;

OPCODES
        DMULfma64lite_pipe =  0b101000101000;
        DMUL =  0b101000101000;

ENCODING
!dmul__RCR_RC_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_79_78_rnd=rnd;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_1_62_62_Sb_absolute=Sb@absolute;
BITS_1_63_63_Sb_negate=Sb@negate;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "dsetp__RRR_RR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DSETP_FCMP:test /Bop:bop
Predicate:Pu
','Predicate:Pv
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] [||] Register:Rc {/REUSE("noreuse"):reuse_src_c}
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((bop !=`Bop@INVALID3)) :
 "Invalid bop field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@DSETP_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_REDIRECTABLE ;

OPCODES
        DSETPfma64lite_pipe =  0b1000101010;
        DSETP =  0b1000101010;

ENCODING
!dsetp__RRR_RR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_4_79_76_cmp=test;
BITS_2_75_74_iswzA=bop;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=Pv;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_8_39_32_Rb=Rc;
BITS_1_62_62_Sb_absolute=Rc@absolute;
BITS_1_63_63_Sb_negate=Rc@negate;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "dsetp__RRsI_RI"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DSETP_FCMP:test /Bop:bop
Predicate:Pu
','Predicate:Pv
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
','F64Imm(64):Sc
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((bop !=`Bop@INVALID3)) :
 "Invalid bop field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@DSETP_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_REDIRECTABLE ;

OPCODES
        DSETPfma64lite_pipe =  0b10000101010;
        DSETP =  0b10000101010;

ENCODING
!dsetp__RRsI_RI_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_4_79_76_cmp=test;
BITS_2_75_74_iswzA=bop;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=Pv;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_32_63_32_Ra_offset=Sc;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "dsetp__RRC_RC"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DSETP_FCMP:test /Bop:bop
Predicate:Pu
','Predicate:Pv
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] [||] C:Sc[UImm(5/0*):Sc_bank]*   [SImm(17)*:Sc_addr]
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((bop !=`Bop@INVALID3)) :
 "Invalid bop field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sc_bank <= 17) || (Sc_bank >= 24 && Sc_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sc_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@DSETP_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc_bank))+(1<<INDEX(Sc_addr));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_REDIRECTABLE ;

OPCODES
        DSETPfma64lite_pipe =  0b11000101010;
        DSETP =  0b11000101010;

ENCODING
!dsetp__RRC_RC_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_4_79_76_cmp=test;
BITS_2_75_74_iswzA=bop;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=Pv;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sc_bank,Sc_addr);
BITS_1_62_62_Sb_absolute=Sc@absolute;
BITS_1_63_63_Sb_negate=Sc@negate;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



ALTERNATE CLASS "dsetp_simple__RRR_RR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DSETP_FCMP:test
Predicate:Pu
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] [||] Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@DSETP_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_REDIRECTABLE ;

OPCODES
        DSETPfma64lite_pipe =  0b1000101010;
        DSETP =  0b1000101010;

ENCODING
!dsetp_simple__RRR_RR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_4_79_76_cmp=test;
BITS_2_75_74_iswzA=*0;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=*7;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_8_39_32_Rb=Rc;
BITS_1_62_62_Sb_absolute=Rc@absolute;
BITS_1_63_63_Sb_negate=Rc@negate;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*0;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



ALTERNATE CLASS "dsetp_simple__RRsI_RI"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DSETP_FCMP:test
Predicate:Pu
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
','F64Imm(64):Sc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@DSETP_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_REDIRECTABLE ;

OPCODES
        DSETPfma64lite_pipe =  0b10000101010;
        DSETP =  0b10000101010;

ENCODING
!dsetp_simple__RRsI_RI_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_4_79_76_cmp=test;
BITS_2_75_74_iswzA=*0;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=*7;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;
BITS_32_63_32_Ra_offset=Sc;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*0;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



ALTERNATE CLASS "dsetp_simple__RRC_RC"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DSETP_FCMP:test
Predicate:Pu
',' [-] [||] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] [||] C:Sc[UImm(5/0*):Sc_bank]*   [SImm(17)*:Sc_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sc_bank <= 17) || (Sc_bank >= 24 && Sc_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sc_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@DSETP_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc_bank))+(1<<INDEX(Sc_addr));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_DOUBLE);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_REDIRECTABLE ;

OPCODES
        DSETPfma64lite_pipe =  0b11000101010;
        DSETP =  0b11000101010;

ENCODING
!dsetp_simple__RRC_RC_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_4_79_76_cmp=test;
BITS_2_75_74_iswzA=*0;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=*7;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=Ra@absolute;
BITS_1_72_72_e=Ra@negate;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sc_bank,Sc_addr);
BITS_1_62_62_Sb_absolute=Sc@absolute;
BITS_1_63_63_Sb_negate=Sc@negate;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*0;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "al2p__RaRZ"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /AIO("I"):io /AInteger("32"):sz
Register:Rd
','ZeroRegister("RZ"):Ra ',' UImm(10)*:Ra_offset
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_VSA)||(%SHADER_TYPE == $ST_VSB)||(%SHADER_TYPE == $ST_GS)||(%SHADER_TYPE == $ST_TS)||(%SHADER_TYPE == $ST_TI)) :
 "Can only be used with VS, GS, TS, TI"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)==`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_GS)+(1<<ISHADER_TI)+(1<<ISHADER_TS)+(1<<ISHADER_VS)+0 ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_LOGICAL_ATTR_ADDRESS);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_ADU ;

OPCODES
        AL2Pmio_pipe =  0b100100100000;
        AL2P =  0b100100100000;

ENCODING
!al2p__RaRZ_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_79_79_op=io;
BITS_2_75_74_iswzA=sz;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_10_49_40_Ra_offset=Ra_offset;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "al2p__RaNonRZ"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /AIO("I"):io /AInteger("32"):sz
Register:Rd
','NonZeroRegister:Ra ',' SImm(11)*:Ra_offset
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_VSA)||(%SHADER_TYPE == $ST_VSB)||(%SHADER_TYPE == $ST_GS)||(%SHADER_TYPE == $ST_TS)||(%SHADER_TYPE == $ST_TI)) :
 "Can only be used with VS, GS, TS, TI"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_GS)+(1<<ISHADER_TI)+(1<<ISHADER_TS)+(1<<ISHADER_VS)+0 ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_LOGICAL_ATTR_ADDRESS);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_UNORDERED ;

OPCODES
        AL2Pmio_pipe =  0b100100100000;
        AL2P =  0b100100100000;

ENCODING
!al2p__RaNonRZ_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_79_79_op=io;
BITS_2_75_74_iswzA=sz;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_11_50_40_Ra_offset=Ra_offset;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "ald__LOGICAL_RaRZ_default"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /AIO("I"):io /AInteger("32"):sz
Register:Rd
',' A:srcAttr[ ZeroRegister("RZ"):Ra + UImm(10)*:Ra_offset ]
','Register("RZ"):Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_VSA)||(%SHADER_TYPE == $ST_VSB)||(%SHADER_TYPE == $ST_GS)||(%SHADER_TYPE == $ST_TS)||(%SHADER_TYPE == $ST_TI)) :
 "Can only be used with VS, GS, TS, TI"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)==`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `AInteger@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `AInteger@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `AInteger@"96"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `AInteger@"96"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `AInteger@"128"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `AInteger@"128"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_GS))) -> (((io == `AIO@I)))) :
 "Disallowed combination for shader"
ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_VSA)||(%SHADER_TYPE == $ST_VSB))) -> ((((Rb)==`Register@RZ)))) :
 "Disallowed combination for shader"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_GEOMETRY_SM_ERROR)+(1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+(1<<IERROR_PHYSICAL_ATTR_MISMATCH_ERROR)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_GS)+(1<<ISHADER_TI)+(1<<ISHADER_TS)+(1<<ISHADER_VS)+0 ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_LOGICAL_ATTR_ADDRESS);

PREDICATES
 IDEST_SIZE = (((sz==`AInteger@"32")*32) + ((sz==`AInteger@"64")*64) + ((sz==`AInteger@"96")*96) + ((sz==`AInteger@"128")*128));
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        ALDmio_pipe =  0b1100100001;
        ALD =  0b1100100001;

ENCODING
!ald__LOGICAL_RaRZ_default_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_79_79_op=io;
BITS_1_76_76_private=0;
BITS_2_75_74_iswzA=sz;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_10_49_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "ald__PATCH_RaRZ_P_RbRZ"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /AIO("I"):io /PONLY:p /AInteger("32"):sz
Register:Rd
',' A:srcAttr[ ZeroRegister("RZ"):Ra + UImm(10)*:Ra_offset ]
','ZeroRegister("RZ"):Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_VSA)||(%SHADER_TYPE == $ST_VSB)||(%SHADER_TYPE == $ST_GS)||(%SHADER_TYPE == $ST_TS)||(%SHADER_TYPE == $ST_TI)) :
 "Can only be used with VS, GS, TS, TI"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)==`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rb)==`Register@RZ) :
 "Disallowed register Rb"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `AInteger@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `AInteger@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `AInteger@"96"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `AInteger@"96"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `AInteger@"128"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `AInteger@"128"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_GS))) -> (((io == `AIO@I)))) :
 "Disallowed combination for shader"
ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_VSA)||(%SHADER_TYPE == $ST_VSB))) -> ((((Rb)==`Register@RZ)))) :
 "Disallowed combination for shader"
ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((((p == `PONLY@P))&&((io == `AIO@O))) -> (((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_TI)))) :
 "Disallowed combination for shader"
ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((((p == `PONLY@P))&&((io == `AIO@I))) -> (((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_GS)||(%SHADER_TYPE == $ST_TS)))) :
 "Disallowed combination for shader"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_GEOMETRY_SM_ERROR)+(1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+(1<<IERROR_PHYSICAL_ATTR_MISMATCH_ERROR)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_GS)+(1<<ISHADER_TI)+(1<<ISHADER_TS)+(1<<ISHADER_VS)+0 ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_PATCH_OFFSET_ADDRESS);

PREDICATES
 IDEST_SIZE = (((sz==`AInteger@"32")*32) + ((sz==`AInteger@"64")*64) + ((sz==`AInteger@"96")*96) + ((sz==`AInteger@"128")*128));
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        ALDmio_pipe =  0b1100100001;
        ALD =  0b1100100001;

ENCODING
!ald__PATCH_RaRZ_P_RbRZ_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_79_79_op=io;
BITS_1_76_76_private=*p;
BITS_2_75_74_iswzA=sz;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_10_49_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "ald__PATCH_RaNonRZOffset_P_RbRZ"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /AIO("I"):io /PONLY:p /AInteger("32"):sz
Register:Rd
',' A:srcAttr[ NonZeroRegister:Ra + SImm(11/0)*:Ra_offset ]
','ZeroRegister("RZ"):Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_VSA)||(%SHADER_TYPE == $ST_VSB)||(%SHADER_TYPE == $ST_GS)||(%SHADER_TYPE == $ST_TS)||(%SHADER_TYPE == $ST_TI)) :
 "Can only be used with VS, GS, TS, TI"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rb)==`Register@RZ) :
 "Disallowed register Rb"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `AInteger@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `AInteger@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `AInteger@"96"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `AInteger@"96"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `AInteger@"128"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `AInteger@"128"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_GS))) -> (((io == `AIO@I)))) :
 "Disallowed combination for shader"
ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_VSA)||(%SHADER_TYPE == $ST_VSB))) -> ((((Rb)==`Register@RZ)))) :
 "Disallowed combination for shader"
ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((((p == `PONLY@P))&&((io == `AIO@O))) -> (((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_TI)))) :
 "Disallowed combination for shader"
ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((((p == `PONLY@P))&&((io == `AIO@I))) -> (((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_GS)||(%SHADER_TYPE == $ST_TS)))) :
 "Disallowed combination for shader"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_GEOMETRY_SM_ERROR)+(1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+(1<<IERROR_PHYSICAL_ATTR_MISMATCH_ERROR)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_GS)+(1<<ISHADER_TI)+(1<<ISHADER_TS)+(1<<ISHADER_VS)+0 ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_PATCH_OFFSET_ADDRESS);

PREDICATES
 IDEST_SIZE = (((sz==`AInteger@"32")*32) + ((sz==`AInteger@"64")*64) + ((sz==`AInteger@"96")*96) + ((sz==`AInteger@"128")*128));
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        ALDmio_pipe =  0b1100100001;
        ALD =  0b1100100001;

ENCODING
!ald__PATCH_RaNonRZOffset_P_RbRZ_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_79_79_op=io;
BITS_1_76_76_private=*p;
BITS_2_75_74_iswzA=sz;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_11_50_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "ald_PHYS_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /AIO("I"):io /PHYSONLY:phys /ONLY32("32"):sz
Register:Rd
',' A:srcAttr[ NonZeroRegister:Ra ]
','Register("RZ"):Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_VSA)||(%SHADER_TYPE == $ST_VSB)||(%SHADER_TYPE == $ST_GS)||(%SHADER_TYPE == $ST_TS)||(%SHADER_TYPE == $ST_TI)) :
 "Can only be used with VS, GS, TS, TI"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_GS))) -> (((io == `AIO@I)))) :
 "Disallowed combination for shader"
ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_VSA)||(%SHADER_TYPE == $ST_VSB))) -> ((((Rb)==`Register@RZ)))) :
 "Disallowed combination for shader"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_GEOMETRY_SM_ERROR)+(1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+(1<<IERROR_PHYSICAL_ATTR_MISMATCH_ERROR)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_GS)+(1<<ISHADER_TI)+(1<<ISHADER_TS)+(1<<ISHADER_VS)+0 ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_PHYSICAL_ATTR_ADDRESS);

PREDICATES
 IDEST_SIZE = (((sz==`AInteger@"32")*32) + ((sz==`AInteger@"64")*64) + ((sz==`AInteger@"96")*96) + ((sz==`AInteger@"128")*128));
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        ALDmio_pipe =  0b1100100001;
        ALD =  0b1100100001;

ENCODING
!ald_PHYS__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_79_79_op=io;
BITS_1_77_77_ntz=*phys;
BITS_2_75_74_iswzA=*sz;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_8_39_32_Rb=Rb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "ast__LOGICAL_RaRZ"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /AInteger("32"):sz
 A:srcAttr[ ZeroRegister("RZ"):Ra + UImm(10)*:Ra_offset ]
','Register:Rb
','Register("RZ"):Rc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_VSA)||(%SHADER_TYPE == $ST_VSB)||(%SHADER_TYPE == $ST_GS)||(%SHADER_TYPE == $ST_TS)||(%SHADER_TYPE == $ST_TI)) :
 "Can only be used with VS, GS, TS, TI"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)==`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `AInteger@"64"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `AInteger@"64"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `AInteger@"96"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `AInteger@"96"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `AInteger@"128"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `AInteger@"128"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
UNPREDICTABLE_BEHAVIOR_WARNING
 (((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_VSA)||(%SHADER_TYPE == $ST_VSB)||(%SHADER_TYPE == $ST_TS)||(%SHADER_TYPE == $ST_TI))) -> ((((Rc)==`Register@RZ))) :
 "Combination leads to unpredictable behavior"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_GEOMETRY_SM_ERROR)+(1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+(1<<IERROR_PHYSICAL_ATTR_MISMATCH_ERROR)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_GS)+(1<<ISHADER_TI)+(1<<ISHADER_TS)+(1<<ISHADER_VS)+0 ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_GS_STATE);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_LOGICAL_ATTR_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (((sz==`AInteger@"32")*32) + ((sz==`AInteger@"64")*64) + ((sz==`AInteger@"96")*96) + ((sz==`AInteger@"128")*128));
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        ASTmio_pipe =  0b1100100010;
        AST =  0b1100100010;

ENCODING
!ast__LOGICAL_RaRZ_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_76_76_private=0;
BITS_2_75_74_iswzA=sz;
BITS_8_31_24_Ra=*Ra;
BITS_10_49_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "ast__PATCH_RaRZ"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /PONLY:p /AInteger("32"):sz
 A:srcAttr[ ZeroRegister("RZ"):Ra + UImm(10)*:Ra_offset ]
','Register:Rb
','Register("RZ"):Rc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_TI)) :
 "Can only be used with TI"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)==`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `AInteger@"64"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `AInteger@"64"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `AInteger@"96"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `AInteger@"96"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `AInteger@"128"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `AInteger@"128"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
UNPREDICTABLE_BEHAVIOR_WARNING
 (((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_VSA)||(%SHADER_TYPE == $ST_VSB)||(%SHADER_TYPE == $ST_TS)||(%SHADER_TYPE == $ST_TI))) -> ((((Rc)==`Register@RZ))) :
 "Combination leads to unpredictable behavior"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_GEOMETRY_SM_ERROR)+(1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+(1<<IERROR_PHYSICAL_ATTR_MISMATCH_ERROR)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_TI)+0 ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_GS_STATE);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_PATCH_OFFSET_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (((sz==`AInteger@"32")*32) + ((sz==`AInteger@"64")*64) + ((sz==`AInteger@"96")*96) + ((sz==`AInteger@"128")*128));
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        ASTmio_pipe =  0b1100100010;
        AST =  0b1100100010;

ENCODING
!ast__PATCH_RaRZ_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_76_76_private=*p;
BITS_2_75_74_iswzA=sz;
BITS_8_31_24_Ra=*Ra;
BITS_10_49_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "ast__PATCH_RaNonRZOffset"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /PONLY:p /AInteger("32"):sz
 A:srcAttr[ NonZeroRegister:Ra + SImm(11/0)*:Ra_offset ]
','Register:Rb
','ZeroRegister("RZ"):Rc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_TI)) :
 "Can only be used with TI"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rc)==`Register@RZ) :
 "Disallowed register Rc"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `AInteger@"64"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `AInteger@"64"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `AInteger@"96"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `AInteger@"96"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `AInteger@"128"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `AInteger@"128"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
UNPREDICTABLE_BEHAVIOR_WARNING
 (((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_VSA)||(%SHADER_TYPE == $ST_VSB)||(%SHADER_TYPE == $ST_TS)||(%SHADER_TYPE == $ST_TI))) -> ((((Rc)==`Register@RZ))) :
 "Combination leads to unpredictable behavior"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_GEOMETRY_SM_ERROR)+(1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+(1<<IERROR_PHYSICAL_ATTR_MISMATCH_ERROR)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_TI)+0 ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_GS_STATE);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_PATCH_OFFSET_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (((sz==`AInteger@"32")*32) + ((sz==`AInteger@"64")*64) + ((sz==`AInteger@"96")*96) + ((sz==`AInteger@"128")*128));
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        ASTmio_pipe =  0b1100100010;
        AST =  0b1100100010;

ENCODING
!ast__PATCH_RaNonRZOffset_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_76_76_private=*p;
BITS_2_75_74_iswzA=sz;
BITS_8_31_24_Ra=*Ra;
BITS_11_50_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "ast_PHYS_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /PHYSONLY:phys /ONLY32("32"):sz
 A:srcAttr[ NonZeroRegister:Ra ]
','Register:Rb
','Register("RZ"):Rc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_VSA)||(%SHADER_TYPE == $ST_VSB)||(%SHADER_TYPE == $ST_GS)||(%SHADER_TYPE == $ST_TS)||(%SHADER_TYPE == $ST_TI)) :
 "Can only be used with VS, GS, TS, TI"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
UNPREDICTABLE_BEHAVIOR_WARNING
 (((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_VSA)||(%SHADER_TYPE == $ST_VSB)||(%SHADER_TYPE == $ST_TS)||(%SHADER_TYPE == $ST_TI))) -> ((((Rc)==`Register@RZ))) :
 "Combination leads to unpredictable behavior"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_GEOMETRY_SM_ERROR)+(1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+(1<<IERROR_PHYSICAL_ATTR_MISMATCH_ERROR)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_GS)+(1<<ISHADER_TI)+(1<<ISHADER_TS)+(1<<ISHADER_VS)+0 ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_GS_STATE);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_PHYSICAL_ATTR_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (((sz==`AInteger@"32")*32) + ((sz==`AInteger@"64")*64) + ((sz==`AInteger@"96")*96) + ((sz==`AInteger@"128")*128));
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        ASTmio_pipe =  0b1100100010;
        AST =  0b1100100010;

ENCODING
!ast_PHYS__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_77_77_ntz=*phys;
BITS_2_75_74_iswzA=*sz;
BITS_8_31_24_Ra=*Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "ipa_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /MODE:ipaop /MSI_CENTER_CENTROID("CENTER"):msi
Register:Rd
','Predicate("PT"):Pu
',' A:srcAttr[ UImm(10)*:attr ]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_PS)) :
 "Can only be used with PS"
ILLEGAL_INSTR_ENCODING_ERROR
 ((ipaop !=`MODE@INVALID3)) :
 "Invalid ipaop field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@IPA_Rb ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_PS)+0 ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(attr));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_TRAM_ADDRESS);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 8;
 VIRTUAL_QUEUE = $VQ_IPA ;

OPCODES
        IPAmio_pipe =  0b1100100110;
        IPA =  0b1100100110;

ENCODING
!ipa__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_79_78_rnd=ipaop;
BITS_2_77_76_msi=*msi;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_71_64_Rc=attr SCALE 4;
BITS_8_39_32_Rb=*255;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "ipa_offset__IPA_Rb"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /MODE:ipaop /OFFSETONLY:msi
Register:Rd
','Predicate("PT"):Pu
',' A:srcAttr[ UImm(10)*:attr ]
','Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_PS)) :
 "Can only be used with PS"
ILLEGAL_INSTR_ENCODING_ERROR
 ((ipaop !=`MODE@INVALID3)) :
 "Invalid ipaop field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@IPA_Rb ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_PS)+0 ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(attr));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_TRAM_ADDRESS);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 8;
 VIRTUAL_QUEUE = $VQ_IPA ;

OPCODES
        IPAmio_pipe =  0b1100100110;
        IPA =  0b1100100110;

ENCODING
!ipa_offset__IPA_Rb_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_79_78_rnd=ipaop;
BITS_2_77_76_msi=*msi;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_71_64_Rc=attr SCALE 4;
BITS_8_39_32_Rb=Rb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "ipa_offset__IPA_Imm"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /MODE:ipaop /OFFSETONLY:msi
Register:Rd
','Predicate("PT"):Pu
',' A:srcAttr[ UImm(10)*:attr ]
','UImm(32)*:Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_PS)) :
 "Can only be used with PS"
ILLEGAL_INSTR_ENCODING_ERROR
 ((ipaop !=`MODE@INVALID3)) :
 "Invalid ipaop field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@IPA_Imm ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_PS)+0 ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(attr));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_TRAM_ADDRESS);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 8;
 VIRTUAL_QUEUE = $VQ_IPA ;

OPCODES
        IPAmio_pipe =  0b100100100110;
        IPA =  0b100100100110;

ENCODING
!ipa_offset__IPA_Imm_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_79_78_rnd=ipaop;
BITS_2_77_76_msi=*msi;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_71_64_Rc=attr SCALE 4;
BITS_32_63_32_Ra_offset=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "ipa_offset__IPA_C"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /MODE:ipaop /OFFSETONLY:msi
Register:Rd
','Predicate("PT"):Pu
',' A:srcAttr[ UImm(10)*:attr ]
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_PS)) :
 "Can only be used with PS"
ILLEGAL_INSTR_ENCODING_ERROR
 ((ipaop !=`MODE@INVALID3)) :
 "Invalid ipaop field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@IPA_c ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_PS)+0 ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(attr));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_TRAM_ADDRESS);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 8;
 VIRTUAL_QUEUE = $VQ_IPA ;

OPCODES
        IPAmio_pipe =  0b101100100110;
        IPA =  0b101100100110;

ENCODING
!ipa_offset__IPA_C_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_79_78_rnd=ipaop;
BITS_2_77_76_msi=*msi;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_71_64_Rc=attr SCALE 4;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "isberd_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /AIO("I"):io /BASE("MAP"):base /SKEW("noskew"):skew /ISBERD_SZ("U8"):sz
Register:Rd
',' [ Register:Ra ]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_VSA)||(%SHADER_TYPE == $ST_VSB)||(%SHADER_TYPE == $ST_GS)||(%SHADER_TYPE == $ST_TS)||(%SHADER_TYPE == $ST_TI)) :
 "Can only be used with VS, GS, TS, TI"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`ISBERD_SZ@INVALID3)) :
 "Invalid sz field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_GS))) -> (((io == `AIO@I)))) :
 "Disallowed combination for shader"
ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((((io == `AIO@I))&&((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_VSA)||(%SHADER_TYPE == $ST_VSB))) -> (((base == `BASE@PRIM)||(base == `BASE@ATTR)))) :
 "Disallowed combination for shader"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_GS)+(1<<ISHADER_TI)+(1<<ISHADER_TS)+(1<<ISHADER_VS)+0 ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_RAW_ISBE_ACCESS);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        ISBERDmio_pipe =  0b100100100011;
        ISBERD =  0b100100100011;

ENCODING
!isberd__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_79_79_op=io;
BITS_2_77_76_msi=base;
BITS_1_78_78_ofmt=skew;
BITS_2_75_74_iswzA=sz;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "out__EMIT_Rb"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /TYPE_EMIT_THEN_CUT_EMIT:type
Register:Rd
','Register:Ra
','Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_GS)) :
 "Can only be used with GS"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_GEOMETRY_SM_ERROR)+(1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@OUT_R ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_GS)+0 ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GS_STATE);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GS_STATE);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        OUTmio_pipe =  0b1100100100;
        OUT =  0b1100100100;

ENCODING
!out__EMIT_Rb_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_79_78_rnd=*type;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "out__EMIT_Imm"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /TYPE_EMIT_THEN_CUT_EMIT:type
Register:Rd
','Register:Ra
','SImm(32)*:Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_GS)) :
 "Can only be used with GS"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_GEOMETRY_SM_ERROR)+(1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@OUT_I ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_GS)+0 ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GS_STATE);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GS_STATE);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        OUTmio_pipe =  0b100100100100;
        OUT =  0b100100100100;

ENCODING
!out__EMIT_Imm_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_79_78_rnd=*type;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_32_63_32_Ra_offset=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "out__CUT"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /CUTONLY:type
Register:Rd
','Register:Ra
','ZeroRegister:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_GS)) :
 "Can only be used with GS"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rb)==`Register@RZ) :
 "Disallowed register Rb"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_GEOMETRY_SM_ERROR)+(1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@OUT_R ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_GS)+0 ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GS_STATE);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GS_STATE);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        OUTmio_pipe =  0b1100100100;
        OUT =  0b1100100100;

ENCODING
!out__CUT_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_79_78_rnd=*type;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "out__FINAL"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FINALONLY:type
Register:Ra
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_GS)) :
 "Can only be used with GS"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_GEOMETRY_SM_ERROR)+(1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@OUT_R ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_GS)+0 ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GS_STATE);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        OUTmio_pipe =  0b1100100100;
        OUT =  0b1100100100;

ENCODING
!out__FINAL_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_79_78_rnd=*type;
BITS_8_23_16_Rd=*255;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=*255;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "pixld_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /PIXLD_MODE("MSCOUNT"):mode
Register:Rd
','Predicate("PT"):Pu
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_PS)) :
 "Can only be used with PS"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_PS)+0 ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        PIXLDmio_pipe =  0b100100100101;
        PIXLD =  0b100100100101;

ENCODING
!pixld__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_80_78_mode=mode;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "bmsk__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /CWMode("C"):cw
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@BMSK_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        BMSKint_pipe =  0b1000011011;
        BMSK =  0b1000011011;

ENCODING
!bmsk__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_75_75_size=cw;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



CLASS "bmsk__RuIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /CWMode("C"):cw
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','UImm(32)*:Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@BMSK_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        BMSKint_pipe =  0b100000011011;
        BMSK =  0b100000011011;

ENCODING
!bmsk__RuIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_75_75_size=cw;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_32_63_32_Ra_offset=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "bmsk__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /CWMode("C"):cw
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@BMSK_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        BMSKint_pipe =  0b101000011011;
        BMSK =  0b101000011011;

ENCODING
!bmsk__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_75_75_size=cw;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "brev__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
Register:Rd
','Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@BREV_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_MUFU ;

OPCODES
        BREVmio_pipe =  0b1100000001;
        BREV =  0b1100000001;

ENCODING
!brev__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_8_23_16_Rd=Rd;
BITS_8_39_32_Rb=Rb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "brev__RuIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
Register:Rd
','UImm(32)*:Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@BREV_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_MUFU ;

OPCODES
        BREVmio_pipe =  0b100100000001;
        BREV =  0b100100000001;

ENCODING
!brev__RuIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_8_23_16_Rd=Rd;
BITS_32_63_32_Ra_offset=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "brev__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
Register:Rd
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@BREV_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_MUFU ;

OPCODES
        BREVmio_pipe =  0b101100000001;
        BREV =  0b101100000001;

ENCODING
!brev__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_8_23_16_Rd=Rd;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "flo__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FMT("S32"):fmt /SH("nosh"):sh
Register:Rd
','Predicate("PT"):Pu
',' [~] Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@FLO_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_MUFU ;

OPCODES
        FLOmio_pipe =  0b1100000000;
        FLO =  0b1100000000;

ENCODING
!flo__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=sh;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_39_32_Rb=Rb;
BITS_1_63_63_Sb_negate=Rb@invert;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "flo__RuIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FMT("S32"):fmt /SH("nosh"):sh
Register:Rd
','Predicate("PT"):Pu
','UImm(32)*:Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@FLO_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_MUFU ;

OPCODES
        FLOmio_pipe =  0b100100000000;
        FLO =  0b100100000000;

ENCODING
!flo__RuIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=sh;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_32_63_32_Ra_offset=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "flo__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FMT("S32"):fmt /SH("nosh"):sh
Register:Rd
','Predicate("PT"):Pu
',' [~] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@FLO_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_MUFU ;

OPCODES
        FLOmio_pipe =  0b101100000000;
        FLO =  0b101100000000;

ENCODING
!flo__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=sh;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_1_63_63_Sb_negate=Sb@invert;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "i2i__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DSTFMT:dstfmt /S32ONLY_i2i:srcfmt /SATONLY:SAT
Register:Rd
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_2(batch_t,usched_info,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@I2I_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;

OPCODES
        I2Iint_pipe =  0b1000111000;
        I2I =  0b1000111000;

ENCODING
!i2i__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_77_76_msi=dstfmt;
BITS_8_23_16_Rd=Rd;
BITS_8_39_32_Rb=Rb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_2(batch_t,usched_info,reuse_src_b);



CLASS "i2i__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DSTFMT:dstfmt /S32ONLY_i2i:srcfmt /SATONLY:SAT
Register:Rd
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_1(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@I2I_Cb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;

OPCODES
        I2Iint_pipe =  0b101000111000;
        I2I =  0b101000111000;

ENCODING
!i2i__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_77_76_msi=dstfmt;
BITS_8_23_16_Rd=Rd;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_1(batch_t,usched_info);



CLASS "i2i__RsIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DSTFMT:dstfmt /S32ONLY_i2i:srcfmt /SATONLY:SAT
Register:Rd
','SImm(32)*:Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_1(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@I2I_Ib ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;

OPCODES
        I2Iint_pipe =  0b100000111000;
        I2I =  0b100000111000;

ENCODING
!i2i__RsIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_77_76_msi=dstfmt;
BITS_8_23_16_Rd=Rd;
BITS_32_63_32_Ra_offset=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_1(batch_t,usched_info);



CLASS "i2ip__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DSTFMT:dstfmt /S32ONLY_i2i:srcfmt /SATONLY:SAT
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
','Register:Rc {/REUSE("noreuse"):reuse_src_c} /HSEL("H0"):extract
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_ERROR
 ((extract !=`HSEL@INVALID2)&&(extract !=`HSEL@INVALID3)) :
 "Invalid extract field value"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@I2IP_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        I2IPint_pipe =  0b1000111001;
        I2IP =  0b1000111001;

ENCODING
!i2ip__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_77_76_msi=dstfmt;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_2_73_72_extract=extract;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



CLASS "i2ip__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DSTFMT:dstfmt /S32ONLY_i2i:srcfmt /SATONLY:SAT
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
','Register:Rc {/REUSE("noreuse"):reuse_src_c} /HSEL("H0"):extract
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_ERROR
 ((extract !=`HSEL@INVALID2)&&(extract !=`HSEL@INVALID3)) :
 "Invalid extract field value"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@I2IP_Cb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        I2IPint_pipe =  0b101000111001;
        I2IP =  0b101000111001;

ENCODING
!i2ip__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_77_76_msi=dstfmt;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_8_71_64_Rc=Rc;
BITS_2_73_72_extract=extract;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "i2ip__RsIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DSTFMT:dstfmt /S32ONLY_i2i:srcfmt /SATONLY:SAT
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','SImm(32)*:Sb
','Register:Rc {/REUSE("noreuse"):reuse_src_c} /HSEL("H0"):extract
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_ERROR
 ((extract !=`HSEL@INVALID2)&&(extract !=`HSEL@INVALID3)) :
 "Invalid extract field value"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@I2IP_Ib ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        I2IPint_pipe =  0b100000111001;
        I2IP =  0b100000111001;

ENCODING
!i2ip__RsIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_77_76_msi=dstfmt;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=Rc;
BITS_2_73_72_extract=extract;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "iabs__RRR_R"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
Register:Rd
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_2(batch_t,usched_info,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IABS_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;

OPCODES
        IABSint_pipe =  0b1000010011;
        IABS =  0b1000010011;

ENCODING
!iabs__RRR_R_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_8_23_16_Rd=Rd;
BITS_8_39_32_Rb=Rb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_2(batch_t,usched_info,reuse_src_b);



CLASS "iabs__RsIR_I"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
Register:Rd
','SImm(32)*:Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_1(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IABS_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;

OPCODES
        IABSint_pipe =  0b100000010011;
        IABS =  0b100000010011;

ENCODING
!iabs__RsIR_I_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_8_23_16_Rd=Rd;
BITS_32_63_32_Ra_offset=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_1(batch_t,usched_info);



CLASS "iabs__RCR_C"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
Register:Rd
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_1(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IABS_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;

OPCODES
        IABSint_pipe =  0b101000010011;
        IABS =  0b101000010011;

ENCODING
!iabs__RCR_C_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_8_23_16_Rd=Rd;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_1(batch_t,usched_info);



CLASS "iadd3_noimm__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
Register:Rd
','Predicate("PT"):Pu
','Predicate("PT"):Pv
',' [-] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] Register:Rb {/REUSE("noreuse"):reuse_src_b}
',' [-] Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Ra@negate==1))) -> (((Rb@negate==0))) :
 "Invalid instruction combination ( rule name: nA-Rb)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Rb@negate==1))) -> (((Ra@negate==0))) :
 "Invalid instruction combination ( rule name: Ra-nB)"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IADD3_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        IADD3int_pipe =  0b1000010000;
        IADD3 =  0b1000010000;

ENCODING
!iadd3_noimm__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_74_74_tnspB=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=Pv;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@negate;
BITS_8_39_32_Rb=Rb;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_8_71_64_Rc=Rc;
BITS_1_75_75_size=Rc@negate;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_3_79_77_Pq =* 7;
BITS_1_80_80_ftz =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



CLASS "iadd3_noimm__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
Register:Rd
','Predicate("PT"):Pu
','Predicate("PT"):Pv
',' [-] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
',' [-] Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Ra@negate==1))) -> (((Sb@negate==0))) :
 "Invalid instruction combination ( rule name: nA-const)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Sb@negate==1))) -> (((Ra@negate==0))) :
 "Invalid instruction combination ( rule name: Ra-nConst)"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IADD3_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        IADD3int_pipe =  0b101000010000;
        IADD3 =  0b101000010000;

ENCODING
!iadd3_noimm__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_74_74_tnspB=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=Pv;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@negate;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_1_63_63_Sb_negate=Sb@negate;
BITS_8_71_64_Rc=Rc;
BITS_1_75_75_size=Rc@negate;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_3_79_77_Pq =* 7;
BITS_1_80_80_ftz =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "iadd3_imm__RsIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
Register:Rd
','Predicate("PT"):Pu
','Predicate("PT"):Pv
',' [-] Register:Ra {/REUSE("noreuse"):reuse_src_a}
','SImm(32)*:Sb
',' [-] Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IADD3_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        IADD3int_pipe =  0b100000010000;
        IADD3 =  0b100000010000;

ENCODING
!iadd3_imm__RsIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_74_74_tnspB=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=Pv;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@negate;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=Rc;
BITS_1_75_75_size=Rc@negate;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_3_79_77_Pq =* 7;
BITS_1_80_80_ftz =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



ALTERNATE CLASS "iadd_noimm__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
Register:Rd
','Predicate("PT"):Pu
',' [-] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] Register:Rb {/REUSE("noreuse"):reuse_src_b}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Ra@negate==1))) -> (((Rb@negate==0))) :
 "Invalid instruction combination ( rule name: nA-Rb)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Rb@negate==1))) -> (((Ra@negate==0))) :
 "Invalid instruction combination ( rule name: Ra-nB)"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IADD3_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        IADDint_pipe =  0b1000010000;
        IADD =  0b1000010000;

ENCODING
!iadd_noimm__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_74_74_tnspB=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=*7;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@negate;
BITS_8_39_32_Rb=Rb;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_8_71_64_Rc=*255;
BITS_1_75_75_size=*0;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_3_79_77_Pq =* 7;
BITS_1_80_80_ftz =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



ALTERNATE CLASS "iadd_noimm__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
Register:Rd
','Predicate("PT"):Pu
',' [-] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Ra@negate==1))) -> (((Sb@negate==0))) :
 "Invalid instruction combination ( rule name: nA-const)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Sb@negate==1))) -> (((Ra@negate==0))) :
 "Invalid instruction combination ( rule name: Ra-nConst)"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IADD3_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        IADDint_pipe =  0b101000010000;
        IADD =  0b101000010000;

ENCODING
!iadd_noimm__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_74_74_tnspB=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=*7;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@negate;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_1_63_63_Sb_negate=Sb@negate;
BITS_8_71_64_Rc=*255;
BITS_1_75_75_size=*0;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_3_79_77_Pq =* 7;
BITS_1_80_80_ftz =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



ALTERNATE CLASS "iadd_imm__RsIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
Register:Rd
','Predicate("PT"):Pu
',' [-] Register:Ra {/REUSE("noreuse"):reuse_src_a}
','SImm(32)*:Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IADD3_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        IADDint_pipe =  0b100000010000;
        IADD =  0b100000010000;

ENCODING
!iadd_imm__RsIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_74_74_tnspB=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=*7;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@negate;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=*255;
BITS_1_75_75_size=*0;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_3_79_77_Pq =* 7;
BITS_1_80_80_ftz =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



ALTERNATE CLASS "iadd32i_imm__RsIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
Register:Rd
','Predicate("PT"):Pu
',' [-] Register:Ra {/REUSE("noreuse"):reuse_src_a}
','SImm(32)*:Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IADD3_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        IADD32Iint_pipe =  0b100000010000;
        IADD32I =  0b100000010000;

ENCODING
!iadd32i_imm__RsIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_74_74_tnspB=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=*7;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@negate;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=*255;
BITS_1_75_75_size=*0;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_3_79_77_Pq =* 7;
BITS_1_80_80_ftz =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "iadd3_x_noimm__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /XONLY:X
Register:Rd
','Predicate("PT"):Pu
','Predicate("PT"):Pv
',' [~] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [~] Register:Rb {/REUSE("noreuse"):reuse_src_b}
',' [~] Register:Rc {/REUSE("noreuse"):reuse_src_c}
',' [!]Predicate:Pp
',' [!]Predicate:Pq
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Ra@invert==1))) -> (((Rb@invert==0))) :
 "Invalid instruction combination ( rule name: invA-Rb)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Rb@invert==1))) -> (((Ra@invert==0))) :
 "Invalid instruction combination ( rule name: Ra-invB)"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IADD3_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        IADD3int_pipe =  0b1000010000;
        IADD3 =  0b1000010000;

ENCODING
!iadd3_x_noimm__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_74_74_tnspB=*X;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=Pv;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@invert;
BITS_8_39_32_Rb=Rb;
BITS_1_63_63_Sb_negate=Rb@invert;
BITS_8_71_64_Rc=Rc;
BITS_1_75_75_size=Rc@invert;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_3_79_77_Pq = Pq;
BITS_1_80_80_ftz = Pq@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



CLASS "iadd3_x_noimm__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /XONLY:X
Register:Rd
','Predicate("PT"):Pu
','Predicate("PT"):Pv
',' [~] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [~] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
',' [~] Register:Rc {/REUSE("noreuse"):reuse_src_c}
',' [!]Predicate:Pp
',' [!]Predicate:Pq
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Ra@invert==1))) -> (((Sb@invert==0))) :
 "Invalid instruction combination ( rule name: invA-const)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Sb@invert==1))) -> (((Ra@invert==0))) :
 "Invalid instruction combination ( rule name: Ra-invConst)"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IADD3_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        IADD3int_pipe =  0b101000010000;
        IADD3 =  0b101000010000;

ENCODING
!iadd3_x_noimm__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_74_74_tnspB=*X;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=Pv;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@invert;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_1_63_63_Sb_negate=Sb@invert;
BITS_8_71_64_Rc=Rc;
BITS_1_75_75_size=Rc@invert;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_3_79_77_Pq = Pq;
BITS_1_80_80_ftz = Pq@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "iadd3_x_imm__RIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /XONLY:X
Register:Rd
','Predicate("PT"):Pu
','Predicate("PT"):Pv
',' [~] Register:Ra {/REUSE("noreuse"):reuse_src_a}
','SImm(32)*:Sb
',' [~] Register:Rc {/REUSE("noreuse"):reuse_src_c}
',' [!]Predicate:Pp
',' [!]Predicate:Pq
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IADD3_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        IADD3int_pipe =  0b100000010000;
        IADD3 =  0b100000010000;

ENCODING
!iadd3_x_imm__RIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_74_74_tnspB=*X;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=Pv;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@invert;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=Rc;
BITS_1_75_75_size=Rc@invert;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_3_79_77_Pq = Pq;
BITS_1_80_80_ftz = Pq@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



ALTERNATE CLASS "iadd_x_noimm__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /XONLY:X
Register:Rd
','Predicate("PT"):Pu
',' [~] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [~] Register:Rb {/REUSE("noreuse"):reuse_src_b}
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Ra@invert==1))) -> (((Rb@invert==0))) :
 "Invalid instruction combination ( rule name: invA-Rb)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Rb@invert==1))) -> (((Ra@invert==0))) :
 "Invalid instruction combination ( rule name: Ra-invB)"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IADD3_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        IADDint_pipe =  0b1000010000;
        IADD =  0b1000010000;

ENCODING
!iadd_x_noimm__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_74_74_tnspB=*X;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=*7;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@invert;
BITS_8_39_32_Rb=Rb;
BITS_1_63_63_Sb_negate=Rb@invert;
BITS_8_71_64_Rc=*255;
BITS_1_75_75_size=*0;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_3_79_77_Pq =* 7;
BITS_1_80_80_ftz =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



ALTERNATE CLASS "iadd_x_noimm__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /XONLY:X
Register:Rd
','Predicate("PT"):Pu
',' [~] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [~] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Ra@invert==1))) -> (((Sb@invert==0))) :
 "Invalid instruction combination ( rule name: invA-const)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Sb@invert==1))) -> (((Ra@invert==0))) :
 "Invalid instruction combination ( rule name: Ra-invConst)"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IADD3_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        IADDint_pipe =  0b101000010000;
        IADD =  0b101000010000;

ENCODING
!iadd_x_noimm__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_74_74_tnspB=*X;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=*7;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@invert;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_1_63_63_Sb_negate=Sb@invert;
BITS_8_71_64_Rc=*255;
BITS_1_75_75_size=*0;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_3_79_77_Pq =* 7;
BITS_1_80_80_ftz =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



ALTERNATE CLASS "iadd_x_imm__RIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /XONLY:X
Register:Rd
','Predicate("PT"):Pu
',' [~] Register:Ra {/REUSE("noreuse"):reuse_src_a}
','SImm(32)*:Sb
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IADD3_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        IADDint_pipe =  0b100000010000;
        IADD =  0b100000010000;

ENCODING
!iadd_x_imm__RIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_74_74_tnspB=*X;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=*7;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@invert;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=*255;
BITS_1_75_75_size=*0;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_3_79_77_Pq =* 7;
BITS_1_80_80_ftz =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



ALTERNATE CLASS "iadd32i_x_imm__RIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /XONLY:X
Register:Rd
','Predicate("PT"):Pu
',' [~] Register:Ra {/REUSE("noreuse"):reuse_src_a}
','SImm(32)*:Sb
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IADD3_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        IADD32Iint_pipe =  0b100000010000;
        IADD32I =  0b100000010000;

ENCODING
!iadd32i_x_imm__RIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_74_74_tnspB=*X;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=*7;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@invert;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=*255;
BITS_1_75_75_size=*0;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_3_79_77_Pq =* 7;
BITS_1_80_80_ftz =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "idp_4a__R"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ONLY4A:mode /SRCFMT_U8_S8:SrcAFmt /SRCFMT_U8_S8:SrcBFmt
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IDP_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        IDPint_pipe =  0b1000100110;
        IDP =  0b1000100110;

ENCODING
!idp_4a__R_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_77_76_msi=*mode;
BITS_1_73_73_sz=SrcAFmt;
BITS_1_74_74_tnspB=SrcBFmt;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



CLASS "idp_4a__C"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ONLY4A:mode /SRCFMT_U8_S8:SrcAFmt /SRCFMT_U8_S8:SrcBFmt
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IDP_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        IDPint_pipe =  0b101000100110;
        IDP =  0b101000100110;

ENCODING
!idp_4a__C_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_77_76_msi=*mode;
BITS_1_73_73_sz=SrcAFmt;
BITS_1_74_74_tnspB=SrcBFmt;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



ALTERNATE CLASS "idp4a__R"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /SRCFMT_U8_S8:SrcAFmt /SRCFMT_U8_S8:SrcBFmt
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IDP_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        IDP4Aint_pipe =  0b1000100110;
        IDP4A =  0b1000100110;

ENCODING
!idp4a__R_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_77_76_msi=0;
BITS_1_73_73_sz=SrcAFmt;
BITS_1_74_74_tnspB=SrcBFmt;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



ALTERNATE CLASS "idp4a__C"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /SRCFMT_U8_S8:SrcAFmt /SRCFMT_U8_S8:SrcBFmt
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IDP_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        IDP4Aint_pipe =  0b101000100110;
        IDP4A =  0b101000100110;

ENCODING
!idp4a__C_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_77_76_msi=0;
BITS_1_73_73_sz=SrcAFmt;
BITS_1_74_74_tnspB=SrcBFmt;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "idp_2a__R"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /MODE_2ALO_2AHI:mode /SRCFMT16A:SrcAFmt /SRCFMT_U8_S8:SrcBFmt
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IDP_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        IDPint_pipe =  0b1000100110;
        IDP =  0b1000100110;

ENCODING
!idp_2a__R_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_77_76_msi=*mode;
BITS_1_73_73_sz=SrcAFmt;
BITS_1_74_74_tnspB=SrcBFmt;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



CLASS "idp_2a__C"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /MODE_2ALO_2AHI:mode /SRCFMT16A:SrcAFmt /SRCFMT_U8_S8:SrcBFmt
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IDP_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        IDPint_pipe =  0b101000100110;
        IDP =  0b101000100110;

ENCODING
!idp_2a__C_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_77_76_msi=*mode;
BITS_1_73_73_sz=SrcAFmt;
BITS_1_74_74_tnspB=SrcBFmt;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "imad__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOOnly("LO"):wide /FMT("S32"):fmt
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
',' [-] Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b1000100100;
        IMAD =  0b1000100100;

ENCODING
!imad__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=*7;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_1_75_75_size=Rc@negate;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



CLASS "imad__RsIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOOnly("LO"):wide /FMT("S32"):fmt
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','SImm(32)*:Sb
',' [-] Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_Imm_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b100000100100;
        IMAD =  0b100000100100;

ENCODING
!imad__RsIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=*7;
BITS_8_31_24_Ra=Ra;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=Rc;
BITS_1_75_75_size=Rc@negate;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "imad__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOOnly("LO"):wide /FMT("S32"):fmt
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
',' [-] Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_C_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b101000100100;
        IMAD =  0b101000100100;

ENCODING
!imad__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=*7;
BITS_8_31_24_Ra=Ra;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_8_71_64_Rc=Rc;
BITS_1_75_75_size=Rc@negate;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "imad__RRsI_RRI"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOOnly("LO"):wide /FMT("S32"):fmt
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
','SImm(32)*:Sc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_Rb_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b10000100100;
        IMAD =  0b10000100100;

ENCODING
!imad__RRsI_RRI_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=*7;
BITS_8_31_24_Ra=Ra;
BITS_8_71_64_Rc=Rb;
BITS_32_63_32_Ra_offset=Sc;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



CLASS "imad__RRC_RRC"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOOnly("LO"):wide /FMT("S32"):fmt
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
',' [-] C:Sc[UImm(5/0*):Sc_bank]*   [SImm(17)*:Sc_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sc_bank <= 17) || (Sc_bank >= 24 && Sc_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sc_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_Rb_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc_bank))+(1<<INDEX(Sc_addr));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b11000100100;
        IMAD =  0b11000100100;

ENCODING
!imad__RRC_RRC_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=*7;
BITS_8_31_24_Ra=Ra;
BITS_8_71_64_Rc=Rb;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sc_bank,Sc_addr);
BITS_1_63_63_Sb_negate=Sc@negate;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



ALTERNATE CLASS "imad_pseudo__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOOnly("LO"):wide /PSEUDO_OPCODE("nopseudo_opcode"):pseudo_opcode /FMT("S32"):fmt
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
',' [-] Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;


FORMAT_ALIAS pseudo_opcode = PSEUDO_OPCODE1:GetPseudoOpRRR(Ra, Rb);

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b1000100100;
        IMAD =  0b1000100100;

ENCODING
!imad_pseudo__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=*7;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_1_75_75_size=Rc@negate;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



REMAP "@%%Predicate(Pg) IMAD .%%LOOnly(wide) .%%FMT(fmt) %%Register(Rd), %%Register(Ra).%%REUSE(reuse_src_a), %%Register(Rb).%%REUSE(reuse_src_b), %%Register(Rc).%%REUSE(reuse_src_c) &%%REQ(req)=req_bit_set ?%%USCHED_INFO(usched_info) ?%%BATCH_T(batch_t)";

ALTERNATE CLASS "imad_pseudo__RsIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOOnly("LO"):wide /PSEUDO_OPCODE("nopseudo_opcode"):pseudo_opcode /FMT("S32"):fmt
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','SImm(32)*:Sb
',' [-] Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;


FORMAT_ALIAS pseudo_opcode = PSEUDO_OPCODE1:GetPseudoOpRIR(Ra, Sb, Rc);

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_Imm_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b100000100100;
        IMAD =  0b100000100100;

ENCODING
!imad_pseudo__RsIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=*7;
BITS_8_31_24_Ra=Ra;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=Rc;
BITS_1_75_75_size=Rc@negate;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



REMAP "@%%Predicate(Pg) IMAD .%%LOOnly(wide) .%%FMT(fmt) %%Register(Rd), %%Register(Ra).%%REUSE(reuse_src_a), `(Sb), %%Register(Rc).%%REUSE(reuse_src_c) &%%REQ(req)=req_bit_set ?%%USCHED_INFO(usched_info) ?%%BATCH_T(batch_t)";

ALTERNATE CLASS "imad_pseudo__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOOnly("LO"):wide /PSEUDO_OPCODE("nopseudo_opcode"):pseudo_opcode /FMT("S32"):fmt
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
',' [-] Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;


FORMAT_ALIAS pseudo_opcode = PSEUDO_OPCODE1:GetPseudoOpRCR(Ra, Sb, Rc);

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_C_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b101000100100;
        IMAD =  0b101000100100;

ENCODING
!imad_pseudo__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=*7;
BITS_8_31_24_Ra=Ra;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_8_71_64_Rc=Rc;
BITS_1_75_75_size=Rc@negate;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);


REMAP "@%%Predicate(Pg) IMAD .%%LOOnly(wide) .%%FMT(fmt) %%Register(Rd), %%Register(Ra).%%REUSE(reuse_src_a), %%C(Sb)[`(Sb_bank)][`(Sb_addr)], %%Register(Rc).%%REUSE(reuse_src_c) &%%REQ(req)=req_bit_set ?%%USCHED_INFO(usched_info) ?%%BATCH_T(batch_t)";


ALTERNATE CLASS "imad_pseudo__RRsI_RRI"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOOnly("LO"):wide /PSEUDO_OPCODE("nopseudo_opcode"):pseudo_opcode /FMT("S32"):fmt
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
','SImm(32)*:Sc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;


FORMAT_ALIAS pseudo_opcode = PSEUDO_OPCODE1:GetPseudoOpRRI(Ra, Rb, Sc);

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_Rb_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b10000100100;
        IMAD =  0b10000100100;

ENCODING
!imad_pseudo__RRsI_RRI_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=*7;
BITS_8_31_24_Ra=Ra;
BITS_8_71_64_Rc=Rb;
BITS_32_63_32_Ra_offset=Sc;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);


REMAP "@%%Predicate(Pg) IMAD .%%LOOnly(wide) .%%FMT(fmt) %%Register(Rd), %%Register(Ra).%%REUSE(reuse_src_a), %%Register(Rb).%%REUSE(reuse_src_b), `(Sc) &%%REQ(req)=req_bit_set ?%%USCHED_INFO(usched_info) ?%%BATCH_T(batch_t)";


ALTERNATE CLASS "imad_pseudo__RRC_RRC"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOOnly("LO"):wide /PSEUDO_OPCODE("nopseudo_opcode"):pseudo_opcode /FMT("S32"):fmt
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
',' [-] C:Sc[UImm(5/0*):Sc_bank]*   [SImm(17)*:Sc_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;


FORMAT_ALIAS pseudo_opcode = PSEUDO_OPCODE1:GetPseudoOpRRC(Ra, Rb, Sc);

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sc_bank <= 17) || (Sc_bank >= 24 && Sc_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sc_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_Rb_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc_bank))+(1<<INDEX(Sc_addr));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b11000100100;
        IMAD =  0b11000100100;

ENCODING
!imad_pseudo__RRC_RRC_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=*7;
BITS_8_31_24_Ra=Ra;
BITS_8_71_64_Rc=Rb;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sc_bank,Sc_addr);
BITS_1_63_63_Sb_negate=Sc@negate;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);


REMAP "@%%Predicate(Pg) IMAD .%%LOOnly(wide) .%%FMT(fmt) %%Register(Rd), %%Register(Ra).%%REUSE(reuse_src_a), %%Register(Rb).%%REUSE(reuse_src_b), %%C(Sc)[`(Sc_bank)][`(Sc_addr)] &%%REQ(req)=req_bit_set ?%%USCHED_INFO(usched_info) ?%%BATCH_T(batch_t)";


CLASS "imad_x__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOOnly("LO"):wide /FMT("S32"):fmt /XONLY:X
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
',' [~] Register:Rc {/REUSE("noreuse"):reuse_src_c}
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b1000100100;
        IMAD =  0b1000100100;

ENCODING
!imad_x__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=*X;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=*7;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_1_75_75_size=Rc@invert;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



CLASS "imad_x__RsIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOOnly("LO"):wide /FMT("S32"):fmt /XONLY:X
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','SImm(32)*:Sb
',' [~] Register:Rc {/REUSE("noreuse"):reuse_src_c}
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_Imm_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b100000100100;
        IMAD =  0b100000100100;

ENCODING
!imad_x__RsIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=*X;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=*7;
BITS_8_31_24_Ra=Ra;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=Rc;
BITS_1_75_75_size=Rc@invert;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "imad_x__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOOnly("LO"):wide /FMT("S32"):fmt /XONLY:X
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
',' [~] Register:Rc {/REUSE("noreuse"):reuse_src_c}
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_C_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b101000100100;
        IMAD =  0b101000100100;

ENCODING
!imad_x__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=*X;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=*7;
BITS_8_31_24_Ra=Ra;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_8_71_64_Rc=Rc;
BITS_1_75_75_size=Rc@invert;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "imad_x__RRsI_RRI"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOOnly("LO"):wide /FMT("S32"):fmt /XONLY:X
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
','SImm(32)*:Sc
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_Rb_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b10000100100;
        IMAD =  0b10000100100;

ENCODING
!imad_x__RRsI_RRI_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=*X;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=*7;
BITS_8_31_24_Ra=Ra;
BITS_8_71_64_Rc=Rb;
BITS_32_63_32_Ra_offset=Sc;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



CLASS "imad_x__RRC_RRC"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOOnly("LO"):wide /FMT("S32"):fmt /XONLY:X
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
',' [~] C:Sc[UImm(5/0*):Sc_bank]*   [SImm(17)*:Sc_addr]
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sc_bank <= 17) || (Sc_bank >= 24 && Sc_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sc_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_Rb_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc_bank))+(1<<INDEX(Sc_addr));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b11000100100;
        IMAD =  0b11000100100;

ENCODING
!imad_x__RRC_RRC_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=*X;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=*7;
BITS_8_31_24_Ra=Ra;
BITS_8_71_64_Rc=Rb;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sc_bank,Sc_addr);
BITS_1_63_63_Sb_negate=Sc@invert;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



ALTERNATE CLASS "imad_x_pseudo__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOOnly("LO"):wide /PSEUDO_OPCODE("nopseudo_opcode"):pseudo_opcode /FMT("S32"):fmt /XONLY:X
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
',' [~] Register:Rc {/REUSE("noreuse"):reuse_src_c}
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b1000100100;
        IMAD =  0b1000100100;

ENCODING
!imad_x_pseudo__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=*X;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=*7;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_1_75_75_size=Rc@invert;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



ALTERNATE CLASS "imad_x_pseudo__RsIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOOnly("LO"):wide /PSEUDO_OPCODE("nopseudo_opcode"):pseudo_opcode /FMT("S32"):fmt /XONLY:X
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','SImm(32)*:Sb
',' [~] Register:Rc {/REUSE("noreuse"):reuse_src_c}
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_Imm_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b100000100100;
        IMAD =  0b100000100100;

ENCODING
!imad_x_pseudo__RsIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=*X;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=*7;
BITS_8_31_24_Ra=Ra;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=Rc;
BITS_1_75_75_size=Rc@invert;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



ALTERNATE CLASS "imad_x_pseudo__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOOnly("LO"):wide /PSEUDO_OPCODE("nopseudo_opcode"):pseudo_opcode /FMT("S32"):fmt /XONLY:X
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
',' [~] Register:Rc {/REUSE("noreuse"):reuse_src_c}
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_C_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b101000100100;
        IMAD =  0b101000100100;

ENCODING
!imad_x_pseudo__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=*X;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=*7;
BITS_8_31_24_Ra=Ra;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_8_71_64_Rc=Rc;
BITS_1_75_75_size=Rc@invert;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



ALTERNATE CLASS "imad_x_pseudo__RRsI_RRI"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOOnly("LO"):wide /PSEUDO_OPCODE("nopseudo_opcode"):pseudo_opcode /FMT("S32"):fmt /XONLY:X
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
','SImm(32)*:Sc
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_Rb_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b10000100100;
        IMAD =  0b10000100100;

ENCODING
!imad_x_pseudo__RRsI_RRI_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=*X;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=*7;
BITS_8_31_24_Ra=Ra;
BITS_8_71_64_Rc=Rb;
BITS_32_63_32_Ra_offset=Sc;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



ALTERNATE CLASS "imad_x_pseudo__RRC_RRC"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOOnly("LO"):wide /PSEUDO_OPCODE("nopseudo_opcode"):pseudo_opcode /FMT("S32"):fmt /XONLY:X
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
',' [~] C:Sc[UImm(5/0*):Sc_bank]*   [SImm(17)*:Sc_addr]
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sc_bank <= 17) || (Sc_bank >= 24 && Sc_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sc_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_Rb_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc_bank))+(1<<INDEX(Sc_addr));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b11000100100;
        IMAD =  0b11000100100;

ENCODING
!imad_x_pseudo__RRC_RRC_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=*X;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=*7;
BITS_8_31_24_Ra=Ra;
BITS_8_71_64_Rc=Rb;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sc_bank,Sc_addr);
BITS_1_63_63_Sb_negate=Sc@invert;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



CLASS "imad_wide__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /WIDEONLY:wide /FMT("S32"):fmt
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
',' [-] Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_WIDE_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b1000100101;
        IMAD =  0b1000100101;

ENCODING
!imad_wide__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_1_75_75_size=Rc@negate;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



CLASS "imad_wide__RsIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /WIDEONLY:wide /FMT("S32"):fmt
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','SImm(32)*:Sb
',' [-] Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_WIDE_Imm_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b100000100101;
        IMAD =  0b100000100101;

ENCODING
!imad_wide__RsIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=Rc;
BITS_1_75_75_size=Rc@negate;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "imad_wide__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /WIDEONLY:wide /FMT("S32"):fmt
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
',' [-] Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_WIDE_C_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b101000100101;
        IMAD =  0b101000100101;

ENCODING
!imad_wide__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_8_71_64_Rc=Rc;
BITS_1_75_75_size=Rc@negate;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "imad_wide__RRC_RRC"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /WIDEONLY:wide /FMT("S32"):fmt
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
',' [-] C:Sc[UImm(5/0*):Sc_bank]*   [SImm(17)*:Sc_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sc_bank <= 17) || (Sc_bank >= 24 && Sc_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sc_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_WIDE_Rb_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc_bank))+(1<<INDEX(Sc_addr));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b11000100101;
        IMAD =  0b11000100101;

ENCODING
!imad_wide__RRC_RRC_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_8_71_64_Rc=Rb;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sc_bank,Sc_addr);
BITS_1_63_63_Sb_negate=Sc@negate;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



ALTERNATE CLASS "imad_wide_pseudo__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /WIDEONLY:wide /PSEUDO_OPCODE("nopseudo_opcode"):pseudo_opcode /FMT("S32"):fmt
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
',' [-] Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_WIDE_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b1000100101;
        IMAD =  0b1000100101;

ENCODING
!imad_wide_pseudo__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_1_75_75_size=Rc@negate;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



ALTERNATE CLASS "imad_wide_pseudo__RsIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /WIDEONLY:wide /PSEUDO_OPCODE("nopseudo_opcode"):pseudo_opcode /FMT("S32"):fmt
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','SImm(32)*:Sb
',' [-] Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_WIDE_Imm_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b100000100101;
        IMAD =  0b100000100101;

ENCODING
!imad_wide_pseudo__RsIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=Rc;
BITS_1_75_75_size=Rc@negate;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



ALTERNATE CLASS "imad_wide_pseudo__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /WIDEONLY:wide /PSEUDO_OPCODE("nopseudo_opcode"):pseudo_opcode /FMT("S32"):fmt
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
',' [-] Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_WIDE_C_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b101000100101;
        IMAD =  0b101000100101;

ENCODING
!imad_wide_pseudo__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_8_71_64_Rc=Rc;
BITS_1_75_75_size=Rc@negate;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



ALTERNATE CLASS "imad_wide_pseudo__RRC_RRC"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /WIDEONLY:wide /PSEUDO_OPCODE("nopseudo_opcode"):pseudo_opcode /FMT("S32"):fmt
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
',' [-] C:Sc[UImm(5/0*):Sc_bank]*   [SImm(17)*:Sc_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sc_bank <= 17) || (Sc_bank >= 24 && Sc_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sc_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_WIDE_Rb_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc_bank))+(1<<INDEX(Sc_addr));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b11000100101;
        IMAD =  0b11000100101;

ENCODING
!imad_wide_pseudo__RRC_RRC_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_8_71_64_Rc=Rb;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sc_bank,Sc_addr);
BITS_1_63_63_Sb_negate=Sc@negate;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



CLASS "imad_wide_x__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /WIDEONLY:wide /FMT("S32"):fmt /XONLY:X
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
',' [~] Register:Rc {/REUSE("noreuse"):reuse_src_c}
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_WIDE_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b1000100101;
        IMAD =  0b1000100101;

ENCODING
!imad_wide_x__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=*X;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_1_75_75_size=Rc@invert;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



CLASS "imad_wide_x__RsIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /WIDEONLY:wide /FMT("S32"):fmt /XONLY:X
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','SImm(32)*:Sb
',' [~] Register:Rc {/REUSE("noreuse"):reuse_src_c}
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_WIDE_Imm_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b100000100101;
        IMAD =  0b100000100101;

ENCODING
!imad_wide_x__RsIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=*X;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=Rc;
BITS_1_75_75_size=Rc@invert;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "imad_wide_x__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /WIDEONLY:wide /FMT("S32"):fmt /XONLY:X
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
',' [~] Register:Rc {/REUSE("noreuse"):reuse_src_c}
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_WIDE_C_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b101000100101;
        IMAD =  0b101000100101;

ENCODING
!imad_wide_x__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=*X;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_8_71_64_Rc=Rc;
BITS_1_75_75_size=Rc@invert;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "imad_wide_x__RRC_RRC"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /WIDEONLY:wide /FMT("S32"):fmt /XONLY:X
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
',' [~] C:Sc[UImm(5/0*):Sc_bank]*   [SImm(17)*:Sc_addr]
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sc_bank <= 17) || (Sc_bank >= 24 && Sc_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sc_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_WIDE_Rb_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc_bank))+(1<<INDEX(Sc_addr));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b11000100101;
        IMAD =  0b11000100101;

ENCODING
!imad_wide_x__RRC_RRC_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=*X;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_8_71_64_Rc=Rb;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sc_bank,Sc_addr);
BITS_1_63_63_Sb_negate=Sc@invert;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



ALTERNATE CLASS "imad_wide_x_pseudo__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /WIDEONLY:wide /PSEUDO_OPCODE("nopseudo_opcode"):pseudo_opcode /FMT("S32"):fmt /XONLY:X
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
',' [~] Register:Rc {/REUSE("noreuse"):reuse_src_c}
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_WIDE_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b1000100101;
        IMAD =  0b1000100101;

ENCODING
!imad_wide_x_pseudo__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=*X;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_1_75_75_size=Rc@invert;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



ALTERNATE CLASS "imad_wide_x_pseudo__RsIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /WIDEONLY:wide /PSEUDO_OPCODE("nopseudo_opcode"):pseudo_opcode /FMT("S32"):fmt /XONLY:X
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','SImm(32)*:Sb
',' [~] Register:Rc {/REUSE("noreuse"):reuse_src_c}
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_WIDE_Imm_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b100000100101;
        IMAD =  0b100000100101;

ENCODING
!imad_wide_x_pseudo__RsIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=*X;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=Rc;
BITS_1_75_75_size=Rc@invert;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



ALTERNATE CLASS "imad_wide_x_pseudo__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /WIDEONLY:wide /PSEUDO_OPCODE("nopseudo_opcode"):pseudo_opcode /FMT("S32"):fmt /XONLY:X
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
',' [~] Register:Rc {/REUSE("noreuse"):reuse_src_c}
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_WIDE_C_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b101000100101;
        IMAD =  0b101000100101;

ENCODING
!imad_wide_x_pseudo__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=*X;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_8_71_64_Rc=Rc;
BITS_1_75_75_size=Rc@invert;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



ALTERNATE CLASS "imad_wide_x_pseudo__RRC_RRC"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /WIDEONLY:wide /PSEUDO_OPCODE("nopseudo_opcode"):pseudo_opcode /FMT("S32"):fmt /XONLY:X
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
',' [~] C:Sc[UImm(5/0*):Sc_bank]*   [SImm(17)*:Sc_addr]
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sc_bank <= 17) || (Sc_bank >= 24 && Sc_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sc_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_WIDE_Rb_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc_bank))+(1<<INDEX(Sc_addr));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b11000100101;
        IMAD =  0b11000100101;

ENCODING
!imad_wide_x_pseudo__RRC_RRC_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=*X;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_8_71_64_Rc=Rb;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sc_bank,Sc_addr);
BITS_1_63_63_Sb_negate=Sc@invert;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



CLASS "imad_hi__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /HIONLY:wide /FMT("S32"):fmt
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
',' [-] Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_HI_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b1000100111;
        IMAD =  0b1000100111;

ENCODING
!imad_hi__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_1_75_75_size=Rc@negate;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



CLASS "imad_hi__RsIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /HIONLY:wide /FMT("S32"):fmt
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','SImm(32)*:Sb
',' [-] Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_HI_Imm_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b100000100111;
        IMAD =  0b100000100111;

ENCODING
!imad_hi__RsIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=Rc;
BITS_1_75_75_size=Rc@negate;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "imad_hi__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /HIONLY:wide /FMT("S32"):fmt
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
',' [-] Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_HI_C_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b101000100111;
        IMAD =  0b101000100111;

ENCODING
!imad_hi__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_8_71_64_Rc=Rc;
BITS_1_75_75_size=Rc@negate;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "imad_hi__RRC_RRC"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /HIONLY:wide /FMT("S32"):fmt
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
',' [-] C:Sc[UImm(5/0*):Sc_bank]*   [SImm(17)*:Sc_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sc_bank <= 17) || (Sc_bank >= 24 && Sc_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sc_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_HI_Rb_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc_bank))+(1<<INDEX(Sc_addr));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b11000100111;
        IMAD =  0b11000100111;

ENCODING
!imad_hi__RRC_RRC_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_8_71_64_Rc=Rb;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sc_bank,Sc_addr);
BITS_1_63_63_Sb_negate=Sc@negate;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



ALTERNATE CLASS "imad_hi_pseudo__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /HIONLY:wide /PSEUDO_OPCODE("nopseudo_opcode"):pseudo_opcode /FMT("S32"):fmt
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
',' [-] Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_HI_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b1000100111;
        IMAD =  0b1000100111;

ENCODING
!imad_hi_pseudo__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_1_75_75_size=Rc@negate;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



ALTERNATE CLASS "imad_hi_pseudo__RsIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /HIONLY:wide /PSEUDO_OPCODE("nopseudo_opcode"):pseudo_opcode /FMT("S32"):fmt
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','SImm(32)*:Sb
',' [-] Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_HI_Imm_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b100000100111;
        IMAD =  0b100000100111;

ENCODING
!imad_hi_pseudo__RsIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=Rc;
BITS_1_75_75_size=Rc@negate;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



ALTERNATE CLASS "imad_hi_pseudo__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /HIONLY:wide /PSEUDO_OPCODE("nopseudo_opcode"):pseudo_opcode /FMT("S32"):fmt
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
',' [-] Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_HI_C_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b101000100111;
        IMAD =  0b101000100111;

ENCODING
!imad_hi_pseudo__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_8_71_64_Rc=Rc;
BITS_1_75_75_size=Rc@negate;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



ALTERNATE CLASS "imad_hi_pseudo__RRC_RRC"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /HIONLY:wide /PSEUDO_OPCODE("nopseudo_opcode"):pseudo_opcode /FMT("S32"):fmt
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
',' [-] C:Sc[UImm(5/0*):Sc_bank]*   [SImm(17)*:Sc_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sc_bank <= 17) || (Sc_bank >= 24 && Sc_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sc_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_HI_Rb_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc_bank))+(1<<INDEX(Sc_addr));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b11000100111;
        IMAD =  0b11000100111;

ENCODING
!imad_hi_pseudo__RRC_RRC_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_8_71_64_Rc=Rb;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sc_bank,Sc_addr);
BITS_1_63_63_Sb_negate=Sc@negate;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



CLASS "imad_hi_x__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /HIONLY:wide /FMT("S32"):fmt /XONLY:X
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
',' [~] Register:Rc {/REUSE("noreuse"):reuse_src_c}
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_HI_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b1000100111;
        IMAD =  0b1000100111;

ENCODING
!imad_hi_x__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=*X;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_1_75_75_size=Rc@invert;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



CLASS "imad_hi_x__RsIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /HIONLY:wide /FMT("S32"):fmt /XONLY:X
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','SImm(32)*:Sb
',' [~] Register:Rc {/REUSE("noreuse"):reuse_src_c}
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_HI_Imm_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b100000100111;
        IMAD =  0b100000100111;

ENCODING
!imad_hi_x__RsIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=*X;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=Rc;
BITS_1_75_75_size=Rc@invert;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "imad_hi_x__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /HIONLY:wide /FMT("S32"):fmt /XONLY:X
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
',' [~] Register:Rc {/REUSE("noreuse"):reuse_src_c}
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_HI_C_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b101000100111;
        IMAD =  0b101000100111;

ENCODING
!imad_hi_x__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=*X;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_8_71_64_Rc=Rc;
BITS_1_75_75_size=Rc@invert;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "imad_hi_x__RRC_RRC"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /HIONLY:wide /FMT("S32"):fmt /XONLY:X
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
',' [~] C:Sc[UImm(5/0*):Sc_bank]*   [SImm(17)*:Sc_addr]
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sc_bank <= 17) || (Sc_bank >= 24 && Sc_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sc_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_HI_Rb_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc_bank))+(1<<INDEX(Sc_addr));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b11000100111;
        IMAD =  0b11000100111;

ENCODING
!imad_hi_x__RRC_RRC_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=*X;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_8_71_64_Rc=Rb;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sc_bank,Sc_addr);
BITS_1_63_63_Sb_negate=Sc@invert;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



ALTERNATE CLASS "imad_hi_x_pseudo__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /HIONLY:wide /PSEUDO_OPCODE("nopseudo_opcode"):pseudo_opcode /FMT("S32"):fmt /XONLY:X
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
',' [~] Register:Rc {/REUSE("noreuse"):reuse_src_c}
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_HI_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b1000100111;
        IMAD =  0b1000100111;

ENCODING
!imad_hi_x_pseudo__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=*X;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_1_75_75_size=Rc@invert;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



ALTERNATE CLASS "imad_hi_x_pseudo__RsIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /HIONLY:wide /PSEUDO_OPCODE("nopseudo_opcode"):pseudo_opcode /FMT("S32"):fmt /XONLY:X
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','SImm(32)*:Sb
',' [~] Register:Rc {/REUSE("noreuse"):reuse_src_c}
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_HI_Imm_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b100000100111;
        IMAD =  0b100000100111;

ENCODING
!imad_hi_x_pseudo__RsIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=*X;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=Rc;
BITS_1_75_75_size=Rc@invert;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



ALTERNATE CLASS "imad_hi_x_pseudo__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /HIONLY:wide /PSEUDO_OPCODE("nopseudo_opcode"):pseudo_opcode /FMT("S32"):fmt /XONLY:X
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
',' [~] Register:Rc {/REUSE("noreuse"):reuse_src_c}
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_HI_C_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b101000100111;
        IMAD =  0b101000100111;

ENCODING
!imad_hi_x_pseudo__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=*X;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_8_71_64_Rc=Rc;
BITS_1_75_75_size=Rc@invert;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



ALTERNATE CLASS "imad_hi_x_pseudo__RRC_RRC"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /HIONLY:wide /PSEUDO_OPCODE("nopseudo_opcode"):pseudo_opcode /FMT("S32"):fmt /XONLY:X
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
',' [~] C:Sc[UImm(5/0*):Sc_bank]*   [SImm(17)*:Sc_addr]
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sc_bank <= 17) || (Sc_bank >= 24 && Sc_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sc_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_HI_Rb_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc_bank))+(1<<INDEX(Sc_addr));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        IMADfmalighter_pipe =  0b11000100111;
        IMAD =  0b11000100111;

ENCODING
!imad_hi_x_pseudo__RRC_RRC_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=*X;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_8_71_64_Rc=Rb;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sc_bank,Sc_addr);
BITS_1_63_63_Sb_negate=Sc@invert;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



ALTERNATE CLASS "imul__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOOnly("LO"):wide /FMT("S32"):fmt
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        IMULfmalighter_pipe =  0b1000100100;
        IMUL =  0b1000100100;

ENCODING
!imul__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=*7;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=*255;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



ALTERNATE CLASS "imul__RsIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOOnly("LO"):wide /FMT("S32"):fmt
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','SImm(32)*:Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_Imm_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        IMULfmalighter_pipe =  0b100000100100;
        IMUL =  0b100000100100;

ENCODING
!imul__RsIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=*7;
BITS_8_31_24_Ra=Ra;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=*255;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



ALTERNATE CLASS "imul__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOOnly("LO"):wide /FMT("S32"):fmt
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_C_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        IMULfmalighter_pipe =  0b101000100100;
        IMUL =  0b101000100100;

ENCODING
!imul__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=*7;
BITS_8_31_24_Ra=Ra;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_8_71_64_Rc=*255;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



ALTERNATE CLASS "imul32i_lo__RsIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOOnly("LO"):wide /FMT("S32"):fmt
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','SImm(32)*:Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_Imm_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        IMUL32Ifmalighter_pipe =  0b100000100100;
        IMUL32I =  0b100000100100;

ENCODING
!imul32i_lo__RsIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=*7;
BITS_8_31_24_Ra=Ra;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=*255;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



ALTERNATE CLASS "imul_wide__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /WIDEONLY:wide /FMT("S32"):fmt
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_WIDE_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        IMULfmalighter_pipe =  0b1000100101;
        IMUL =  0b1000100101;

ENCODING
!imul_wide__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=*255;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



ALTERNATE CLASS "imul_wide__RsIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /WIDEONLY:wide /FMT("S32"):fmt
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','SImm(32)*:Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_WIDE_Imm_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        IMULfmalighter_pipe =  0b100000100101;
        IMUL =  0b100000100101;

ENCODING
!imul_wide__RsIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=*255;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



ALTERNATE CLASS "imul_wide__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /WIDEONLY:wide /FMT("S32"):fmt
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_WIDE_C_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        IMULfmalighter_pipe =  0b101000100101;
        IMUL =  0b101000100101;

ENCODING
!imul_wide__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_8_71_64_Rc=*255;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



ALTERNATE CLASS "imul32i_wide__RsIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /WIDEONLY:wide /FMT("S32"):fmt
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','SImm(32)*:Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMAD_WIDE_Imm_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        IMUL32Ifmalighter_pipe =  0b100000100101;
        IMUL32I =  0b100000100101;

ENCODING
!imul32i_wide__RsIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_74_74_tnspB=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=*255;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "imma_8816_8_8_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ONLY8816:size /SRCFMT_U8_S8:srcFmtA /SRCFMT_U8_S8:srcFmtB /SAT("nosat"):SAT
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a} /ROWONLY:row_A
','Register:Rb {/REUSE("noreuse"):reuse_src_b} /COLONLY:col_B
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"
ILLEGAL_INSTR_ENCODING_ERROR
 (((size == `ONLY8816@"8816"))) -> (((srcFmtA == `SRCFMT_U8_S8@S8)||(srcFmtA == `SRCFMT_U8_S8@U8))&&((srcFmtB == `SRCFMT_U8_S8@S8)||(srcFmtB == `SRCFMT_U8_S8@U8))) :
 "Invalid instruction combination ( rule name: 8816_A8_B8)"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMMA_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_IMMA ;

OPCODES
        IMMAint_pipe =  0b1000110111;
        IMMA =  0b1000110111;

ENCODING
!imma_8816_8_8__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_75_75_size=size;
BITS_2_77_76_msi=*srcFmtA;
BITS_2_79_78_rnd=srcFmtB;
BITS_1_80_80_ftz=*0;
BITS_1_82_82_SAT=SAT;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=row_A;
BITS_8_39_32_Rb=Rb;
BITS_1_74_74_tnspB=col_B;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



CLASS "imma_8816_16_8_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ONLY8816:size /SRCFMT_U16_S16:srcFmtA /SRCFMT_U8_S8:srcFmtB /STEP_STEP0_STEP1:step /SAT("nosat"):SAT
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a} /ROWONLY:row_A
','Register:Rb {/REUSE("noreuse"):reuse_src_b} /COLONLY:col_B
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-2))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
MISALIGNED_REG_ERROR
 (((Rc)+((Rc)==`Register@RZ)) % 2) == 0 :
 "Register Rc is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (0) :
 "Disallowed specification: IMMA.8816.*16 is deprecated"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_EMULATABLE;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMMA_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 64;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_IMMA ;

OPCODES
        IMMAint_pipe =  0b1000110111;
        IMMA =  0b1000110111;

ENCODING
!imma_8816_16_8__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_75_75_size=size;
BITS_2_77_76_msi=*srcFmtA;
BITS_2_79_78_rnd=srcFmtB;
BITS_1_80_80_ftz=step;
BITS_1_82_82_SAT=SAT;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_1_73_73_sz=row_A;
BITS_8_39_32_Rb=Rb;
BITS_1_74_74_tnspB=col_B;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



CLASS "imnmx__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FMT("S32"):fmt
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMNMX_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        IMNMXint_pipe =  0b1000010111;
        IMNMX =  0b1000010111;

ENCODING
!imnmx__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



CLASS "imnmx__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FMT("S32"):fmt
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMNMX_Cb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        IMNMXint_pipe =  0b101000010111;
        IMNMX =  0b101000010111;

ENCODING
!imnmx__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "imnmx__RsIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FMT("S32"):fmt
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','SImm(32)*:Sb
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@IMNMX_Ib ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        IMNMXint_pipe =  0b100000010111;
        IMNMX =  0b100000010111;

ENCODING
!imnmx__RsIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_32_63_32_Ra_offset=Sb;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "isetp__RRR_RR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ICmpAll:icmp /FMT("S32"):fmt /Bop:bop /EX("noex"):ex
Predicate:Pu
','Predicate:Pv
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
',' [!]Predicate:Pp
',' [!]Predicate("PT"):Pr
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((bop !=`Bop@INVALID3)) :
 "Invalid bop field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@ISETP_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        ISETPint_pipe =  0b1000001100;
        ISETP =  0b1000001100;

ENCODING
!isetp__RRR_RR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_78_76_icmp=icmp;
BITS_1_73_73_sz=fmt;
BITS_2_75_74_iswzA=bop;
BITS_1_72_72_e=ex;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=Pv;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_3_70_68_Pr = Pr;
BITS_1_71_71_bval = Pr@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



CLASS "isetp__RsIR_RI"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ICmpAll:icmp /FMT("S32"):fmt /Bop:bop /EX("noex"):ex
Predicate:Pu
','Predicate:Pv
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','SImm(32)*:Sb
',' [!]Predicate:Pp
',' [!]Predicate("PT"):Pr
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((bop !=`Bop@INVALID3)) :
 "Invalid bop field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@ISETP_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        ISETPint_pipe =  0b100000001100;
        ISETP =  0b100000001100;

ENCODING
!isetp__RsIR_RI_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_78_76_icmp=icmp;
BITS_1_73_73_sz=fmt;
BITS_2_75_74_iswzA=bop;
BITS_1_72_72_e=ex;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=Pv;
BITS_8_31_24_Ra=Ra;
BITS_32_63_32_Ra_offset=Sb;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_3_70_68_Pr = Pr;
BITS_1_71_71_bval = Pr@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "isetp__RCR_RC"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ICmpAll:icmp /FMT("S32"):fmt /Bop:bop /EX("noex"):ex
Predicate:Pu
','Predicate:Pv
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
',' [!]Predicate:Pp
',' [!]Predicate("PT"):Pr
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((bop !=`Bop@INVALID3)) :
 "Invalid bop field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@ISETP_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        ISETPint_pipe =  0b101000001100;
        ISETP =  0b101000001100;

ENCODING
!isetp__RCR_RC_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_78_76_icmp=icmp;
BITS_1_73_73_sz=fmt;
BITS_2_75_74_iswzA=bop;
BITS_1_72_72_e=ex;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=Pv;
BITS_8_31_24_Ra=Ra;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_3_70_68_Pr = Pr;
BITS_1_71_71_bval = Pr@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



ALTERNATE CLASS "isetp_simple__RRR_RR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ICmpAll:icmp /FMT("S32"):fmt /EX("noex"):ex
Predicate:Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
',' [!]Predicate("PT"):Pr
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@ISETP_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        ISETPint_pipe =  0b1000001100;
        ISETP =  0b1000001100;

ENCODING
!isetp_simple__RRR_RR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_78_76_icmp=icmp;
BITS_1_73_73_sz=fmt;
BITS_2_75_74_iswzA=*0;
BITS_1_72_72_e=ex;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=*7;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*0;
BITS_3_70_68_Pr = Pr;
BITS_1_71_71_bval = Pr@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



ALTERNATE CLASS "isetp_simple__RsIR_RI"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ICmpAll:icmp /FMT("S32"):fmt /EX("noex"):ex
Predicate:Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','SImm(32)*:Sb
',' [!]Predicate("PT"):Pr
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@ISETP_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        ISETPint_pipe =  0b100000001100;
        ISETP =  0b100000001100;

ENCODING
!isetp_simple__RsIR_RI_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_78_76_icmp=icmp;
BITS_1_73_73_sz=fmt;
BITS_2_75_74_iswzA=*0;
BITS_1_72_72_e=ex;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=*7;
BITS_8_31_24_Ra=Ra;
BITS_32_63_32_Ra_offset=Sb;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*0;
BITS_3_70_68_Pr = Pr;
BITS_1_71_71_bval = Pr@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



ALTERNATE CLASS "isetp_simple__RCR_RC"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ICmpAll:icmp /FMT("S32"):fmt /EX("noex"):ex
Predicate:Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
',' [!]Predicate("PT"):Pr
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@ISETP_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        ISETPint_pipe =  0b101000001100;
        ISETP =  0b101000001100;

ENCODING
!isetp_simple__RCR_RC_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_78_76_icmp=icmp;
BITS_1_73_73_sz=fmt;
BITS_2_75_74_iswzA=*0;
BITS_1_72_72_e=ex;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=*7;
BITS_8_31_24_Ra=Ra;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*0;
BITS_3_70_68_Pr = Pr;
BITS_1_71_71_bval = Pr@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "lea_lo_noimm__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOOnly("LO"):hilo
Register:Rd
','Predicate("PT"):Pu
',' [-] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] Register:Rb {/REUSE("noreuse"):reuse_src_b}
','UImm(5)*:scaleU5
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Ra@negate==1))) -> (((Rb@negate==0))) :
 "Invalid instruction combination ( rule name: nA-Rb)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Rb@negate==1))) -> (((Ra@negate==0))) :
 "Invalid instruction combination ( rule name: Ra-nB)"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LEA_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        LEAint_pipe =  0b1000010001;
        LEA =  0b1000010001;

ENCODING
!lea_lo_noimm__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=*hilo;
BITS_1_74_74_tnspB=0;
BITS_1_73_73_sz=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@negate;
BITS_8_39_32_Rb=Rb;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_8_71_64_Rc=*255;
BITS_5_79_75_scaleU5=scaleU5;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



CLASS "lea_lo_noimm__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOOnly("LO"):hilo
Register:Rd
','Predicate("PT"):Pu
',' [-] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
','UImm(5)*:scaleU5
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Ra@negate==1))) -> (((Sb@negate==0))) :
 "Invalid instruction combination ( rule name: nA-const)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Sb@negate==1))) -> (((Ra@negate==0))) :
 "Invalid instruction combination ( rule name: Ra-nConst)"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LEA_C_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        LEAint_pipe =  0b101000010001;
        LEA =  0b101000010001;

ENCODING
!lea_lo_noimm__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=*hilo;
BITS_1_74_74_tnspB=0;
BITS_1_73_73_sz=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@negate;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_1_63_63_Sb_negate=Sb@negate;
BITS_8_71_64_Rc=*255;
BITS_5_79_75_scaleU5=scaleU5;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "lea_lo_imm__RuIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOOnly("LO"):hilo
Register:Rd
','Predicate("PT"):Pu
',' [-] Register:Ra {/REUSE("noreuse"):reuse_src_a}
','UImm(32)*:Sb
','UImm(5)*:scaleU5
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LEA_Imm_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        LEAint_pipe =  0b100000010001;
        LEA =  0b100000010001;

ENCODING
!lea_lo_imm__RuIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=*hilo;
BITS_1_74_74_tnspB=0;
BITS_1_73_73_sz=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@negate;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=*255;
BITS_5_79_75_scaleU5=scaleU5;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "lea_lo_noimm_x__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOOnly("LO"):hilo /XONLY:X
Register:Rd
','Predicate("PT"):Pu
',' [~] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [~] Register:Rb {/REUSE("noreuse"):reuse_src_b}
','UImm(5)*:scaleU5
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Ra@invert==1))) -> (((Rb@invert==0))) :
 "Invalid instruction combination ( rule name: invA-Rb)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Rb@invert==1))) -> (((Ra@invert==0))) :
 "Invalid instruction combination ( rule name: Ra-invB)"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LEA_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        LEAint_pipe =  0b1000010001;
        LEA =  0b1000010001;

ENCODING
!lea_lo_noimm_x__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=*hilo;
BITS_1_74_74_tnspB=*X;
BITS_1_73_73_sz=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@invert;
BITS_8_39_32_Rb=Rb;
BITS_1_63_63_Sb_negate=Rb@invert;
BITS_8_71_64_Rc=*255;
BITS_5_79_75_scaleU5=scaleU5;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



CLASS "lea_lo_noimm_x__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOOnly("LO"):hilo /XONLY:X
Register:Rd
','Predicate("PT"):Pu
',' [~] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [~] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
','UImm(5)*:scaleU5
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Ra@invert==1))) -> (((Sb@invert==0))) :
 "Invalid instruction combination ( rule name: invA-const)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Sb@invert==1))) -> (((Ra@invert==0))) :
 "Invalid instruction combination ( rule name: Ra-invConst)"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LEA_C_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        LEAint_pipe =  0b101000010001;
        LEA =  0b101000010001;

ENCODING
!lea_lo_noimm_x__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=*hilo;
BITS_1_74_74_tnspB=*X;
BITS_1_73_73_sz=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@invert;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_1_63_63_Sb_negate=Sb@invert;
BITS_8_71_64_Rc=*255;
BITS_5_79_75_scaleU5=scaleU5;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "lea_lo_imm_x__RuIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOOnly("LO"):hilo /XONLY:X
Register:Rd
','Predicate("PT"):Pu
',' [~] Register:Ra {/REUSE("noreuse"):reuse_src_a}
','UImm(32)*:Sb
','UImm(5)*:scaleU5
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LEA_Imm_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        LEAint_pipe =  0b100000010001;
        LEA =  0b100000010001;

ENCODING
!lea_lo_imm_x__RuIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=*hilo;
BITS_1_74_74_tnspB=*X;
BITS_1_73_73_sz=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@invert;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=*255;
BITS_5_79_75_scaleU5=scaleU5;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "lea_hi_noimm__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /HIONLY_lea:hilo
Register:Rd
','Predicate("PT"):Pu
',' [-] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] Register:Rb {/REUSE("noreuse"):reuse_src_b}
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
','UImm(5)*:scaleU5
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Ra@negate==1))) -> (((Rb@negate==0))) :
 "Invalid instruction combination ( rule name: nA-Rb)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Rb@negate==1))) -> (((Ra@negate==0))) :
 "Invalid instruction combination ( rule name: Ra-nB)"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LEA_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        LEAint_pipe =  0b1000010001;
        LEA =  0b1000010001;

ENCODING
!lea_hi_noimm__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=*hilo;
BITS_1_74_74_tnspB=0;
BITS_1_73_73_sz=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@negate;
BITS_8_39_32_Rb=Rb;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_8_71_64_Rc=Rc;
BITS_5_79_75_scaleU5=scaleU5;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



CLASS "lea_hi_noimm__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /HIONLY_lea:hilo
Register:Rd
','Predicate("PT"):Pu
',' [-] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
','UImm(5)*:scaleU5
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Ra@negate==1))) -> (((Sb@negate==0))) :
 "Invalid instruction combination ( rule name: nA-const)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Sb@negate==1))) -> (((Ra@negate==0))) :
 "Invalid instruction combination ( rule name: Ra-nConst)"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LEA_C_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        LEAint_pipe =  0b101000010001;
        LEA =  0b101000010001;

ENCODING
!lea_hi_noimm__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=*hilo;
BITS_1_74_74_tnspB=0;
BITS_1_73_73_sz=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@negate;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_1_63_63_Sb_negate=Sb@negate;
BITS_8_71_64_Rc=Rc;
BITS_5_79_75_scaleU5=scaleU5;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "lea_hi_imm__RuIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /HIONLY_lea:hilo
Register:Rd
','Predicate("PT"):Pu
',' [-] Register:Ra {/REUSE("noreuse"):reuse_src_a}
','UImm(32)*:Sb
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
','UImm(5)*:scaleU5
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LEA_Imm_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        LEAint_pipe =  0b100000010001;
        LEA =  0b100000010001;

ENCODING
!lea_hi_imm__RuIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=*hilo;
BITS_1_74_74_tnspB=0;
BITS_1_73_73_sz=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@negate;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=Rc;
BITS_5_79_75_scaleU5=scaleU5;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "lea_hi_imm__RRuI_RRI"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /HIONLY_lea:hilo
Register:Rd
','Predicate("PT"):Pu
',' [-] Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
','UImm(32)*:Sc
','UImm(5)*:scaleU5
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LEA_Rb_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        LEAint_pipe =  0b10000010001;
        LEA =  0b10000010001;

ENCODING
!lea_hi_imm__RRuI_RRI_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=*hilo;
BITS_1_74_74_tnspB=0;
BITS_1_73_73_sz=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@negate;
BITS_8_71_64_Rc=Rb;
BITS_32_63_32_Ra_offset=Sc;
BITS_5_79_75_scaleU5=scaleU5;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



CLASS "lea_hi_noimm_x__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /HIONLY_lea:hilo /XONLY:X
Register:Rd
','Predicate("PT"):Pu
',' [~] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [~] Register:Rb {/REUSE("noreuse"):reuse_src_b}
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
','UImm(5)*:scaleU5
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Ra@invert==1))) -> (((Rb@invert==0))) :
 "Invalid instruction combination ( rule name: invA-Rb)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Rb@invert==1))) -> (((Ra@invert==0))) :
 "Invalid instruction combination ( rule name: Ra-invB)"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LEA_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        LEAint_pipe =  0b1000010001;
        LEA =  0b1000010001;

ENCODING
!lea_hi_noimm_x__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=*hilo;
BITS_1_74_74_tnspB=*X;
BITS_1_73_73_sz=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@invert;
BITS_8_39_32_Rb=Rb;
BITS_1_63_63_Sb_negate=Rb@invert;
BITS_8_71_64_Rc=Rc;
BITS_5_79_75_scaleU5=scaleU5;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



CLASS "lea_hi_noimm_x__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /HIONLY_lea:hilo /XONLY:X
Register:Rd
','Predicate("PT"):Pu
',' [~] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [~] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
','UImm(5)*:scaleU5
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Ra@invert==1))) -> (((Sb@invert==0))) :
 "Invalid instruction combination ( rule name: invA-const)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Sb@invert==1))) -> (((Ra@invert==0))) :
 "Invalid instruction combination ( rule name: Ra-invConst)"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LEA_C_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        LEAint_pipe =  0b101000010001;
        LEA =  0b101000010001;

ENCODING
!lea_hi_noimm_x__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=*hilo;
BITS_1_74_74_tnspB=*X;
BITS_1_73_73_sz=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@invert;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_1_63_63_Sb_negate=Sb@invert;
BITS_8_71_64_Rc=Rc;
BITS_5_79_75_scaleU5=scaleU5;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "lea_hi_imm_x__RuIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /HIONLY_lea:hilo /XONLY:X
Register:Rd
','Predicate("PT"):Pu
',' [~] Register:Ra {/REUSE("noreuse"):reuse_src_a}
','UImm(32)*:Sb
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
','UImm(5)*:scaleU5
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LEA_Imm_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        LEAint_pipe =  0b100000010001;
        LEA =  0b100000010001;

ENCODING
!lea_hi_imm_x__RuIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=*hilo;
BITS_1_74_74_tnspB=*X;
BITS_1_73_73_sz=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@invert;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=Rc;
BITS_5_79_75_scaleU5=scaleU5;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "lea_hi_imm_x__RRuI_RRI"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /HIONLY_lea:hilo /XONLY:X
Register:Rd
','Predicate("PT"):Pu
',' [~] Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
','UImm(32)*:Sc
','UImm(5)*:scaleU5
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LEA_Rb_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        LEAint_pipe =  0b10000010001;
        LEA =  0b10000010001;

ENCODING
!lea_hi_imm_x__RRuI_RRI_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=*hilo;
BITS_1_74_74_tnspB=*X;
BITS_1_73_73_sz=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@invert;
BITS_8_71_64_Rc=Rb;
BITS_32_63_32_Ra_offset=Sc;
BITS_5_79_75_scaleU5=scaleU5;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



CLASS "lea_hi_noimm_sx32__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /HIONLY_lea:hilo /SX32ONLY:sx32
Register:Rd
','Predicate("PT"):Pu
',' [-] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] Register:Rb {/REUSE("noreuse"):reuse_src_b}
','UImm(5)*:scaleU5
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Ra@negate==1))) -> (((Rb@negate==0))) :
 "Invalid instruction combination ( rule name: nA-Rb)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Rb@negate==1))) -> (((Ra@negate==0))) :
 "Invalid instruction combination ( rule name: Ra-nB)"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LEA_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        LEAint_pipe =  0b1000010001;
        LEA =  0b1000010001;

ENCODING
!lea_hi_noimm_sx32__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=*hilo;
BITS_1_74_74_tnspB=0;
BITS_1_73_73_sz=*sx32;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@negate;
BITS_8_39_32_Rb=Rb;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_8_71_64_Rc=*255;
BITS_5_79_75_scaleU5=scaleU5;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



CLASS "lea_hi_noimm_sx32__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /HIONLY_lea:hilo /SX32ONLY:sx32
Register:Rd
','Predicate("PT"):Pu
',' [-] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
','UImm(5)*:scaleU5
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Ra@negate==1))) -> (((Sb@negate==0))) :
 "Invalid instruction combination ( rule name: nA-const)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Sb@negate==1))) -> (((Ra@negate==0))) :
 "Invalid instruction combination ( rule name: Ra-nConst)"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LEA_C_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        LEAint_pipe =  0b101000010001;
        LEA =  0b101000010001;

ENCODING
!lea_hi_noimm_sx32__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=*hilo;
BITS_1_74_74_tnspB=0;
BITS_1_73_73_sz=*sx32;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@negate;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_1_63_63_Sb_negate=Sb@negate;
BITS_8_71_64_Rc=*255;
BITS_5_79_75_scaleU5=scaleU5;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "lea_hi_imm_sx32__RuIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /HIONLY_lea:hilo /SX32ONLY:sx32
Register:Rd
','Predicate("PT"):Pu
',' [-] Register:Ra {/REUSE("noreuse"):reuse_src_a}
','UImm(32)*:Sb
','UImm(5)*:scaleU5
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LEA_Imm_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        LEAint_pipe =  0b100000010001;
        LEA =  0b100000010001;

ENCODING
!lea_hi_imm_sx32__RuIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=*hilo;
BITS_1_74_74_tnspB=0;
BITS_1_73_73_sz=*sx32;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@negate;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=*255;
BITS_5_79_75_scaleU5=scaleU5;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "lea_hi_noimm_sx32_x__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /HIONLY_lea:hilo /XONLY:X /SX32ONLY:sx32
Register:Rd
','Predicate("PT"):Pu
',' [~] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [~] Register:Rb {/REUSE("noreuse"):reuse_src_b}
','UImm(5)*:scaleU5
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Ra@invert==1))) -> (((Rb@invert==0))) :
 "Invalid instruction combination ( rule name: invA-Rb)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Rb@invert==1))) -> (((Ra@invert==0))) :
 "Invalid instruction combination ( rule name: Ra-invB)"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LEA_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        LEAint_pipe =  0b1000010001;
        LEA =  0b1000010001;

ENCODING
!lea_hi_noimm_sx32_x__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=*hilo;
BITS_1_74_74_tnspB=*X;
BITS_1_73_73_sz=*sx32;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@invert;
BITS_8_39_32_Rb=Rb;
BITS_1_63_63_Sb_negate=Rb@invert;
BITS_8_71_64_Rc=*255;
BITS_5_79_75_scaleU5=scaleU5;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



CLASS "lea_hi_noimm_sx32_x__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /HIONLY_lea:hilo /XONLY:X /SX32ONLY:sx32
Register:Rd
','Predicate("PT"):Pu
',' [~] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [~] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
','UImm(5)*:scaleU5
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Ra@invert==1))) -> (((Sb@invert==0))) :
 "Invalid instruction combination ( rule name: invA-const)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Sb@invert==1))) -> (((Ra@invert==0))) :
 "Invalid instruction combination ( rule name: Ra-invConst)"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LEA_C_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        LEAint_pipe =  0b101000010001;
        LEA =  0b101000010001;

ENCODING
!lea_hi_noimm_sx32_x__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=*hilo;
BITS_1_74_74_tnspB=*X;
BITS_1_73_73_sz=*sx32;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@invert;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_1_63_63_Sb_negate=Sb@invert;
BITS_8_71_64_Rc=*255;
BITS_5_79_75_scaleU5=scaleU5;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "lea_hi_imm_sx32_x__RuIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /HIONLY_lea:hilo /XONLY:X /SX32ONLY:sx32
Register:Rd
','Predicate("PT"):Pu
',' [~] Register:Ra {/REUSE("noreuse"):reuse_src_a}
','UImm(32)*:Sb
','UImm(5)*:scaleU5
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LEA_Imm_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        LEAint_pipe =  0b100000010001;
        LEA =  0b100000010001;

ENCODING
!lea_hi_imm_sx32_x__RuIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=*hilo;
BITS_1_74_74_tnspB=*X;
BITS_1_73_73_sz=*sx32;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@invert;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=*255;
BITS_5_79_75_scaleU5=scaleU5;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



ALTERNATE CLASS "iscadd_noimm__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
Register:Rd
','Predicate("PT"):Pu
',' [-] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] Register:Rb {/REUSE("noreuse"):reuse_src_b}
','UImm(5)*:scaleU5
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Ra@negate==1))) -> (((Rb@negate==0))) :
 "Invalid instruction combination ( rule name: nA-Rb)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Rb@negate==1))) -> (((Ra@negate==0))) :
 "Invalid instruction combination ( rule name: Ra-nB)"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LEA_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        ISCADDint_pipe =  0b1000010001;
        ISCADD =  0b1000010001;

ENCODING
!iscadd_noimm__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=*0;
BITS_1_74_74_tnspB=*0;
BITS_1_73_73_sz=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@negate;
BITS_8_39_32_Rb=Rb;
BITS_1_63_63_Sb_negate=Rb@negate;
BITS_8_71_64_Rc=*255;
BITS_5_79_75_scaleU5=scaleU5;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



ALTERNATE CLASS "iscadd_noimm__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
Register:Rd
','Predicate("PT"):Pu
',' [-] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [-] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
','UImm(5)*:scaleU5
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Ra@negate==1))) -> (((Sb@negate==0))) :
 "Invalid instruction combination ( rule name: nA-const)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((Sb@negate==1))) -> (((Ra@negate==0))) :
 "Invalid instruction combination ( rule name: Ra-nConst)"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LEA_C_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        ISCADDint_pipe =  0b101000010001;
        ISCADD =  0b101000010001;

ENCODING
!iscadd_noimm__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=*0;
BITS_1_74_74_tnspB=*0;
BITS_1_73_73_sz=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@negate;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_1_63_63_Sb_negate=Sb@negate;
BITS_8_71_64_Rc=*255;
BITS_5_79_75_scaleU5=scaleU5;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



ALTERNATE CLASS "iscadd_imm__RIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
Register:Rd
','Predicate("PT"):Pu
',' [-] Register:Ra {/REUSE("noreuse"):reuse_src_a}
','SImm(32)*:Sb
','UImm(5)*:scaleU5
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LEA_Imm_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        ISCADDint_pipe =  0b100000010001;
        ISCADD =  0b100000010001;

ENCODING
!iscadd_imm__RIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=*0;
BITS_1_74_74_tnspB=*0;
BITS_1_73_73_sz=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@negate;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=*255;
BITS_5_79_75_scaleU5=scaleU5;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



ALTERNATE CLASS "iscadd32i__RIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
Register:Rd
','Predicate("PT"):Pu
',' [-] Register:Ra {/REUSE("noreuse"):reuse_src_a}
','SImm(32)*:Sb
','UImm(5)*:scaleU5
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LEA_Imm_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        ISCADD32Iint_pipe =  0b100000010001;
        ISCADD32I =  0b100000010001;

ENCODING
!iscadd32i__RIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=*0;
BITS_1_74_74_tnspB=*0;
BITS_1_73_73_sz=0;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_1_72_72_e=Ra@negate;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=*255;
BITS_5_79_75_scaleU5=scaleU5;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "lop3_lut__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LUTOnly:lut /LOP_POP("POR"):pop
Predicate("PT"):Pu
','Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
','UImm(8)*:imm8
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LOP3_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        LOP3int_pipe =  0b1000010010;
        LOP3 =  0b1000010010;

ENCODING
!lop3_lut__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=pop;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_8_79_72_imm8=imm8;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



CLASS "lop3_lut__RuIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LUTOnly:lut /LOP_POP("POR"):pop
Predicate("PT"):Pu
','Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','UImm(32)*:Sb
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
','UImm(8)*:imm8
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LOP3_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        LOP3int_pipe =  0b100000010010;
        LOP3 =  0b100000010010;

ENCODING
!lop3_lut__RuIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=pop;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=Rc;
BITS_8_79_72_imm8=imm8;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "lop3_lut__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LUTOnly:lut /LOP_POP("POR"):pop
Predicate("PT"):Pu
','Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
','UImm(8)*:imm8
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LOP3_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        LOP3int_pipe =  0b101000010010;
        LOP3 =  0b101000010010;

ENCODING
!lop3_lut__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=pop;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_8_71_64_Rc=Rc;
BITS_8_79_72_imm8=imm8;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



ALTERNATE CLASS "lop3_lut_optionalPp__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LUTOnly:lut /LOP_POP("POR"):pop
Predicate("PT"):Pu
','Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
','UImm(8)*:imm8
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LOP3_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        LOP3int_pipe =  0b1000010010;
        LOP3 =  0b1000010010;

ENCODING
!lop3_lut_optionalPp__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=pop;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_8_79_72_imm8=imm8;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



ALTERNATE CLASS "lop3_lut_optionalPp__RuIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LUTOnly:lut /LOP_POP("POR"):pop
Predicate("PT"):Pu
','Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','UImm(32)*:Sb
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
','UImm(8)*:imm8
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LOP3_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        LOP3int_pipe =  0b100000010010;
        LOP3 =  0b100000010010;

ENCODING
!lop3_lut_optionalPp__RuIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=pop;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=Rc;
BITS_8_79_72_imm8=imm8;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



ALTERNATE CLASS "lop3_lut_optionalPp__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LUTOnly:lut /LOP_POP("POR"):pop
Predicate("PT"):Pu
','Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
','UImm(8)*:imm8
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LOP3_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        LOP3int_pipe =  0b101000010010;
        LOP3 =  0b101000010010;

ENCODING
!lop3_lut_optionalPp__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=pop;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_8_71_64_Rc=Rc;
BITS_8_79_72_imm8=imm8;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



ALTERNATE CLASS "lop3_noimm__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOP:lop /LOP_POP("POR"):pop
Predicate("PT"):Pu
','Register:Rd
',' [~] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [~] Register:Rb {/REUSE("noreuse"):reuse_src_b}
',' [~] Register:Rc {/REUSE("noreuse"):reuse_src_c}
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_op_0(lop,Ra@invert,Rb@invert,Rc@invert) :
 "Invalid combination of lop, Ra@invert, Rb@invert, Rc@invert"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LOP3_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        LOP3int_pipe =  0b1000010010;
        LOP3 =  0b1000010010;

ENCODING
!lop3_noimm__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=pop;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);
BITS_8_79_72_imm8=TABLES_op_0(lop,Ra@invert,Rb@invert,Rc@invert);



ALTERNATE CLASS "lop3_noimm__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOP:lop /LOP_POP("POR"):pop
Predicate("PT"):Pu
','Register:Rd
',' [~] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [~] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
',' [~] Register:Rc {/REUSE("noreuse"):reuse_src_c}
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_op_0(lop,Ra@invert,Sb@invert,Rc@invert) :
 "Invalid combination of lop, Ra@invert, Sb@invert, Rc@invert"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LOP3_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        LOP3int_pipe =  0b101000010010;
        LOP3 =  0b101000010010;

ENCODING
!lop3_noimm__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=pop;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_8_71_64_Rc=Rc;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);
BITS_8_79_72_imm8=TABLES_op_0(lop,Ra@invert,Sb@invert,Rc@invert);



ALTERNATE CLASS "lop3_noimm_optionalPp__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOP:lop /LOP_POP("POR"):pop
Predicate("PT"):Pu
','Register:Rd
',' [~] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [~] Register:Rb {/REUSE("noreuse"):reuse_src_b}
',' [~] Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_op_0(lop,Ra@invert,Rb@invert,Rc@invert) :
 "Invalid combination of lop, Ra@invert, Rb@invert, Rc@invert"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LOP3_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        LOP3int_pipe =  0b1000010010;
        LOP3 =  0b1000010010;

ENCODING
!lop3_noimm_optionalPp__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=pop;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);
BITS_8_79_72_imm8=TABLES_op_0(lop,Ra@invert,Rb@invert,Rc@invert);



ALTERNATE CLASS "lop3_noimm_optionalPp__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOP:lop /LOP_POP("POR"):pop
Predicate("PT"):Pu
','Register:Rd
',' [~] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [~] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
',' [~] Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_op_0(lop,Ra@invert,Sb@invert,Rc@invert) :
 "Invalid combination of lop, Ra@invert, Sb@invert, Rc@invert"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LOP3_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        LOP3int_pipe =  0b101000010010;
        LOP3 =  0b101000010010;

ENCODING
!lop3_noimm_optionalPp__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=pop;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_8_71_64_Rc=Rc;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);
BITS_8_79_72_imm8=TABLES_op_0(lop,Ra@invert,Sb@invert,Rc@invert);



ALTERNATE CLASS "lop3_imm__RIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOP:lop /LOP_POP("POR"):pop
Predicate("PT"):Pu
','Register:Rd
',' [~] Register:Ra {/REUSE("noreuse"):reuse_src_a}
','UImm(32)*:Sb
',' [~] Register:Rc {/REUSE("noreuse"):reuse_src_c}
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_op_1(lop,Ra@invert,Rc@invert) :
 "Invalid combination of lop, Ra@invert, Rc@invert"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LOP3_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        LOP3int_pipe =  0b100000010010;
        LOP3 =  0b100000010010;

ENCODING
!lop3_imm__RIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=pop;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=Rc;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);
BITS_8_79_72_imm8=TABLES_op_1(lop,Ra@invert,Rc@invert);



ALTERNATE CLASS "lop3_imm_optionalPp__RIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOP:lop /LOP_POP("POR"):pop
Predicate("PT"):Pu
','Register:Rd
',' [~] Register:Ra {/REUSE("noreuse"):reuse_src_a}
','UImm(32)*:Sb
',' [~] Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_op_1(lop,Ra@invert,Rc@invert) :
 "Invalid combination of lop, Ra@invert, Rc@invert"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LOP3_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        LOP3int_pipe =  0b100000010010;
        LOP3 =  0b100000010010;

ENCODING
!lop3_imm_optionalPp__RIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=pop;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=Rc;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);
BITS_8_79_72_imm8=TABLES_op_1(lop,Ra@invert,Rc@invert);



ALTERNATE CLASS "lop_noimm__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOP:lop /LOP_POP("POR"):pop
Predicate("PT"):Pu
','Register:Rd
',' [~] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [~] Register:Rb {/REUSE("noreuse"):reuse_src_b}
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_op_2(lop,Ra@invert,Rb@invert) :
 "Invalid combination of lop, Ra@invert, Rb@invert"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LOP3_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        LOPint_pipe =  0b1000010010;
        LOP =  0b1000010010;

ENCODING
!lop_noimm__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=pop;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=*255;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);
BITS_8_79_72_imm8=TABLES_op_2(lop,Ra@invert,Rb@invert);



ALTERNATE CLASS "lop_noimm__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOP:lop /LOP_POP("POR"):pop
Predicate("PT"):Pu
','Register:Rd
',' [~] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [~] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_op_2(lop,Ra@invert,Sb@invert) :
 "Invalid combination of lop, Ra@invert, Sb@invert"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LOP3_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        LOPint_pipe =  0b101000010010;
        LOP =  0b101000010010;

ENCODING
!lop_noimm__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=pop;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_8_71_64_Rc=*255;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);
BITS_8_79_72_imm8=TABLES_op_2(lop,Ra@invert,Sb@invert);



ALTERNATE CLASS "lop_noimm_optionalPp__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOP:lop /LOP_POP("POR"):pop
Predicate("PT"):Pu
','Register:Rd
',' [~] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [~] Register:Rb {/REUSE("noreuse"):reuse_src_b}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_op_2(lop,Ra@invert,Rb@invert) :
 "Invalid combination of lop, Ra@invert, Rb@invert"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LOP3_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        LOPint_pipe =  0b1000010010;
        LOP =  0b1000010010;

ENCODING
!lop_noimm_optionalPp__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=pop;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=*255;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);
BITS_8_79_72_imm8=TABLES_op_2(lop,Ra@invert,Rb@invert);



ALTERNATE CLASS "lop_noimm_optionalPp__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOP:lop /LOP_POP("POR"):pop
Predicate("PT"):Pu
','Register:Rd
',' [~] Register:Ra {/REUSE("noreuse"):reuse_src_a}
',' [~] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_op_2(lop,Ra@invert,Sb@invert) :
 "Invalid combination of lop, Ra@invert, Sb@invert"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LOP3_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        LOPint_pipe =  0b101000010010;
        LOP =  0b101000010010;

ENCODING
!lop_noimm_optionalPp__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=pop;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_8_71_64_Rc=*255;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);
BITS_8_79_72_imm8=TABLES_op_2(lop,Ra@invert,Sb@invert);



ALTERNATE CLASS "lop_imm_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOP:lop /LOP_POP("POR"):pop
Predicate("PT"):Pu
','Register:Rd
',' [~] Register:Ra {/REUSE("noreuse"):reuse_src_a}
','UImm(32)*:Sb
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_op_3(lop,Ra@invert) :
 "Invalid combination of lop, Ra@invert"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LOP3_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        LOPint_pipe =  0b100000010010;
        LOP =  0b100000010010;

ENCODING
!lop_imm__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=pop;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=*255;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);
BITS_8_79_72_imm8=TABLES_op_3(lop,Ra@invert);



ALTERNATE CLASS "lop_imm_optionalPp_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOP:lop /LOP_POP("POR"):pop
Predicate("PT"):Pu
','Register:Rd
',' [~] Register:Ra {/REUSE("noreuse"):reuse_src_a}
','UImm(32)*:Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_op_3(lop,Ra@invert) :
 "Invalid combination of lop, Ra@invert"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LOP3_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        LOPint_pipe =  0b100000010010;
        LOP =  0b100000010010;

ENCODING
!lop_imm_optionalPp__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=pop;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=*255;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);
BITS_8_79_72_imm8=TABLES_op_3(lop,Ra@invert);



ALTERNATE CLASS "lop32i_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOP:lop /LOP_POP("POR"):pop
Predicate("PT"):Pu
','Register:Rd
',' [~] Register:Ra {/REUSE("noreuse"):reuse_src_a}
','UImm(32)*:Sb
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_op_3(lop,Ra@invert) :
 "Invalid combination of lop, Ra@invert"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LOP3_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        LOP32Iint_pipe =  0b100000010010;
        LOP32I =  0b100000010010;

ENCODING
!lop32i__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=pop;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=*255;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);
BITS_8_79_72_imm8=TABLES_op_3(lop,Ra@invert);



ALTERNATE CLASS "lop32i_optionalPp_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LOP:lop /LOP_POP("POR"):pop
Predicate("PT"):Pu
','Register:Rd
',' [~] Register:Ra {/REUSE("noreuse"):reuse_src_a}
','UImm(32)*:Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_op_3(lop,Ra@invert) :
 "Invalid combination of lop, Ra@invert"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@LOP3_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        LOP32Iint_pipe =  0b100000010010;
        LOP32I =  0b100000010010;

ENCODING
!lop32i_optionalPp__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=pop;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=*255;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*1;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);
BITS_8_79_72_imm8=TABLES_op_3(lop,Ra@invert);



CLASS "plop3_lut_2out_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LUTOnly:lut
Predicate:Pu
','Predicate:Pv
',' [!]Predicate:Pp
',' [!]Predicate:Pq
',' [!]Predicate:Pr
','UImm(8)*:uimm8
','UImm(8)*:vimm8
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_1(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@PLOP3_0 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;

OPCODES
        PLOP3int_pipe =  0b100000011100;
        PLOP3 =  0b100000011100;

ENCODING
!plop3_lut_2out__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=Pv;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_3_79_77_Pq = Pq;
BITS_1_80_80_ftz = Pq@not;
BITS_3_70_68_Pr = Pr;
BITS_1_71_71_bval = Pr@not;
BITS_8_76_72_66_64_uimm8=uimm8;
BITS_8_23_16_Rd=vimm8;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_1(batch_t,usched_info);



ALTERNATE CLASS "plop3_lut_1out_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LUTOnly:lut
Predicate:Pu
',' [!]Predicate:Pp
',' [!]Predicate:Pq
',' [!]Predicate:Pr
','UImm(8)*:uimm8
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_1(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@PLOP3_0 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;

OPCODES
        PLOP3int_pipe =  0b100000011100;
        PLOP3 =  0b100000011100;

ENCODING
!plop3_lut_1out__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=*7;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_3_79_77_Pq = Pq;
BITS_1_80_80_ftz = Pq@not;
BITS_3_70_68_Pr = Pr;
BITS_1_71_71_bval = Pr@not;
BITS_8_76_72_66_64_uimm8=uimm8;
BITS_8_23_16_Rd=*0;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_1(batch_t,usched_info);



ALTERNATE CLASS "plop3_1out_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /PLOP_OP_NOREG:lop
Predicate:Pu
',' [!]Predicate:Pp
',' [!]Predicate:Pq
',' [!]Predicate:Pr
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_1(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@PLOP3_0 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;

OPCODES
        PLOP3int_pipe =  0b100000011100;
        PLOP3 =  0b100000011100;

ENCODING
!plop3_1out__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_16_76_72_66_64_23_16_lop=lop;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=*7;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_3_79_77_Pq = Pq;
BITS_1_80_80_ftz = Pq@not;
BITS_3_70_68_Pr = Pr;
BITS_1_71_71_bval = Pr@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_1(batch_t,usched_info);



CLASS "plop3_lut_2out_1reg__RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LUTOnly:lut
Predicate:Pu
','Predicate:Pv
',' [!]Predicate:Pp
','Register:Rb {/REUSE("noreuse"):reuse_src_b} /SIGNONLY:sign_b
',' [!]Predicate:Pr
','UImm(8)*:uimm8
','UImm(8)*:vimm8
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_2(batch_t,usched_info,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@PLOP3_1_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;

OPCODES
        PLOP3int_pipe =  0b1000011101;
        PLOP3 =  0b1000011101;

ENCODING
!plop3_lut_2out_1reg__RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=Pv;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_8_39_32_Rb=Rb;
BITS_3_70_68_Pr = Pr;
BITS_1_71_71_bval = Pr@not;
BITS_8_79_72_imm8=uimm8;
BITS_8_23_16_Rd=vimm8;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_2(batch_t,usched_info,reuse_src_b);



CLASS "plop3_lut_2out_1reg__RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LUTOnly:lut
Predicate:Pu
','Predicate:Pv
',' [!]Predicate:Pp
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr] /SIGNONLY:sign
',' [!]Predicate:Pr
','UImm(8)*:uimm8
','UImm(8)*:vimm8
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_1(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@PLOP3_1_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;

OPCODES
        PLOP3int_pipe =  0b101000011101;
        PLOP3 =  0b101000011101;

ENCODING
!plop3_lut_2out_1reg__RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=Pv;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_3_70_68_Pr = Pr;
BITS_1_71_71_bval = Pr@not;
BITS_8_79_72_imm8=uimm8;
BITS_8_23_16_Rd=vimm8;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_1(batch_t,usched_info);



ALTERNATE CLASS "plop3_lut_1out_1reg__RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LUTOnly:lut
Predicate:Pu
',' [!]Predicate:Pp
','Register:Rb {/REUSE("noreuse"):reuse_src_b} /SIGNONLY:sign_b
',' [!]Predicate:Pr
','UImm(8)*:uimm8
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_2(batch_t,usched_info,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@PLOP3_1_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;

OPCODES
        PLOP3int_pipe =  0b1000011101;
        PLOP3 =  0b1000011101;

ENCODING
!plop3_lut_1out_1reg__RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=*7;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_8_39_32_Rb=Rb;
BITS_3_70_68_Pr = Pr;
BITS_1_71_71_bval = Pr@not;
BITS_8_79_72_imm8=uimm8;
BITS_8_23_16_Rd=*0;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_2(batch_t,usched_info,reuse_src_b);



ALTERNATE CLASS "plop3_lut_1out_1reg__RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LUTOnly:lut
Predicate:Pu
',' [!]Predicate:Pp
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr] /SIGNONLY:sign
',' [!]Predicate:Pr
','UImm(8)*:uimm8
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_1(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@PLOP3_1_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;

OPCODES
        PLOP3int_pipe =  0b101000011101;
        PLOP3 =  0b101000011101;

ENCODING
!plop3_lut_1out_1reg__RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=*7;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_3_70_68_Pr = Pr;
BITS_1_71_71_bval = Pr@not;
BITS_8_79_72_imm8=uimm8;
BITS_8_23_16_Rd=*0;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_1(batch_t,usched_info);



CLASS "plop3_lut_2out_2reg__RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LUTOnly:lut
Predicate:Pu
','Predicate:Pv
',' [!]Predicate:Pp
','Register:Rb {/REUSE("noreuse"):reuse_src_b} /SIGNONLY:sign_b
','Register:Rc {/REUSE("noreuse"):reuse_src_c} /SIGNONLY:sign_c
','UImm(8)*:uimm8
','UImm(8)*:vimm8
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_7(batch_t,usched_info,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@PLOP3_2_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 0;

OPCODES
        PLOP3int_pipe =  0b1000011110;
        PLOP3 =  0b1000011110;

ENCODING
!plop3_lut_2out_2reg__RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=Pv;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_8_79_72_imm8=uimm8;
BITS_8_23_16_Rd=vimm8;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_7(batch_t,usched_info,reuse_src_b,reuse_src_c);



CLASS "plop3_lut_2out_2reg__RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LUTOnly:lut
Predicate:Pu
','Predicate:Pv
',' [!]Predicate:Pp
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr] /SIGNONLY:sign
','Register:Rc {/REUSE("noreuse"):reuse_src_c} /SIGNONLY:sign_c
','UImm(8)*:uimm8
','UImm(8)*:vimm8
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_8(batch_t,usched_info,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@PLOP3_2_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 0;

OPCODES
        PLOP3int_pipe =  0b101000011110;
        PLOP3 =  0b101000011110;

ENCODING
!plop3_lut_2out_2reg__RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=Pv;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_8_71_64_Rc=Rc;
BITS_8_79_72_imm8=uimm8;
BITS_8_23_16_Rd=vimm8;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_8(batch_t,usched_info,reuse_src_c);



ALTERNATE CLASS "plop3_lut_1out_2reg__RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LUTOnly:lut
Predicate:Pu
',' [!]Predicate:Pp
','Register:Rb {/REUSE("noreuse"):reuse_src_b} /SIGNONLY:sign_b
','Register:Rc {/REUSE("noreuse"):reuse_src_c} /SIGNONLY:sign_c
','UImm(8)*:uimm8
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_7(batch_t,usched_info,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@PLOP3_2_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 0;

OPCODES
        PLOP3int_pipe =  0b1000011110;
        PLOP3 =  0b1000011110;

ENCODING
!plop3_lut_1out_2reg__RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=*7;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_8_79_72_imm8=uimm8;
BITS_8_23_16_Rd=*0;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_7(batch_t,usched_info,reuse_src_b,reuse_src_c);



ALTERNATE CLASS "plop3_lut_1out_2reg__RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LUTOnly:lut
Predicate:Pu
',' [!]Predicate:Pp
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr] /SIGNONLY:sign
','Register:Rc {/REUSE("noreuse"):reuse_src_c} /SIGNONLY:sign_c
','UImm(8)*:uimm8
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_8(batch_t,usched_info,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@PLOP3_2_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 0;

OPCODES
        PLOP3int_pipe =  0b101000011110;
        PLOP3 =  0b101000011110;

ENCODING
!plop3_lut_1out_2reg__RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=*7;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_8_71_64_Rc=Rc;
BITS_8_79_72_imm8=uimm8;
BITS_8_23_16_Rd=*0;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_8(batch_t,usched_info,reuse_src_c);



CLASS "plop3_lut_2out_3reg__RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LUTOnly:lut
Predicate:Pu
','Predicate:Pv
','Register:Ra {/REUSE("noreuse"):reuse_src_a} /SIGNONLY:sign_a
','Register:Rb {/REUSE("noreuse"):reuse_src_b} /SIGNONLY:sign_b
','Register:Rc {/REUSE("noreuse"):reuse_src_c} /SIGNONLY:sign_c
','UImm(8)*:uimm8
','UImm(8)*:vimm8
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@PLOP3_3_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        PLOP3int_pipe =  0b1000011111;
        PLOP3 =  0b1000011111;

ENCODING
!plop3_lut_2out_3reg__RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=Pv;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_8_79_72_imm8=uimm8;
BITS_8_23_16_Rd=vimm8;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



CLASS "plop3_lut_2out_3reg__RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LUTOnly:lut
Predicate:Pu
','Predicate:Pv
','Register:Ra {/REUSE("noreuse"):reuse_src_a} /SIGNONLY:sign_a
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr] /SIGNONLY:sign
','Register:Rc {/REUSE("noreuse"):reuse_src_c} /SIGNONLY:sign_c
','UImm(8)*:uimm8
','UImm(8)*:vimm8
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@PLOP3_3_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        PLOP3int_pipe =  0b101000011111;
        PLOP3 =  0b101000011111;

ENCODING
!plop3_lut_2out_3reg__RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=Pv;
BITS_8_31_24_Ra=Ra;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_8_71_64_Rc=Rc;
BITS_8_79_72_imm8=uimm8;
BITS_8_23_16_Rd=vimm8;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



ALTERNATE CLASS "plop3_lut_1out_3reg__RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LUTOnly:lut
Predicate:Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a} /SIGNONLY:sign_a
','Register:Rb {/REUSE("noreuse"):reuse_src_b} /SIGNONLY:sign_b
','Register:Rc {/REUSE("noreuse"):reuse_src_c} /SIGNONLY:sign_c
','UImm(8)*:uimm8
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@PLOP3_3_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        PLOP3int_pipe =  0b1000011111;
        PLOP3 =  0b1000011111;

ENCODING
!plop3_lut_1out_3reg__RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=*7;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_8_79_72_imm8=uimm8;
BITS_8_23_16_Rd=*0;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



ALTERNATE CLASS "plop3_lut_1out_3reg__RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LUTOnly:lut
Predicate:Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a} /SIGNONLY:sign_a
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr] /SIGNONLY:sign
','Register:Rc {/REUSE("noreuse"):reuse_src_c} /SIGNONLY:sign_c
','UImm(8)*:uimm8
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@PLOP3_3_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        PLOP3int_pipe =  0b101000011111;
        PLOP3 =  0b101000011111;

ENCODING
!plop3_lut_1out_3reg__RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=*7;
BITS_8_31_24_Ra=Ra;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_8_71_64_Rc=Rc;
BITS_8_79_72_imm8=uimm8;
BITS_8_23_16_Rd=*0;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



ALTERNATE CLASS "psetp_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /Bop:bop0 /Bop:bop1
Predicate:Pu
','Predicate:Pv
',' [!]Predicate:Pp
',' [!]Predicate:Pq
',' [!]Predicate:Pr
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_1(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_op_4(bop0,bop1,Pp@not,Pq@not,Pr@not) :
 "Invalid combination of bop0, bop1, Pp@not, Pq@not, Pr@not"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@PLOP3_0 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;

OPCODES
        PSETPint_pipe =  0b100000011100;
        PSETP =  0b100000011100;

ENCODING
!psetp__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=Pv;
BITS_3_89_87_Pp = Pp;
BITS_3_79_77_Pq = Pq;
BITS_3_70_68_Pr = Pr;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_1(batch_t,usched_info);
BITS_16_76_72_66_64_23_16_lop=TABLES_op_4(bop0,bop1,Pp@not,Pq@not,Pr@not);



ALTERNATE CLASS "psetp_simple_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /Bop:bop0
Predicate:Pu
',' [!]Predicate:Pp
',' [!]Predicate:Pq
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_1(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_op_5(bop0,Pp@not,Pq@not) :
 "Invalid combination of bop0, Pp@not, Pq@not"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@PLOP3_0 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;

OPCODES
        PSETPint_pipe =  0b100000011100;
        PSETP =  0b100000011100;

ENCODING
!psetp_simple__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_83_81_Pu=Pu;
BITS_3_86_84_cop=*7;
BITS_3_89_87_Pp = Pp;
BITS_3_79_77_Pq = Pq;
BITS_3_70_68_Pr =* 7;
BITS_1_71_71_bval =*0;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_1(batch_t,usched_info);
BITS_16_76_72_66_64_23_16_lop=TABLES_op_5(bop0,Pp@not,Pq@not);



CLASS "mov__RRR_RR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
Register:Rd
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
','UImm(4/0xf)*:PixMaskU04
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_2(batch_t,usched_info,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@MOV_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;

OPCODES
        MOVint_pipe =  0b1000000010;
        MOV =  0b1000000010;

ENCODING
!mov__RRR_RR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_8_23_16_Rd=Rd;
BITS_8_39_32_Rb=Rb;
BITS_4_75_72_PixMaskU04=PixMaskU04;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_2(batch_t,usched_info,reuse_src_b);



CLASS "mov__RuIR_RI"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
Register:Rd
','UImm(32)*:Sb
','UImm(4/0xf)*:PixMaskU04
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_1(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@MOV_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;

OPCODES
        MOVint_pipe =  0b100000000010;
        MOV =  0b100000000010;

ENCODING
!mov__RuIR_RI_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_8_23_16_Rd=Rd;
BITS_32_63_32_Ra_offset=Sb;
BITS_4_75_72_PixMaskU04=PixMaskU04;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_1(batch_t,usched_info);



CLASS "mov__RCR_RC"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
Register:Rd
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
','UImm(4/0xf)*:PixMaskU04
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_1(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@MOV_c ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;

OPCODES
        MOVint_pipe =  0b101000000010;
        MOV =  0b101000000010;

ENCODING
!mov__RCR_RC_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_8_23_16_Rd=Rd;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_4_75_72_PixMaskU04=PixMaskU04;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_1(batch_t,usched_info);



ALTERNATE CLASS "mov32i_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
Register:Rd
','UImm(32)*:Sb
','UImm(4/0xf)*:PixMaskU04
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_1(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@MOV_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;

OPCODES
        MOV32Iint_pipe =  0b100000000010;
        MOV32I =  0b100000000010;

ENCODING
!mov32i__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_8_23_16_Rd=Rd;
BITS_32_63_32_Ra_offset=Sb;
BITS_4_75_72_PixMaskU04=PixMaskU04;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_1(batch_t,usched_info);



CLASS "p2r__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /B3B0("B0"):insert
Register:Rd
','PR:Pr
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@P2R_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        P2Rint_pipe =  0b1000000011;
        P2R =  0b1000000011;

ENCODING
!p2r__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_77_76_msi=insert;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



CLASS "p2r__RsIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /B3B0("B0"):insert
Register:Rd
','PR:Pr
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','SImm(32)*:Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@P2R_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        P2Rint_pipe =  0b100000000011;
        P2R =  0b100000000011;

ENCODING
!p2r__RsIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_77_76_msi=insert;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_32_63_32_Ra_offset=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "p2r__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /B3B0("B0"):insert
Register:Rd
','PR:Pr
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@P2R_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        P2Rint_pipe =  0b101000000011;
        P2R =  0b101000000011;

ENCODING
!p2r__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_77_76_msi=insert;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



ALTERNATE CLASS "p2r_simple_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /B3B0("B0"):insert
Register:Rd
','PR:Pr
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_1(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;

OPCODES
        P2Rint_pipe =  0b100000000011;
        P2R =  0b100000000011;

ENCODING
!p2r_simple__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_77_76_msi=insert;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*255;
BITS_32_63_32_Ra_offset=*255;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_1(batch_t,usched_info);



CLASS "popc__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
Register:Rd
',' [~] Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@POPC_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_MUFU ;

OPCODES
        POPCmio_pipe =  0b1100001001;
        POPC =  0b1100001001;

ENCODING
!popc__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_8_23_16_Rd=Rd;
BITS_8_39_32_Rb=Rb;
BITS_1_63_63_Sb_negate=Rb@invert;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "popc__RuIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
Register:Rd
','UImm(32)*:Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@POPC_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_MUFU ;

OPCODES
        POPCmio_pipe =  0b100100001001;
        POPC =  0b100100001001;

ENCODING
!popc__RuIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_8_23_16_Rd=Rd;
BITS_32_63_32_Ra_offset=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "popc__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
Register:Rd
',' [~] C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@POPC_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_MUFU ;

OPCODES
        POPCmio_pipe =  0b101100001001;
        POPC =  0b101100001001;

ENCODING
!popc__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_8_23_16_Rd=Rd;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_1_63_63_Sb_negate=Sb@invert;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "prmt__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /PMode("IDX"):pmode
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((pmode !=`PMode@INVALID7)) :
 "Invalid pmode field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@PRMT_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        PRMTint_pipe =  0b1000010110;
        PRMT =  0b1000010110;

ENCODING
!prmt__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_74_72_pmode=pmode;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



CLASS "prmt__RuIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /PMode("IDX"):pmode
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','UImm(32)*:Sb
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((pmode !=`PMode@INVALID7)) :
 "Invalid pmode field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@PRMT_Imm_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        PRMTint_pipe =  0b100000010110;
        PRMT =  0b100000010110;

ENCODING
!prmt__RuIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_74_72_pmode=pmode;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "prmt__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /PMode("IDX"):pmode
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((pmode !=`PMode@INVALID7)) :
 "Invalid pmode field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@PRMT_C_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        PRMTint_pipe =  0b101000010110;
        PRMT =  0b101000010110;

ENCODING
!prmt__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_74_72_pmode=pmode;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "prmt__RRuI_RRI"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /PMode("IDX"):pmode
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
','UImm(32)*:Sc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((pmode !=`PMode@INVALID7)) :
 "Invalid pmode field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@PRMT_Rb_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        PRMTint_pipe =  0b10000010110;
        PRMT =  0b10000010110;

ENCODING
!prmt__RRuI_RRI_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_74_72_pmode=pmode;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_71_64_Rc=Rb;
BITS_32_63_32_Ra_offset=Sc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



CLASS "prmt__RRC_RRC"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /PMode("IDX"):pmode
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
','C:Sc[UImm(5/0*):Sc_bank]*   [SImm(17)*:Sc_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((pmode !=`PMode@INVALID7)) :
 "Invalid pmode field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sc_bank <= 17) || (Sc_bank >= 24 && Sc_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sc_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@PRMT_Rb_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc_bank))+(1<<INDEX(Sc_addr));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        PRMTint_pipe =  0b11000010110;
        PRMT =  0b11000010110;

ENCODING
!prmt__RRC_RRC_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_74_72_pmode=pmode;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_71_64_Rc=Rb;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sc_bank,Sc_addr);
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



CLASS "r2p__RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
PR:PR
','Register:Ra {/REUSE("noreuse"):reuse_src_a} /B3B0("B0"):a_bsel
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@R2P_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        R2Pint_pipe =  0b1000000100;
        R2P =  0b1000000100;

ENCODING
!r2p__RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_8_31_24_Ra=Ra;
BITS_2_77_76_msi=a_bsel;
BITS_8_39_32_Rb=Rb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



CLASS "r2p__RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
PR:PR
','Register:Ra {/REUSE("noreuse"):reuse_src_a} /B3B0("B0"):a_bsel
','UImm(32/0xFF)*:Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@R2P_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        R2Pint_pipe =  0b100000000100;
        R2P =  0b100000000100;

ENCODING
!r2p__RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_8_31_24_Ra=Ra;
BITS_2_77_76_msi=a_bsel;
BITS_32_63_32_Ra_offset=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "r2p__RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
PR:PR
','Register:Ra {/REUSE("noreuse"):reuse_src_a} /B3B0("B0"):a_bsel
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@R2P_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        R2Pint_pipe =  0b101000000100;
        R2P =  0b101000000100;

ENCODING
!r2p__RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_8_31_24_Ra=Ra;
BITS_2_77_76_msi=a_bsel;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "sel__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@SEL_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        SELint_pipe =  0b1000000111;
        SEL =  0b1000000111;

ENCODING
!sel__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



CLASS "sel__RuIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','UImm(32)*:Sb
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@SEL_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        SELint_pipe =  0b100000000111;
        SEL =  0b100000000111;

ENCODING
!sel__RuIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_32_63_32_Ra_offset=Sb;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "sel__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@SEL_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        SELint_pipe =  0b101000000111;
        SEL =  0b101000000111;

ENCODING
!sel__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "sgxt__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /CWMode("C"):cw /FMT("S32"):fmt
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@SGXT_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        SGXTint_pipe =  0b1000011010;
        SGXT =  0b1000011010;

ENCODING
!sgxt__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_75_75_size=cw;
BITS_1_73_73_sz=fmt;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



CLASS "sgxt__RuIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /CWMode("C"):cw /FMT("S32"):fmt
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','UImm(32)*:Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@SGXT_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        SGXTint_pipe =  0b100000011010;
        SGXT =  0b100000011010;

ENCODING
!sgxt__RuIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_75_75_size=cw;
BITS_1_73_73_sz=fmt;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_32_63_32_Ra_offset=Sb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "sgxt__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /CWMode("C"):cw /FMT("S32"):fmt
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@SGXT_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        SGXTint_pipe =  0b101000011010;
        SGXT =  0b101000011010;

ENCODING
!sgxt__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_75_75_size=cw;
BITS_1_73_73_sz=fmt;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



CLASS "shf__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /SDIR:dir /CWMode("C"):cw /FMT_shf:fmt /HILO("LO"):hilo
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@SHF_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        SHFint_pipe =  0b1000011001;
        SHF =  0b1000011001;

ENCODING
!shf__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_76_76_private=dir;
BITS_1_75_75_size=cw;
BITS_2_74_73_sz=fmt;
BITS_1_80_80_ftz=hilo;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



CLASS "shf__RuIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /SDIR:dir /CWMode("C"):cw /FMT_shf:fmt /HILO("LO"):hilo
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','UImm(32)*:Sb
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@SHF_Imm_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        SHFint_pipe =  0b100000011001;
        SHF =  0b100000011001;

ENCODING
!shf__RuIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_76_76_private=dir;
BITS_1_75_75_size=cw;
BITS_2_74_73_sz=fmt;
BITS_1_80_80_ftz=hilo;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "shf__RRuI_RRI"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /SDIR:dir /CWMode("C"):cw /FMT_shf:fmt /HILO("LO"):hilo
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
','UImm(32)*:Sc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@SHF_Rb_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        SHFint_pipe =  0b10000011001;
        SHF =  0b10000011001;

ENCODING
!shf__RRuI_RRI_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_76_76_private=dir;
BITS_1_75_75_size=cw;
BITS_2_74_73_sz=fmt;
BITS_1_80_80_ftz=hilo;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_71_64_Rc=Rb;
BITS_32_63_32_Ra_offset=Sc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



CLASS "shf__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /SDIR:dir /CWMode("C"):cw /FMT_shf:fmt /HILO("LO"):hilo
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@SHF_C_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        SHFint_pipe =  0b101000011001;
        SHF =  0b101000011001;

ENCODING
!shf__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_76_76_private=dir;
BITS_1_75_75_size=cw;
BITS_2_74_73_sz=fmt;
BITS_1_80_80_ftz=hilo;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "shf__RRC_RRC"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /SDIR:dir /CWMode("C"):cw /FMT_shf:fmt /HILO("LO"):hilo
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
','C:Sc[UImm(5/0*):Sc_bank]*   [SImm(17)*:Sc_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sc_bank <= 17) || (Sc_bank >= 24 && Sc_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sc_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@SHF_Rb_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc_bank))+(1<<INDEX(Sc_addr));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        SHFint_pipe =  0b11000011001;
        SHF =  0b11000011001;

ENCODING
!shf__RRC_RRC_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_76_76_private=dir;
BITS_1_75_75_size=cw;
BITS_2_74_73_sz=fmt;
BITS_1_80_80_ftz=hilo;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_71_64_Rc=Rb;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sc_bank,Sc_addr);
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



ALTERNATE CLASS "shl__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /CWMode("C"):cw
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@SHF_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        SHLint_pipe =  0b1000011001;
        SHL =  0b1000011001;

ENCODING
!shl__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_76_76_private=*0;
BITS_1_75_75_size=cw;
BITS_2_74_73_sz=*3;
BITS_1_80_80_ftz=*0;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=*255;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



ALTERNATE CLASS "shl__RuIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /CWMode("C"):cw
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','UImm(32)*:Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@SHF_Imm_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        SHLint_pipe =  0b100000011001;
        SHL =  0b100000011001;

ENCODING
!shl__RuIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_76_76_private=*0;
BITS_1_75_75_size=cw;
BITS_2_74_73_sz=*3;
BITS_1_80_80_ftz=*0;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=*255;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



ALTERNATE CLASS "shl__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /CWMode("C"):cw
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_4(batch_t,usched_info,reuse_src_a) :
 "Invalid combination of batch_t, usched_info, reuse_src_a"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@SHF_C_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        SHLint_pipe =  0b101000011001;
        SHL =  0b101000011001;

ENCODING
!shl__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_76_76_private=*0;
BITS_1_75_75_size=cw;
BITS_2_74_73_sz=*3;
BITS_1_80_80_ftz=*0;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_8_71_64_Rc=*255;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_4(batch_t,usched_info,reuse_src_a);



ALTERNATE CLASS "shl_imm_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /CWMode("C"):cw
Register:Rd
','UImm(32)*:Sa
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_2(batch_t,usched_info,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@SHF_Rb_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Sa));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        SHLint_pipe =  0b10000011001;
        SHL =  0b10000011001;

ENCODING
!shl_imm__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_76_76_private=*0;
BITS_1_75_75_size=cw;
BITS_2_74_73_sz=*3;
BITS_1_80_80_ftz=*1;
BITS_8_23_16_Rd=Rd;
BITS_32_63_32_Ra_offset=Sa;
BITS_8_71_64_Rc=Rb;
BITS_8_31_24_Ra=*255;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_2(batch_t,usched_info,reuse_src_b);



ALTERNATE CLASS "shr__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /CWMode("C"):cw /FMT_S32_U32("S32"):fmt
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_c}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((fmt !=`FMT_S32_U32@INVALID0)&&(fmt !=`FMT_S32_U32@INVALID1)) :
 "Invalid fmt field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_7(batch_t,usched_info,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@SHF_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        SHRint_pipe =  0b1000011001;
        SHR =  0b1000011001;

ENCODING
!shr__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_76_76_private=*1;
BITS_1_75_75_size=cw;
BITS_2_74_73_sz=fmt;
BITS_1_80_80_ftz=*1;
BITS_8_23_16_Rd=Rd;
BITS_8_71_64_Rc=Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_31_24_Ra=*255;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_7(batch_t,usched_info,reuse_src_b,reuse_src_c);



ALTERNATE CLASS "shr__RIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /CWMode("C"):cw /FMT_S32_U32("S32"):fmt
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_c}
','UImm(32)*:Sb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((fmt !=`FMT_S32_U32@INVALID0)&&(fmt !=`FMT_S32_U32@INVALID1)) :
 "Invalid fmt field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_8(batch_t,usched_info,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@SHF_Imm_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        SHRint_pipe =  0b100000011001;
        SHR =  0b100000011001;

ENCODING
!shr__RIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_76_76_private=*1;
BITS_1_75_75_size=cw;
BITS_2_74_73_sz=fmt;
BITS_1_80_80_ftz=*1;
BITS_8_23_16_Rd=Rd;
BITS_8_71_64_Rc=Ra;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_31_24_Ra=*255;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_8(batch_t,usched_info,reuse_src_c);



ALTERNATE CLASS "shr__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /CWMode("C"):cw /FMT_S32_U32("S32"):fmt
Register:Rd
','Register:Ra {/REUSE("noreuse"):reuse_src_c}
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((fmt !=`FMT_S32_U32@INVALID0)&&(fmt !=`FMT_S32_U32@INVALID1)) :
 "Invalid fmt field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_8(batch_t,usched_info,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@SHF_C_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        SHRint_pipe =  0b101000011001;
        SHR =  0b101000011001;

ENCODING
!shr__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_76_76_private=*1;
BITS_1_75_75_size=cw;
BITS_2_74_73_sz=fmt;
BITS_1_80_80_ftz=*1;
BITS_8_23_16_Rd=Rd;
BITS_8_71_64_Rc=Ra;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_8_31_24_Ra=*255;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_8(batch_t,usched_info,reuse_src_c);



CLASS "vabsdiff4__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /SRCFMT_U8_S8("S8"):fmt /VRed2("SIMD_MRG"):red
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@VABSDIFF4_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        VABSDIFF4int_pipe =  0b1000010101;
        VABSDIFF4 =  0b1000010101;

ENCODING
!vabsdiff4__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_75_75_size=red;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



CLASS "vabsdiff4__RuIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /SRCFMT_U8_S8("S8"):fmt /VRed2("SIMD_MRG"):red
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','UImm(32)*:Sb
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@VABSDIFF4_Imm_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        VABSDIFF4int_pipe =  0b100000010101;
        VABSDIFF4 =  0b100000010101;

ENCODING
!vabsdiff4__RuIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_75_75_size=red;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "vabsdiff4__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /SRCFMT_U8_S8("S8"):fmt /VRed2("SIMD_MRG"):red
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@VABSDIFF4_C_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        VABSDIFF4int_pipe =  0b101000010101;
        VABSDIFF4 =  0b101000010101;

ENCODING
!vabsdiff4__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_75_75_size=red;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "vabsdiff4__RRuI_RRI"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /SRCFMT_U8_S8("S8"):fmt /VRed2("SIMD_MRG"):red
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
','UImm(32)*:Sc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@VABSDIFF4_Rb_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        VABSDIFF4int_pipe =  0b10000010101;
        VABSDIFF4 =  0b10000010101;

ENCODING
!vabsdiff4__RRuI_RRI_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_75_75_size=red;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_8_71_64_Rc=Rb;
BITS_32_63_32_Ra_offset=Sc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



CLASS "vabsdiff4__RRC_RRC"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /SRCFMT_U8_S8("S8"):fmt /VRed2("SIMD_MRG"):red
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
','C:Sc[UImm(5/0*):Sc_bank]*   [SImm(17)*:Sc_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sc_bank <= 17) || (Sc_bank >= 24 && Sc_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sc_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@VABSDIFF4_Rb_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc_bank))+(1<<INDEX(Sc_addr));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        VABSDIFF4int_pipe =  0b11000010101;
        VABSDIFF4 =  0b11000010101;

ENCODING
!vabsdiff4__RRC_RRC_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_1_75_75_size=red;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_8_71_64_Rc=Rb;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sc_bank,Sc_addr);
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



CLASS "vabsdiff__RRR_RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FMT("S32"):fmt
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@VABSDIFF_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        VABSDIFFint_pipe =  0b1000010100;
        VABSDIFF =  0b1000010100;

ENCODING
!vabsdiff__RRR_RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_5(batch_t,usched_info,reuse_src_a,reuse_src_b,reuse_src_c);



CLASS "vabsdiff__RuIR_RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FMT("S32"):fmt
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','UImm(32)*:Sb
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@VABSDIFF_Imm_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        VABSDIFFint_pipe =  0b100000010100;
        VABSDIFF =  0b100000010100;

ENCODING
!vabsdiff__RuIR_RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_32_63_32_Ra_offset=Sb;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "vabsdiff__RCR_RCR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FMT("S32"):fmt
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','C:Sb[UImm(5/0*):Sb_bank]*   [SImm(17)*:Sb_addr]
','Register:Rc {/REUSE("noreuse"):reuse_src_c}
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sb_bank <= 17) || (Sb_bank >= 24 && Sb_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sb_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_c"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@VABSDIFF_C_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_addr));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        VABSDIFFint_pipe =  0b101000010100;
        VABSDIFF =  0b101000010100;

ENCODING
!vabsdiff__RCR_RCR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sb_bank,Sb_addr);
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_3(batch_t,usched_info,reuse_src_a,reuse_src_c);



CLASS "vabsdiff__RRuI_RRI"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FMT("S32"):fmt
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
','UImm(32)*:Sc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@VABSDIFF_Rb_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        VABSDIFFint_pipe =  0b10000010100;
        VABSDIFF =  0b10000010100;

ENCODING
!vabsdiff__RRuI_RRI_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_8_71_64_Rc=Rb;
BITS_32_63_32_Ra_offset=Sc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



CLASS "vabsdiff__RRC_RRC"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /FMT("S32"):fmt
Register:Rd
','Predicate("PT"):Pu
','Register:Ra {/REUSE("noreuse"):reuse_src_a}
','Register:Rb {/REUSE("noreuse"):reuse_src_b}
','C:Sc[UImm(5/0*):Sc_bank]*   [SImm(17)*:Sc_addr]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
INVALID_CONST_ADDR_SASS_ONLY_ERROR
 ((Sc_bank <= 17) || (Sc_bank >= 24 && Sc_bank <= 31)) :
 "Invalid constant bank error"
MISALIGNED_ADDR_ERROR
 (Sc_addr & 0x3) == 0 :
 "Constant offsets must be aligned on a 4B boundary"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b) :
 "Invalid combination of batch_t, usched_info, reuse_src_a, reuse_src_b"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 SIDL_NAME = `SIDL_NAMES@VABSDIFF_Rb_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc_bank))+(1<<INDEX(Sc_addr));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;

OPCODES
        VABSDIFFint_pipe =  0b11000010100;
        VABSDIFF =  0b11000010100;

ENCODING
!vabsdiff__RRC_RRC_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_73_73_sz=fmt;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_8_31_24_Ra=Ra;
BITS_8_71_64_Rc=Rb;

BITS_5_58_54_Sb_bank,BITS_14_53_40_Sb_addr =  ConstBankAddress2(Sc_bank,Sc_addr);
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_6(batch_t,usched_info,reuse_src_a,reuse_src_b);



CLASS "vote_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /VoteOp:voteop
Register("RZ"):Rd
','Predicate:Pu
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((voteop !=`VoteOp@INVALID3)) :
 "Invalid voteop field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_1(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;

OPCODES
        VOTEint_pipe =  0b100000000110;
        VOTE =  0b100000000110;

ENCODING
!vote__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_73_72_extract=voteop;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_1(batch_t,usched_info);



CLASS "atomg__RaRZ"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /ATOMGOP_DIST:op /COP("EN"):cop /REDATOMSIZE("U32"):sz /SEM_WEAK_STRONG("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private
Predicate:Pu
','Register:Rd
',' [ ZeroRegister("RZ"):Ra + UImm(24/0)*:Ra_offset ]
','Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((op !=`ATOMGOP_DIST@INVALID10)&&(op !=`ATOMGOP_DIST@INVALID11)&&(op !=`ATOMGOP_DIST@INVALID12)&&(op !=`ATOMGOP_DIST@INVALID13)&&(op !=`ATOMGOP_DIST@INVALID14)&&(op !=`ATOMGOP_DIST@INVALID15)) :
 "Invalid op field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`REDATOMSIZE@INVALID7)) :
 "Invalid sz field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sem !=`SEM_WEAK_STRONG@INVALID0)&&(sem !=`SEM_WEAK_STRONG@INVALID3)) :
 "Invalid sem field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)==`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F64.RN))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F64.RN))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `ATOMGOP_DIST@ADD))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32")||(sz == `REDATOMSIZE@S32)||(sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@F32.FTZ.RN)||(sz == `REDATOMSIZE@F16x2.RN)||(sz == `REDATOMSIZE@F64.RN))) :
 "Invalid instruction combination ( rule name: ADD)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `ATOMGOP_DIST@MIN)||(op == `ATOMGOP_DIST@MAX))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32")||(sz == `REDATOMSIZE@S32)||(sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F16x2.RN))) :
 "Invalid instruction combination ( rule name: MIN_MAX)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `ATOMGOP_DIST@DEC)||(op == `ATOMGOP_DIST@INC))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32"))) :
 "Invalid instruction combination ( rule name: INC_DEC)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `ATOMGOP_DIST@AND)||(op == `ATOMGOP_DIST@XOR)||(op == `ATOMGOP_DIST@OR)||(op == `ATOMGOP_DIST@EXCH))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32")||(sz == `REDATOMSIZE@S32)||(sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64"))) :
 "Invalid instruction combination ( rule name: AND_OR_XOR_EXCH)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `ATOMGOP_DIST@SAFEADD))) -> (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64"))) :
 "Invalid instruction combination ( rule name: SAFEADD)"
OOR_REG_ERROR
 (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F64.RN))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F64.RN))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_INVALID_ADDR_SPACE)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@ATOMG ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GLOBAL_ADDRESS);

PREDICATES
 IDEST_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU_UNORDERED_WR ;

OPCODES
        ATOMGmio_pipe =  0b1110101000;
        ATOMG =  0b1110101000;

ENCODING
!atomg__RaRZ_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_4_90_87_op=*op;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=*255;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "atomg__RaNonRZ"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /ATOMGOP_DIST:op /COP("EN"):cop /REDATOMSIZE("U32"):sz /SEM_WEAK_STRONG("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private
Predicate:Pu
','Register:Rd
',' [ NonZeroRegister:Ra + SImm(24/0)*:Ra_offset ]
','Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((op !=`ATOMGOP_DIST@INVALID10)&&(op !=`ATOMGOP_DIST@INVALID11)&&(op !=`ATOMGOP_DIST@INVALID12)&&(op !=`ATOMGOP_DIST@INVALID13)&&(op !=`ATOMGOP_DIST@INVALID14)&&(op !=`ATOMGOP_DIST@INVALID15)) :
 "Invalid op field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`REDATOMSIZE@INVALID7)) :
 "Invalid sz field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sem !=`SEM_WEAK_STRONG@INVALID0)&&(sem !=`SEM_WEAK_STRONG@INVALID3)) :
 "Invalid sem field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F64.RN))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F64.RN))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((e == `E@E))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((e == `E@E))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((e == `E@E))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `ATOMGOP_DIST@ADD))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32")||(sz == `REDATOMSIZE@S32)||(sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@F32.FTZ.RN)||(sz == `REDATOMSIZE@F16x2.RN)||(sz == `REDATOMSIZE@F64.RN))) :
 "Invalid instruction combination ( rule name: ADD)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `ATOMGOP_DIST@MIN)||(op == `ATOMGOP_DIST@MAX))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32")||(sz == `REDATOMSIZE@S32)||(sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F16x2.RN))) :
 "Invalid instruction combination ( rule name: MIN_MAX)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `ATOMGOP_DIST@DEC)||(op == `ATOMGOP_DIST@INC))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32"))) :
 "Invalid instruction combination ( rule name: INC_DEC)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `ATOMGOP_DIST@AND)||(op == `ATOMGOP_DIST@XOR)||(op == `ATOMGOP_DIST@OR)||(op == `ATOMGOP_DIST@EXCH))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32")||(sz == `REDATOMSIZE@S32)||(sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64"))) :
 "Invalid instruction combination ( rule name: AND_OR_XOR_EXCH)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `ATOMGOP_DIST@SAFEADD))) -> (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64"))) :
 "Invalid instruction combination ( rule name: SAFEADD)"
OOR_REG_ERROR
 (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F64.RN))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F64.RN))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_INVALID_ADDR_SPACE)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@ATOMG ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GLOBAL_ADDRESS);

PREDICATES
 IDEST_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU_UNORDERED_WR ;

OPCODES
        ATOMGmio_pipe =  0b1110101000;
        ATOMG =  0b1110101000;

ENCODING
!atomg__RaNonRZ_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_4_90_87_op=*op;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=*255;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "atomg_weakonly__RaRZ"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /ATOMGOP_DIST:op /COP("EN"):cop /REDATOMSIZE("U32"):sz /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private
Predicate:Pu
','Register:Rd
',' [ ZeroRegister("RZ"):Ra + UImm(24/0)*:Ra_offset ]
','Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((op !=`ATOMGOP_DIST@INVALID10)&&(op !=`ATOMGOP_DIST@INVALID11)&&(op !=`ATOMGOP_DIST@INVALID12)&&(op !=`ATOMGOP_DIST@INVALID13)&&(op !=`ATOMGOP_DIST@INVALID14)&&(op !=`ATOMGOP_DIST@INVALID15)) :
 "Invalid op field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`REDATOMSIZE@INVALID7)) :
 "Invalid sz field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)==`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F64.RN))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F64.RN))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `ATOMGOP_DIST@ADD))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32")||(sz == `REDATOMSIZE@S32)||(sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@F32.FTZ.RN)||(sz == `REDATOMSIZE@F16x2.RN)||(sz == `REDATOMSIZE@F64.RN))) :
 "Invalid instruction combination ( rule name: ADD)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `ATOMGOP_DIST@MIN)||(op == `ATOMGOP_DIST@MAX))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32")||(sz == `REDATOMSIZE@S32)||(sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F16x2.RN))) :
 "Invalid instruction combination ( rule name: MIN_MAX)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `ATOMGOP_DIST@DEC)||(op == `ATOMGOP_DIST@INC))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32"))) :
 "Invalid instruction combination ( rule name: INC_DEC)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `ATOMGOP_DIST@AND)||(op == `ATOMGOP_DIST@XOR)||(op == `ATOMGOP_DIST@OR)||(op == `ATOMGOP_DIST@EXCH))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32")||(sz == `REDATOMSIZE@S32)||(sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64"))) :
 "Invalid instruction combination ( rule name: AND_OR_XOR_EXCH)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `ATOMGOP_DIST@SAFEADD))) -> (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64"))) :
 "Invalid instruction combination ( rule name: SAFEADD)"
OOR_REG_ERROR
 (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F64.RN))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F64.RN))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_INVALID_ADDR_SPACE)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@ATOMG ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GLOBAL_ADDRESS);

PREDICATES
 IDEST_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU_UNORDERED_WR ;

OPCODES
        ATOMGmio_pipe =  0b1110101000;
        ATOMG =  0b1110101000;

ENCODING
!atomg_weakonly__RaRZ_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_4_90_87_op=*op;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=*255;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "atomg_weakonly__RaNonRZ"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /ATOMGOP_DIST:op /COP("EN"):cop /REDATOMSIZE("U32"):sz /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private
Predicate:Pu
','Register:Rd
',' [ NonZeroRegister:Ra + SImm(24/0)*:Ra_offset ]
','Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((op !=`ATOMGOP_DIST@INVALID10)&&(op !=`ATOMGOP_DIST@INVALID11)&&(op !=`ATOMGOP_DIST@INVALID12)&&(op !=`ATOMGOP_DIST@INVALID13)&&(op !=`ATOMGOP_DIST@INVALID14)&&(op !=`ATOMGOP_DIST@INVALID15)) :
 "Invalid op field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`REDATOMSIZE@INVALID7)) :
 "Invalid sz field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F64.RN))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F64.RN))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((e == `E@E))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((e == `E@E))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((e == `E@E))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `ATOMGOP_DIST@ADD))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32")||(sz == `REDATOMSIZE@S32)||(sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@F32.FTZ.RN)||(sz == `REDATOMSIZE@F16x2.RN)||(sz == `REDATOMSIZE@F64.RN))) :
 "Invalid instruction combination ( rule name: ADD)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `ATOMGOP_DIST@MIN)||(op == `ATOMGOP_DIST@MAX))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32")||(sz == `REDATOMSIZE@S32)||(sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F16x2.RN))) :
 "Invalid instruction combination ( rule name: MIN_MAX)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `ATOMGOP_DIST@DEC)||(op == `ATOMGOP_DIST@INC))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32"))) :
 "Invalid instruction combination ( rule name: INC_DEC)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `ATOMGOP_DIST@AND)||(op == `ATOMGOP_DIST@XOR)||(op == `ATOMGOP_DIST@OR)||(op == `ATOMGOP_DIST@EXCH))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32")||(sz == `REDATOMSIZE@S32)||(sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64"))) :
 "Invalid instruction combination ( rule name: AND_OR_XOR_EXCH)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `ATOMGOP_DIST@SAFEADD))) -> (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64"))) :
 "Invalid instruction combination ( rule name: SAFEADD)"
OOR_REG_ERROR
 (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F64.RN))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F64.RN))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_INVALID_ADDR_SPACE)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@ATOMG ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GLOBAL_ADDRESS);

PREDICATES
 IDEST_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU_UNORDERED_WR ;

OPCODES
        ATOMGmio_pipe =  0b1110101000;
        ATOMG =  0b1110101000;

ENCODING
!atomg_weakonly__RaNonRZ_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_4_90_87_op=*op;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=*255;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "atomg_cas__RaRZ"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /CAS:cas /COP("EN"):cop /ATOMCASSZ("U32"):sz /SEM_WEAK_STRONG("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private
Predicate:Pu
','Register:Rd
',' [ ZeroRegister("RZ"):Ra + UImm(24/0)*:Ra_offset ]
','NonZeroRegister:Rb
','Register:Rc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`ATOMCASSZ@INVALID3)&&(sz !=`ATOMCASSZ@INVALID4)&&(sz !=`ATOMCASSZ@INVALID5)&&(sz !=`ATOMCASSZ@INVALID6)&&(sz !=`ATOMCASSZ@INVALID7)) :
 "Invalid sz field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sem !=`SEM_WEAK_STRONG@INVALID0)&&(sem !=`SEM_WEAK_STRONG@INVALID3)) :
 "Invalid sem field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)==`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rb)!=`Register@RZ) :
 "Disallowed register Rb"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rc)==`Register@RZ)||((Rc)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rc)+((Rc)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_INVALID_ADDR_SPACE)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@ATOMG_CAS ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GLOBAL_ADDRESS);

PREDICATES
 IDEST_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_C_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU_UNORDERED_WR ;

OPCODES
        ATOMGmio_pipe =  0b1110101001;
        ATOMG =  0b1110101001;

ENCODING
!atomg_cas__RaRZ_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "atomg_cas__RaNonRZ"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /CAS:cas /COP("EN"):cop /ATOMCASSZ("U32"):sz /SEM_WEAK_STRONG("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private
Predicate:Pu
','Register:Rd
',' [ NonZeroRegister:Ra + SImm(24/0)*:Ra_offset ]
','NonZeroRegister:Rb
','Register:Rc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`ATOMCASSZ@INVALID3)&&(sz !=`ATOMCASSZ@INVALID4)&&(sz !=`ATOMCASSZ@INVALID5)&&(sz !=`ATOMCASSZ@INVALID6)&&(sz !=`ATOMCASSZ@INVALID7)) :
 "Invalid sz field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sem !=`SEM_WEAK_STRONG@INVALID0)&&(sem !=`SEM_WEAK_STRONG@INVALID3)) :
 "Invalid sem field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rb)!=`Register@RZ) :
 "Disallowed register Rb"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((e == `E@E))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((e == `E@E))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((e == `E@E))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rc)==`Register@RZ)||((Rc)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rc)+((Rc)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_INVALID_ADDR_SPACE)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@ATOMG_CAS ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GLOBAL_ADDRESS);

PREDICATES
 IDEST_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_C_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU_UNORDERED_WR ;

OPCODES
        ATOMGmio_pipe =  0b1110101001;
        ATOMG =  0b1110101001;

ENCODING
!atomg_cas__RaNonRZ_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "atomg_cas_weakonly__RaRZ"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /CAS:cas /COP("EN"):cop /ATOMCASSZ("U32"):sz /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private
Predicate:Pu
','Register:Rd
',' [ ZeroRegister("RZ"):Ra + UImm(24/0)*:Ra_offset ]
','NonZeroRegister:Rb
','Register:Rc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`ATOMCASSZ@INVALID3)&&(sz !=`ATOMCASSZ@INVALID4)&&(sz !=`ATOMCASSZ@INVALID5)&&(sz !=`ATOMCASSZ@INVALID6)&&(sz !=`ATOMCASSZ@INVALID7)) :
 "Invalid sz field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)==`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rb)!=`Register@RZ) :
 "Disallowed register Rb"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rc)==`Register@RZ)||((Rc)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rc)+((Rc)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_INVALID_ADDR_SPACE)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@ATOMG_CAS ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GLOBAL_ADDRESS);

PREDICATES
 IDEST_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_C_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU_UNORDERED_WR ;

OPCODES
        ATOMGmio_pipe =  0b1110101001;
        ATOMG =  0b1110101001;

ENCODING
!atomg_cas_weakonly__RaRZ_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "atomg_cas_weakonly__RaNonRZ"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /CAS:cas /COP("EN"):cop /ATOMCASSZ("U32"):sz /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private
Predicate:Pu
','Register:Rd
',' [ NonZeroRegister:Ra + SImm(24/0)*:Ra_offset ]
','NonZeroRegister:Rb
','Register:Rc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`ATOMCASSZ@INVALID3)&&(sz !=`ATOMCASSZ@INVALID4)&&(sz !=`ATOMCASSZ@INVALID5)&&(sz !=`ATOMCASSZ@INVALID6)&&(sz !=`ATOMCASSZ@INVALID7)) :
 "Invalid sz field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rb)!=`Register@RZ) :
 "Disallowed register Rb"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((e == `E@E))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((e == `E@E))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((e == `E@E))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rc)==`Register@RZ)||((Rc)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rc)+((Rc)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@U64)||(sz == `ATOMCASSZ@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_INVALID_ADDR_SPACE)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@ATOMG_CAS ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GLOBAL_ADDRESS);

PREDICATES
 IDEST_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_C_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU_UNORDERED_WR ;

OPCODES
        ATOMGmio_pipe =  0b1110101001;
        ATOMG =  0b1110101001;

ENCODING
!atomg_cas_weakonly__RaNonRZ_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "cctl__sImmOffset"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /Cache("D"):cache /COP_PF1_PF2_WB_IV_RS:cop
 [ NonZeroRegister:Ra + SImm(32/0)*:Ra_offset ]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((e == `E@E))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((e == `E@E))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((e == `E@E))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_ERROR
 (((cop == `COP_PF1_PF2_WB_IV_RS@PF1)||(cop == `COP_PF1_PF2_WB_IV_RS@PF2)||(cop == `COP_PF1_PF2_WB_IV_RS@WB)||(cop == `COP_PF1_PF2_WB_IV_RS@IV)||(cop == `COP_PF1_PF2_WB_IV_RS@RS))) -> (((cache == `Cache@D)||(cache == `Cache@U))) :
 "Invalid instruction combination ( rule name: noC_noI_cop)"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_UNORDERED ;

OPCODES
        CCTLmio_pipe =  0b100110001111;
        CCTL =  0b100110001111;

ENCODING
!cctl__sImmOffset_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_3_80_78_mode=cache;
BITS_4_90_87_op=*cop;
BITS_8_31_24_Ra=*Ra;
BITS_32_63_32_Ra_offset=Ra_offset;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "cctl__uImmOffset"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /Cache("D"):cache /COP_PF1_PF2_WB_IV_RS:cop
 [ ZeroRegister("RZ"):Ra + UImm(32/0)*:Ra_offset ]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)==`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
ILLEGAL_INSTR_ENCODING_ERROR
 (((cop == `COP_PF1_PF2_WB_IV_RS@PF1)||(cop == `COP_PF1_PF2_WB_IV_RS@PF2)||(cop == `COP_PF1_PF2_WB_IV_RS@WB)||(cop == `COP_PF1_PF2_WB_IV_RS@IV)||(cop == `COP_PF1_PF2_WB_IV_RS@RS))) -> (((cache == `Cache@D)||(cache == `Cache@U))) :
 "Invalid instruction combination ( rule name: noC_noI_cop)"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_UNORDERED ;

OPCODES
        CCTLmio_pipe =  0b100110001111;
        CCTL =  0b100110001111;

ENCODING
!cctl__uImmOffset_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_3_80_78_mode=cache;
BITS_4_90_87_op=*cop;
BITS_8_31_24_Ra=*Ra;
BITS_32_63_32_Ra_offset=Ra_offset;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "cctl__IVALL_WBALL_D_U_noSrc"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /CACHE_D_U("D"):cache /COP_IVALL_IVALLP_WBALL_WBALLP:cop
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND) + (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_UNORDERED ;

OPCODES
        CCTLmio_pipe =  0b100110001111;
        CCTL =  0b100110001111;

ENCODING
!cctl__IVALL_WBALL_D_U_noSrc_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=0;
BITS_3_80_78_mode=*cache;
BITS_4_90_87_op=*cop;
BITS_8_31_24_Ra=255;
BITS_32_63_32_Ra_offset=*0;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "cctl__IVALL_WBALL_C_noSrc"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /CONLY:cache /COP_IVALL_IVALLP_WBALL_WBALLP:cop
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 8 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND) + (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_UNORDERED ;

OPCODES
        CCTLmio_pipe =  0b100110001111;
        CCTL =  0b100110001111;

ENCODING
!cctl__IVALL_WBALL_C_noSrc_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=0;
BITS_3_80_78_mode=*cache;
BITS_4_90_87_op=*cop;
BITS_8_31_24_Ra=255;
BITS_32_63_32_Ra_offset=*0;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "cctl__IVALL_WBALL_I_noSrc"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /IONLY:cache /COP_IVALL_IVALLP_WBALL_WBALLP:cop
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 11 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND) + (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_UNORDERED ;

OPCODES
        CCTLmio_pipe =  0b100110001111;
        CCTL =  0b100110001111;

ENCODING
!cctl__IVALL_WBALL_I_noSrc_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=0;
BITS_3_80_78_mode=*cache;
BITS_4_90_87_op=*cop;
BITS_8_31_24_Ra=255;
BITS_32_63_32_Ra_offset=*0;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "cctll__sImmOffset"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /COP_PF1_PF2_WB_IV_RS:cop
 [ NonZeroRegister:Ra + SImm(24/0)*:Ra_offset ]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_LOCAL_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_UNORDERED ;

OPCODES
        CCTLLmio_pipe =  0b100110010000;
        CCTLL =  0b100110010000;

ENCODING
!cctll__sImmOffset_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_4_90_87_op=*cop;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "cctll__uImmOffset"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /COP_PF1_PF2_WB_IV_RS:cop
 [ ZeroRegister("RZ"):Ra + UImm(24/0)*:Ra_offset ]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)==`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_LOCAL_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_UNORDERED ;

OPCODES
        CCTLLmio_pipe =  0b100110010000;
        CCTLL =  0b100110010000;

ENCODING
!cctll__uImmOffset_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_4_90_87_op=*cop;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "cctll__IVALL_WBALL_D_U_noSrc"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /COP_IVALL_WBALL:cop
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND) + (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_UNORDERED ;

OPCODES
        CCTLLmio_pipe =  0b100110010000;
        CCTLL =  0b100110010000;

ENCODING
!cctll__IVALL_WBALL_D_U_noSrc_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_4_90_87_op=*cop;
BITS_8_31_24_Ra=255;
BITS_24_63_40_Ra_offset=*0;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "cctlt__Rb"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /CCTLTOp:cop
NonZeroRegister:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rb)!=`Register@RZ) :
 "Disallowed register Rb"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@CCTLT_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_UNORDERED ;

OPCODES
        CCTLTmio_pipe =  0b1110010001;
        CCTLT =  0b1110010001;

ENCODING
!cctlt__Rb_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_86_85_depth=*cop;
BITS_8_39_32_Rb=Rb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "cctlt__const"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /CCTLTOp:cop
UImm(5)*:Sb_bank
','UImm(14)*:Sb_offset
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@CCTLT_C ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb_bank))+(1<<INDEX(Sb_offset));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_UNORDERED ;

OPCODES
        CCTLTmio_pipe =  0b101110010001;
        CCTLT =  0b101110010001;

ENCODING
!cctlt__const_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_86_85_depth=*cop;
BITS_5_58_54_Sb_bank=Sb_bank;
BITS_14_53_40_Sb_addr=Sb_offset;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "cctlt__IVALL"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /IVALLONLY:cop
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_BRU_DEPBAR_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@CCTLT_Rb ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_UNORDERED ;

OPCODES
        CCTLTmio_pipe =  0b1110010001;
        CCTLT =  0b1110010001;

ENCODING
!cctlt__IVALL_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_86_85_depth=*cop;
BITS_8_39_32_Rb=*255;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "errbar_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_1(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;

OPCODES
        ERRBARmio_pipe =  0b100110101011;
        ERRBAR =  0b100110101011;

ENCODING
!errbar__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_1(batch_t,usched_info);



CLASS "ldc__RaRZ"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /SZ_U8_S8_U16_S16_32_64("32"):sz /AdMode("IA"):ad
Register:Rd
','C:Sa[UImm(5/0*):Sa_bank]*   [ZeroRegister("RZ"):Ra + SImm(17/0)*:Ra_offset]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`SZ_U8_S8_U16_S16_32_64@INVALID6)&&(sz !=`SZ_U8_S8_U16_S16_32_64@INVALID7)) :
 "Invalid sz field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)==`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
UNPREDICTABLE_BEHAVIOR_WARNING
 (((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS))) -> (((Sa_bank==0x0)||(Sa_bank==0x1)||(Sa_bank==0x2)||(Sa_bank==0x3)||(Sa_bank==0x4)||(Sa_bank==0x5)||(Sa_bank==0x6)||(Sa_bank==0x7))) :
 "Combination leads to unpredictable behavior"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((ad == `AdMode@ISL))) -> (((Sa_bank==0x0)||(Sa_bank==0x1)||(Sa_bank==0x2)||(Sa_bank==0x3)||(Sa_bank==0x4)||(Sa_bank==0x5)||(Sa_bank==0x6)||(Sa_bank==0x7)||(Sa_bank==0x8)||(Sa_bank==0x9)||(Sa_bank==0xa)||(Sa_bank==0xb)||(Sa_bank==0xc)||(Sa_bank==0xd)||(Sa_bank==0xe))) :
 "Disallowed specification: LDC.ISL cannot have a bank greater than 14"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_INVALID_CONST_ADDR_LDC)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Sa_bank))+(1<<INDEX(Ra))+(1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_CONSTANT_ADDRESS);

PREDICATES
 IDEST_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_UNORDERED ;

OPCODES
        LDCmio_pipe =  0b101110000010;
        LDC =  0b101110000010;

ENCODING
!ldc__RaRZ_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_75_73_sz=sz;
BITS_2_79_78_rnd=ad;
BITS_8_23_16_Rd=Rd;

BITS_8_31_24_Ra=*Ra;
BITS_5_58_54_Sb_bank,BITS_16_53_38_Sa_addr =  ConstBankAddress0(Sa_bank,Ra_offset);
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "ldc__RaNonRZ"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /SZ_U8_S8_U16_S16_32_64("32"):sz /AdMode("IA"):ad
Register:Rd
','C:Sa[UImm(5/0*):Sa_bank]*   [NonZeroRegister:Ra + SImm(17/0)*:Ra_offset]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`SZ_U8_S8_U16_S16_32_64@INVALID6)&&(sz !=`SZ_U8_S8_U16_S16_32_64@INVALID7)) :
 "Invalid sz field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
UNPREDICTABLE_BEHAVIOR_WARNING
 (((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS))) -> (((Sa_bank==0x0)||(Sa_bank==0x1)||(Sa_bank==0x2)||(Sa_bank==0x3)||(Sa_bank==0x4)||(Sa_bank==0x5)||(Sa_bank==0x6)||(Sa_bank==0x7))) :
 "Combination leads to unpredictable behavior"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((ad == `AdMode@ISL))) -> (((Sa_bank==0x0)||(Sa_bank==0x1)||(Sa_bank==0x2)||(Sa_bank==0x3)||(Sa_bank==0x4)||(Sa_bank==0x5)||(Sa_bank==0x6)||(Sa_bank==0x7)||(Sa_bank==0x8)||(Sa_bank==0x9)||(Sa_bank==0xa)||(Sa_bank==0xb)||(Sa_bank==0xc)||(Sa_bank==0xd)||(Sa_bank==0xe))) :
 "Disallowed specification: LDC.ISL cannot have a bank greater than 14"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_INVALID_CONST_ADDR_LDC)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Sa_bank))+(1<<INDEX(Ra))+(1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_CONSTANT_ADDRESS);

PREDICATES
 IDEST_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_UNORDERED ;

OPCODES
        LDCmio_pipe =  0b101110000010;
        LDC =  0b101110000010;

ENCODING
!ldc__RaNonRZ_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_75_73_sz=sz;
BITS_2_79_78_rnd=ad;
BITS_8_23_16_Rd=Rd;

BITS_8_31_24_Ra=*Ra;
BITS_5_58_54_Sb_bank,BITS_16_53_38_Sa_addr =  ConstBankAddress0(Sa_bank,Ra_offset);
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "ldg__sImmOffset"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /COP("EN"):cop /SIZE3("32"):sz /SEM("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private
Predicate("PT"):Pu
','Register:Rd
',' [ NonZeroRegister:Ra + SImm(24/0)*:Ra_offset ]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rd)+((Rd)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((e == `E@E))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((e == `E@E))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((e == `E@E))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_INVALID_ADDR_SPACE)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GLOBAL_ADDRESS);

PREDICATES
 IDEST_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU_UNORDERED_WR ;

OPCODES
        LDGmio_pipe =  0b1110000001;
        LDG =  0b1110000001;

ENCODING
!ldg__sImmOffset_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_1_87_87_cas=0;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "ldg__uImmOffset"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /COP("EN"):cop /SIZE3("32"):sz /SEM("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private
Predicate("PT"):Pu
','Register:Rd
',' [ ZeroRegister("RZ"):Ra + UImm(24/0)*:Ra_offset ]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)==`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rd)+((Rd)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_INVALID_ADDR_SPACE)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GLOBAL_ADDRESS);

PREDICATES
 IDEST_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU_UNORDERED_WR ;

OPCODES
        LDGmio_pipe =  0b1110000001;
        LDG =  0b1110000001;

ENCODING
!ldg__uImmOffset_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_1_87_87_cas=0;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "ldg_weakonly__sImmOffset"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /COP("EN"):cop /SIZE3("32"):sz /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private
Predicate("PT"):Pu
','Register:Rd
',' [ NonZeroRegister:Ra + SImm(24/0)*:Ra_offset ]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rd)+((Rd)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((e == `E@E))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((e == `E@E))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((e == `E@E))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_INVALID_ADDR_SPACE)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GLOBAL_ADDRESS);

PREDICATES
 IDEST_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU_UNORDERED_WR ;

OPCODES
        LDGmio_pipe =  0b1110000001;
        LDG =  0b1110000001;

ENCODING
!ldg_weakonly__sImmOffset_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_1_87_87_cas=0;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "ldg_weakonly__uImmOffset"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /COP("EN"):cop /SIZE3("32"):sz /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private
Predicate("PT"):Pu
','Register:Rd
',' [ ZeroRegister("RZ"):Ra + UImm(24/0)*:Ra_offset ]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)==`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rd)+((Rd)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_INVALID_ADDR_SPACE)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GLOBAL_ADDRESS);

PREDICATES
 IDEST_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU_UNORDERED_WR ;

OPCODES
        LDGmio_pipe =  0b1110000001;
        LDG =  0b1110000001;

ENCODING
!ldg_weakonly__uImmOffset_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_1_87_87_cas=0;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "ldg_zd__sImmOffset"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /COP("EN"):cop /SIZE3("32"):sz /SEM("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private /ZDONLY:zd
Predicate:Pu
','Register:Rd
',' [ NonZeroRegister:Ra + SImm(24/0)*:Ra_offset ]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rd)+((Rd)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((e == `E@E))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((e == `E@E))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((e == `E@E))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_INVALID_ADDR_SPACE)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GLOBAL_ADDRESS);

PREDICATES
 IDEST_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU_UNORDERED_WR ;

OPCODES
        LDGmio_pipe =  0b1110000001;
        LDG =  0b1110000001;

ENCODING
!ldg_zd__sImmOffset_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_1_87_87_cas=*zd;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "ldg_zd__uImmOffset"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /COP("EN"):cop /SIZE3("32"):sz /SEM("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private /ZDONLY:zd
Predicate:Pu
','Register:Rd
',' [ ZeroRegister("RZ"):Ra + UImm(24/0)*:Ra_offset ]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)==`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rd)+((Rd)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_INVALID_ADDR_SPACE)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GLOBAL_ADDRESS);

PREDICATES
 IDEST_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU_UNORDERED_WR ;

OPCODES
        LDGmio_pipe =  0b1110000001;
        LDG =  0b1110000001;

ENCODING
!ldg_zd__uImmOffset_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_1_87_87_cas=*zd;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "ldg_weakonly_zd__sImmOffset"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /COP("EN"):cop /SIZE3("32"):sz /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private /ZDONLY:zd
Predicate:Pu
','Register:Rd
',' [ NonZeroRegister:Ra + SImm(24/0)*:Ra_offset ]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rd)+((Rd)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((e == `E@E))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((e == `E@E))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((e == `E@E))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_INVALID_ADDR_SPACE)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GLOBAL_ADDRESS);

PREDICATES
 IDEST_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU_UNORDERED_WR ;

OPCODES
        LDGmio_pipe =  0b1110000001;
        LDG =  0b1110000001;

ENCODING
!ldg_weakonly_zd__sImmOffset_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_1_87_87_cas=*zd;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "ldg_weakonly_zd__uImmOffset"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /COP("EN"):cop /SIZE3("32"):sz /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private /ZDONLY:zd
Predicate:Pu
','Register:Rd
',' [ ZeroRegister("RZ"):Ra + UImm(24/0)*:Ra_offset ]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)==`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rd)+((Rd)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_INVALID_ADDR_SPACE)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GLOBAL_ADDRESS);

PREDICATES
 IDEST_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU_UNORDERED_WR ;

OPCODES
        LDGmio_pipe =  0b1110000001;
        LDG =  0b1110000001;

ENCODING
!ldg_weakonly_zd__uImmOffset_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_1_87_87_cas=*zd;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "ldl__sImmOffset"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /COP("EN"):cop /SZ_U8_S8_U16_S16_32_64_128("32"):sz
Register:Rd
',' [ NonZeroRegister:Ra + SImm(24/0)*:Ra_offset ]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`SZ_U8_S8_U16_S16_32_64_128@INVALID7)) :
 "Invalid sz field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"128"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"128"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_LOCAL_ADDRESS);

PREDICATES
 IDEST_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_AGU_UNORDERED_WR ;

OPCODES
        LDLmio_pipe =  0b100110000011;
        LDL =  0b100110000011;

ENCODING
!ldl__sImmOffset_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "ldl__uImmOffset"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /COP("EN"):cop /SZ_U8_S8_U16_S16_32_64_128("32"):sz
Register:Rd
',' [ ZeroRegister("RZ"):Ra + UImm(24/0)*:Ra_offset ]
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`SZ_U8_S8_U16_S16_32_64_128@INVALID7)) :
 "Invalid sz field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)==`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"128"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"128"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_LOCAL_ADDRESS);

PREDICATES
 IDEST_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_AGU_UNORDERED_WR ;

OPCODES
        LDLmio_pipe =  0b100110000011;
        LDL =  0b100110000011;

ENCODING
!ldl__uImmOffset_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "membar_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /MEMBAR_SEM("nomembar_sem"):sem /MEMBAR_SCO:sco /MEMBAR_MMIO("nomembar_mmio"):mmio
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((sem !=`MEMBAR_SEM@INVALID3)) :
 "Invalid sem field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sco !=`MEMBAR_SCO@INVALID4)&&(sco !=`MEMBAR_SCO@INVALID6)&&(sco !=`MEMBAR_SCO@INVALID7)) :
 "Invalid sco field value"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 5 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_UNORDERED ;

OPCODES
        MEMBARmio_pipe =  0b100110010010;
        MEMBAR =  0b100110010010;

ENCODING
!membar__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_80_79_sem=sem;
BITS_3_78_76_icmp=sco;
BITS_1_72_72_e=mmio;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "red__RaRZ"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /RedOp:op /COP("EN"):cop /REDATOMSIZE("U32"):sz /SEM_WEAK_STRONG("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private
 [ ZeroRegister("RZ"):Ra + UImm(24/0)*:Ra_offset ]
','Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`REDATOMSIZE@INVALID7)) :
 "Invalid sz field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sem !=`SEM_WEAK_STRONG@INVALID0)&&(sem !=`SEM_WEAK_STRONG@INVALID3)) :
 "Invalid sem field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)==`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F64.RN))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F64.RN))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `RedOp@ADD))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32")||(sz == `REDATOMSIZE@S32)||(sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@F32.FTZ.RN)||(sz == `REDATOMSIZE@F16x2.RN)||(sz == `REDATOMSIZE@F64.RN))) :
 "Invalid instruction combination ( rule name: ADD)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `RedOp@MIN)||(op == `RedOp@MAX))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32")||(sz == `REDATOMSIZE@S32)||(sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F16x2.RN))) :
 "Invalid instruction combination ( rule name: MIN_MAX)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `RedOp@DEC)||(op == `RedOp@INC))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32"))) :
 "Invalid instruction combination ( rule name: INC_DEC)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `RedOp@AND)||(op == `RedOp@XOR)||(op == `RedOp@OR))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32")||(sz == `REDATOMSIZE@S32)||(sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64"))) :
 "Invalid instruction combination ( rule name: AND_OR_XOR)"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_INVALID_ADDR_SPACE)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GLOBAL_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        REDmio_pipe =  0b100110001110;
        RED =  0b100110001110;

ENCODING
!red__RaRZ_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_3_89_87_Pp=op;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "red__RaNonRZ"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /RedOp:op /COP("EN"):cop /REDATOMSIZE("U32"):sz /SEM_WEAK_STRONG("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private
 [ NonZeroRegister:Ra + SImm(24/0)*:Ra_offset ]
','Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`REDATOMSIZE@INVALID7)) :
 "Invalid sz field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sem !=`SEM_WEAK_STRONG@INVALID0)&&(sem !=`SEM_WEAK_STRONG@INVALID3)) :
 "Invalid sem field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F64.RN))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F64.RN))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((e == `E@E))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((e == `E@E))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((e == `E@E))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `RedOp@ADD))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32")||(sz == `REDATOMSIZE@S32)||(sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@F32.FTZ.RN)||(sz == `REDATOMSIZE@F16x2.RN)||(sz == `REDATOMSIZE@F64.RN))) :
 "Invalid instruction combination ( rule name: ADD)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `RedOp@MIN)||(op == `RedOp@MAX))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32")||(sz == `REDATOMSIZE@S32)||(sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F16x2.RN))) :
 "Invalid instruction combination ( rule name: MIN_MAX)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `RedOp@DEC)||(op == `RedOp@INC))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32"))) :
 "Invalid instruction combination ( rule name: INC_DEC)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `RedOp@AND)||(op == `RedOp@XOR)||(op == `RedOp@OR))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32")||(sz == `REDATOMSIZE@S32)||(sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64"))) :
 "Invalid instruction combination ( rule name: AND_OR_XOR)"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_INVALID_ADDR_SPACE)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GLOBAL_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        REDmio_pipe =  0b100110001110;
        RED =  0b100110001110;

ENCODING
!red__RaNonRZ_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_3_89_87_Pp=op;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "red_weakonly__RaRZ"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /RedOp:op /COP("EN"):cop /REDATOMSIZE("U32"):sz /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private
 [ ZeroRegister("RZ"):Ra + UImm(24/0)*:Ra_offset ]
','Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`REDATOMSIZE@INVALID7)) :
 "Invalid sz field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)==`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F64.RN))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F64.RN))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `RedOp@ADD))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32")||(sz == `REDATOMSIZE@S32)||(sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@F32.FTZ.RN)||(sz == `REDATOMSIZE@F16x2.RN)||(sz == `REDATOMSIZE@F64.RN))) :
 "Invalid instruction combination ( rule name: ADD)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `RedOp@MIN)||(op == `RedOp@MAX))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32")||(sz == `REDATOMSIZE@S32)||(sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F16x2.RN))) :
 "Invalid instruction combination ( rule name: MIN_MAX)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `RedOp@DEC)||(op == `RedOp@INC))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32"))) :
 "Invalid instruction combination ( rule name: INC_DEC)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `RedOp@AND)||(op == `RedOp@XOR)||(op == `RedOp@OR))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32")||(sz == `REDATOMSIZE@S32)||(sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64"))) :
 "Invalid instruction combination ( rule name: AND_OR_XOR)"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_INVALID_ADDR_SPACE)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GLOBAL_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        REDmio_pipe =  0b100110001110;
        RED =  0b100110001110;

ENCODING
!red_weakonly__RaRZ_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_3_89_87_Pp=op;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "red_weakonly__RaNonRZ"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /RedOp:op /COP("EN"):cop /REDATOMSIZE("U32"):sz /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private
 [ NonZeroRegister:Ra + SImm(24/0)*:Ra_offset ]
','Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`REDATOMSIZE@INVALID7)) :
 "Invalid sz field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F64.RN))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F64.RN))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((e == `E@E))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((e == `E@E))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((e == `E@E))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `RedOp@ADD))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32")||(sz == `REDATOMSIZE@S32)||(sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@F32.FTZ.RN)||(sz == `REDATOMSIZE@F16x2.RN)||(sz == `REDATOMSIZE@F64.RN))) :
 "Invalid instruction combination ( rule name: ADD)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `RedOp@MIN)||(op == `RedOp@MAX))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32")||(sz == `REDATOMSIZE@S32)||(sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64")||(sz == `REDATOMSIZE@S64)||(sz == `REDATOMSIZE@F16x2.RN))) :
 "Invalid instruction combination ( rule name: MIN_MAX)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `RedOp@DEC)||(op == `RedOp@INC))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32"))) :
 "Invalid instruction combination ( rule name: INC_DEC)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `RedOp@AND)||(op == `RedOp@XOR)||(op == `RedOp@OR))) -> (((sz == `REDATOMSIZE@U32)||(sz == `REDATOMSIZE@"32")||(sz == `REDATOMSIZE@S32)||(sz == `REDATOMSIZE@U64)||(sz == `REDATOMSIZE@"64"))) :
 "Invalid instruction combination ( rule name: AND_OR_XOR)"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_INVALID_ADDR_SPACE)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GLOBAL_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (((sz==`SQInteger@"32")*32) + ((sz==`SQInteger@S32)*32) + ((sz==`SQInteger@"64")*64) + ((sz==`SQInteger@F32)*32) + ((sz==`SQInteger@"F16x2.FTZ.RN")*32) + ((sz==`SQInteger@S64)*64) + ((sz==`SQInteger@"F64.RN")*64) + ((sz==`SQInteger@INVALIDATOMICSIZE7)*1));
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        REDmio_pipe =  0b100110001110;
        RED =  0b100110001110;

ENCODING
!red_weakonly__RaNonRZ_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_3_89_87_Pp=op;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "shfl__RRR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /Shflmd:shflmd
Predicate:Pu
','Register:Rd
','Register:Ra
','Register:Rb
','Register:Rc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SHFL_Rb_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        SHFLmio_pipe =  0b1110001001;
        SHFL =  0b1110001001;

ENCODING
!shfl__RRR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_59_58_shflmd=shflmd;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "shfl__RIR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /Shflmd:shflmd
Predicate:Pu
','Register:Rd
','Register:Ra
','UImm(5)*:Sb
','Register:Rc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SHFL_Imm_Rc ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 5;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        SHFLmio_pipe =  0b100110001001;
        SHFL =  0b100110001001;

ENCODING
!shfl__RIR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_59_58_shflmd=shflmd;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_5_57_53_Sb=Sb;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "shfl__RRI"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /Shflmd:shflmd
Predicate:Pu
','Register:Rd
','Register:Ra
','Register:Rb
','UImm(13)*:Sc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SHFL_Rb_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 13;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        SHFLmio_pipe =  0b10110001001;
        SHFL =  0b10110001001;

ENCODING
!shfl__RRI_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_59_58_shflmd=shflmd;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_13_52_40_Sc=Sc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "shfl__RII"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /Shflmd:shflmd
Predicate:Pu
','Register:Rd
','Register:Ra
','UImm(5)*:Sb
','UImm(13)*:Sc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SHFL_Imm_Imm ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 5;
 ISRC_C_SIZE = 13;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        SHFLmio_pipe =  0b111110001001;
        SHFL =  0b111110001001;

ENCODING
!shfl__RII_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_59_58_shflmd=shflmd;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_5_57_53_Sb=Sb;
BITS_13_52_40_Sc=Sc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "stg__sImmOffset"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /COP("EN"):cop /SIZE3("32"):sz /SEM_WEAK_STRONG_MMIO("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private
 [ NonZeroRegister:Ra + SImm(24/0)*:Ra_offset ]
','Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sem !=`SEM_WEAK_STRONG_MMIO@INVALID0)) :
 "Invalid sem field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((e == `E@E))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((e == `E@E))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((e == `E@E))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_INVALID_ADDR_SPACE)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GLOBAL_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        STGmio_pipe =  0b1110000110;
        STG =  0b1110000110;

ENCODING
!stg__sImmOffset_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "stg__uImmOffset"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /COP("EN"):cop /SIZE3("32"):sz /SEM_WEAK_STRONG_MMIO("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private
 [ ZeroRegister("RZ"):Ra + UImm(24/0)*:Ra_offset ]
','Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sem !=`SEM_WEAK_STRONG_MMIO@INVALID0)) :
 "Invalid sem field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)==`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_INVALID_ADDR_SPACE)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GLOBAL_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        STGmio_pipe =  0b1110000110;
        STG =  0b1110000110;

ENCODING
!stg__uImmOffset_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "stg_weakonly__sImmOffset"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /COP("EN"):cop /SIZE3("32"):sz /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private
 [ NonZeroRegister:Ra + SImm(24/0)*:Ra_offset ]
','Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((e == `E@E))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((e == `E@E))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((e == `E@E))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_INVALID_ADDR_SPACE)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GLOBAL_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        STGmio_pipe =  0b1110000110;
        STG =  0b1110000110;

ENCODING
!stg_weakonly__sImmOffset_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "stg_weakonly__uImmOffset"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /E("noe"):e /COP("EN"):cop /SIZE3("32"):sz /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private
 [ ZeroRegister("RZ"):Ra + UImm(24/0)*:Ra_offset ]
','Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)==`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"64"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SIZE3@"128")||(sz == `SIZE3@U.128))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_INVALID_ADDR_SPACE)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GLOBAL_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = e ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        STGmio_pipe =  0b1110000110;
        STG =  0b1110000110;

ENCODING
!stg_weakonly__uImmOffset_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=e;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "stl__sImmOffset"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /COP("EN"):cop /SZ_U8_S8_U16_S16_32_64_128("32"):sz
 [ NonZeroRegister:Ra + SImm(24/0)*:Ra_offset ]
','Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`SZ_U8_S8_U16_S16_32_64_128@INVALID7)) :
 "Invalid sz field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"64"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"64"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"128"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"128"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_LOCAL_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        STLmio_pipe =  0b1110000111;
        STL =  0b1110000111;

ENCODING
!stl__sImmOffset_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "stl__uImmOffset"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /COP("EN"):cop /SZ_U8_S8_U16_S16_32_64_128("32"):sz
 [ ZeroRegister("RZ"):Ra + UImm(24/0)*:Ra_offset ]
','Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`SZ_U8_S8_U16_S16_32_64_128@INVALID7)) :
 "Invalid sz field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)==`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"64"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"64"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"128"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"128"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra)) + (1<<INDEX(Ra_offset));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_LOCAL_ADDRESS);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_AGU ;

OPCODES
        STLmio_pipe =  0b1110000111;
        STL =  0b1110000111;

ENCODING
!stl__uImmOffset_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_8_31_24_Ra=*Ra;
BITS_24_63_40_Ra_offset=Ra_offset;
BITS_8_39_32_Rb=Rb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "b2r__BAR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BarmdBAR("BAR"):mode
Register:Rd
','UImm(4)*:barname
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS)) :
 "Can only be used with CS"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_CS)+0 ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(barname));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 4;
 VIRTUAL_QUEUE = $VQ_ADU ;

OPCODES
        B2Rmio_pipe =  0b1100011100;
        B2R =  0b1100011100;

ENCODING
!b2r__BAR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_79_78_rnd=*mode;
BITS_8_23_16_Rd=Rd;
BITS_4_57_54_barname=barname;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "b2r__WARP"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BarmdWARP:mode
Register:Rd
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS)) :
 "Can only be used with CS"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_CS)+0 ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_ADU ;

OPCODES
        B2Rmio_pipe =  0b1100011100;
        B2R =  0b1100011100;

ENCODING
!b2r__WARP_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_79_78_rnd=*mode;
BITS_8_23_16_Rd=Rd;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "b2r__RESULT"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BarmdRESULT:mode
Register:Rd
','Predicate("PT"):Pu
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS)) :
 "Can only be used with CS"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_CS)+0 ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_ADU ;

OPCODES
        B2Rmio_pipe =  0b1100011100;
        B2R =  0b1100011100;

ENCODING
!b2r__RESULT_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_79_78_rnd=*mode;
BITS_8_23_16_Rd=Rd;
BITS_3_83_81_Pu=Pu;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "bar__SYNC_RR_RR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BarSync:barmode
Register:Rb
','Register:Rc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS)) :
 "Can only be used with CS"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rb)==(Rc)) :
 "Rb and Rc must be the same"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_ILLEGAL_INSTR_PARAM)+(1<<IERROR_ILLEGAL_INSTR_PARAM2)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 5 ;
 SIDL_NAME = `SIDL_NAMES@BAR_R ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_CS)+0 ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_ADU ;

OPCODES
        BARmio_pipe =  0b1100011101;
        BAR =  0b1100011101;

ENCODING
!bar__SYNC_RR_RR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_79_77_Pq=*barmode;
BITS_1_80_80_ftz=0;
BITS_8_39_32_Rb=IDENTICAL(Rb,Rc);
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "bar__SYNC_dfrBlk_RR_RR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BarSync:barmode /DEFER_BLOCKINGONLY:defer_blocking
Register:Rb
','Register:Rc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS)) :
 "Can only be used with CS"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rb)==(Rc)) :
 "Rb and Rc must be the same"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_ILLEGAL_INSTR_PARAM)+(1<<IERROR_ILLEGAL_INSTR_PARAM2)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@BAR_R ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_CS)+0 ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_ADU ;

OPCODES
        BARmio_pipe =  0b1100011101;
        BAR =  0b1100011101;

ENCODING
!bar__SYNC_dfrBlk_RR_RR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_79_77_Pq=*barmode;
BITS_1_80_80_ftz=*defer_blocking;
BITS_8_39_32_Rb=IDENTICAL(Rb,Rc);
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "bar__ARV_RR_RR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BarArv:barmode
Register:Rb
','Register:Rc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS)) :
 "Can only be used with CS"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rb)==(Rc)) :
 "Rb and Rc must be the same"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_ILLEGAL_INSTR_PARAM)+(1<<IERROR_ILLEGAL_INSTR_PARAM2)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 5 ;
 SIDL_NAME = `SIDL_NAMES@BAR_R ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_CS)+0 ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_ADU ;

OPCODES
        BARmio_pipe =  0b1100011101;
        BAR =  0b1100011101;

ENCODING
!bar__ARV_RR_RR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_79_77_Pq=*barmode;
BITS_1_80_80_ftz=0;
BITS_8_39_32_Rb=IDENTICAL(Rb,Rc);
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "bar__RED_RR_RR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BarRED:barmode /Red:op
Register:Rb
','Register:Rc
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS)) :
 "Can only be used with CS"
ILLEGAL_INSTR_ENCODING_ERROR
 ((op !=`Red@INVALID3)) :
 "Invalid op field value"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rb)==(Rc)) :
 "Rb and Rc must be the same"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_ILLEGAL_INSTR_PARAM)+(1<<IERROR_ILLEGAL_INSTR_PARAM2)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 5 ;
 SIDL_NAME = `SIDL_NAMES@BAR_R ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_CS)+0 ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_ADU ;

OPCODES
        BARmio_pipe =  0b1100011101;
        BAR =  0b1100011101;

ENCODING
!bar__RED_RR_RR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_79_77_Pq=*barmode;
BITS_2_75_74_iswzA=op;
BITS_1_80_80_ftz=0;
BITS_8_39_32_Rb=IDENTICAL(Rb,Rc);
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "bar__RED_dfrBlk_RR_RR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BarRED:barmode /Red:op /DEFER_BLOCKINGONLY:defer_blocking
Register:Rb
','Register:Rc
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS)) :
 "Can only be used with CS"
ILLEGAL_INSTR_ENCODING_ERROR
 ((op !=`Red@INVALID3)) :
 "Invalid op field value"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rb)==(Rc)) :
 "Rb and Rc must be the same"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_ILLEGAL_INSTR_PARAM)+(1<<IERROR_ILLEGAL_INSTR_PARAM2)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@BAR_R ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_CS)+0 ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_ADU ;

OPCODES
        BARmio_pipe =  0b1100011101;
        BAR =  0b1100011101;

ENCODING
!bar__RED_dfrBlk_RR_RR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_79_77_Pq=*barmode;
BITS_2_75_74_iswzA=op;
BITS_1_80_80_ftz=*defer_blocking;
BITS_8_39_32_Rb=IDENTICAL(Rb,Rc);
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "bar__SCAN_RR_RR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BarSCAN:barmode
Register:Rb
','Register:Rc
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS)) :
 "Can only be used with CS"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rb)==(Rc)) :
 "Rb and Rc must be the same"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_ILLEGAL_INSTR_PARAM)+(1<<IERROR_ILLEGAL_INSTR_PARAM2)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 5 ;
 SIDL_NAME = `SIDL_NAMES@BAR_R ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_CS)+0 ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_ADU ;

OPCODES
        BARmio_pipe =  0b1100011101;
        BAR =  0b1100011101;

ENCODING
!bar__SCAN_RR_RR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_79_77_Pq=*barmode;
BITS_1_80_80_ftz=0;
BITS_8_39_32_Rb=IDENTICAL(Rb,Rc);
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "bar__SYNC_RI_optionalCount_RI"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BarSync:barmode
Register:Rb
','UImm(12/0)*:Sc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS)) :
 "Can only be used with CS"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_ILLEGAL_INSTR_PARAM)+(1<<IERROR_ILLEGAL_INSTR_PARAM2)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 5 ;
 SIDL_NAME = `SIDL_NAMES@BAR_R_Imm ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_CS)+0 ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 12;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_ADU ;

OPCODES
        BARmio_pipe =  0b10100011101;
        BAR =  0b10100011101;

ENCODING
!bar__SYNC_RI_optionalCount_RI_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_79_77_Pq=*barmode;
BITS_1_80_80_ftz=0;
BITS_8_39_32_Rb=Rb;
BITS_12_53_42_Sc=Sc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "bar__SYNC_dfrBlk_RI_optionalCount_RI"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BarSync:barmode /DEFER_BLOCKINGONLY:defer_blocking
Register:Rb
','UImm(12/0)*:Sc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS)) :
 "Can only be used with CS"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_ILLEGAL_INSTR_PARAM)+(1<<IERROR_ILLEGAL_INSTR_PARAM2)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@BAR_R_Imm ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_CS)+0 ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 12;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_ADU ;

OPCODES
        BARmio_pipe =  0b10100011101;
        BAR =  0b10100011101;

ENCODING
!bar__SYNC_dfrBlk_RI_optionalCount_RI_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_79_77_Pq=*barmode;
BITS_1_80_80_ftz=*defer_blocking;
BITS_8_39_32_Rb=Rb;
BITS_12_53_42_Sc=Sc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "bar__RED_RI_optionalCount_RI"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BarRED:barmode /Red:op
Register:Rb
','UImm(12/0)*:Sc
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS)) :
 "Can only be used with CS"
ILLEGAL_INSTR_ENCODING_ERROR
 ((op !=`Red@INVALID3)) :
 "Invalid op field value"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_ILLEGAL_INSTR_PARAM)+(1<<IERROR_ILLEGAL_INSTR_PARAM2)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 5 ;
 SIDL_NAME = `SIDL_NAMES@BAR_R_Imm ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_CS)+0 ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 12;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_ADU ;

OPCODES
        BARmio_pipe =  0b10100011101;
        BAR =  0b10100011101;

ENCODING
!bar__RED_RI_optionalCount_RI_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_79_77_Pq=*barmode;
BITS_2_75_74_iswzA=op;
BITS_1_80_80_ftz=0;
BITS_8_39_32_Rb=Rb;
BITS_12_53_42_Sc=Sc;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "bar__RED_dfrBlk_RI_optionalCount_RI"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BarRED:barmode /Red:op /DEFER_BLOCKINGONLY:defer_blocking
Register:Rb
','UImm(12/0)*:Sc
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS)) :
 "Can only be used with CS"
ILLEGAL_INSTR_ENCODING_ERROR
 ((op !=`Red@INVALID3)) :
 "Invalid op field value"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_ILLEGAL_INSTR_PARAM)+(1<<IERROR_ILLEGAL_INSTR_PARAM2)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@BAR_R_Imm ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_CS)+0 ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 12;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_ADU ;

OPCODES
        BARmio_pipe =  0b10100011101;
        BAR =  0b10100011101;

ENCODING
!bar__RED_dfrBlk_RI_optionalCount_RI_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_79_77_Pq=*barmode;
BITS_2_75_74_iswzA=op;
BITS_1_80_80_ftz=*defer_blocking;
BITS_8_39_32_Rb=Rb;
BITS_12_53_42_Sc=Sc;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "bar__ARV_RI_RI"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BarArv:barmode
Register:Rb
','UImm(12)*:Sc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS)) :
 "Can only be used with CS"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_ILLEGAL_INSTR_PARAM)+(1<<IERROR_ILLEGAL_INSTR_PARAM2)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 5 ;
 SIDL_NAME = `SIDL_NAMES@BAR_R_Imm ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_CS)+0 ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 12;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_ADU ;

OPCODES
        BARmio_pipe =  0b10100011101;
        BAR =  0b10100011101;

ENCODING
!bar__ARV_RI_RI_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_79_77_Pq=*barmode;
BITS_1_80_80_ftz=0;
BITS_8_39_32_Rb=Rb;
BITS_12_53_42_Sc=Sc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "bar__SCAN_RI_RI"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BarSCAN:barmode
Register:Rb
','UImm(12)*:Sc
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS)) :
 "Can only be used with CS"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_ILLEGAL_INSTR_PARAM)+(1<<IERROR_ILLEGAL_INSTR_PARAM2)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 5 ;
 SIDL_NAME = `SIDL_NAMES@BAR_R_Imm ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_CS)+0 ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 12;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_ADU ;

OPCODES
        BARmio_pipe =  0b10100011101;
        BAR =  0b10100011101;

ENCODING
!bar__SCAN_RI_RI_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_79_77_Pq=*barmode;
BITS_1_80_80_ftz=0;
BITS_8_39_32_Rb=Rb;
BITS_12_53_42_Sc=Sc;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "bar__SYNC_IR_optionalCount_IR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BarSync:barmode
UImm(4)*:Sb
','Register("RZ"):Rc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS)) :
 "Can only be used with CS"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_ILLEGAL_INSTR_PARAM)+(1<<IERROR_ILLEGAL_INSTR_PARAM2)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 5 ;
 SIDL_NAME = `SIDL_NAMES@BAR_Imm_R ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_CS)+0 ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 4;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_ADU ;

OPCODES
        BARmio_pipe =  0b100100011101;
        BAR =  0b100100011101;

ENCODING
!bar__SYNC_IR_optionalCount_IR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_79_77_Pq=*barmode;
BITS_1_80_80_ftz=0;
BITS_4_57_54_barname=Sb;
BITS_8_39_32_Rb=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "bar__SYNC_dfrBlk_IR_optionalCount_IR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BarSync:barmode /DEFER_BLOCKINGONLY:defer_blocking
UImm(4)*:Sb
','Register("RZ"):Rc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS)) :
 "Can only be used with CS"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_ILLEGAL_INSTR_PARAM)+(1<<IERROR_ILLEGAL_INSTR_PARAM2)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@BAR_Imm_R ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_CS)+0 ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 4;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_ADU ;

OPCODES
        BARmio_pipe =  0b100100011101;
        BAR =  0b100100011101;

ENCODING
!bar__SYNC_dfrBlk_IR_optionalCount_IR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_79_77_Pq=*barmode;
BITS_1_80_80_ftz=*defer_blocking;
BITS_4_57_54_barname=Sb;
BITS_8_39_32_Rb=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "bar__RED_IR_optionalCount_IR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BarRED:barmode /Red:op
UImm(4)*:Sb
','Register("RZ"):Rc
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS)) :
 "Can only be used with CS"
ILLEGAL_INSTR_ENCODING_ERROR
 ((op !=`Red@INVALID3)) :
 "Invalid op field value"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_ILLEGAL_INSTR_PARAM)+(1<<IERROR_ILLEGAL_INSTR_PARAM2)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 5 ;
 SIDL_NAME = `SIDL_NAMES@BAR_Imm_R ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_CS)+0 ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 4;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_ADU ;

OPCODES
        BARmio_pipe =  0b100100011101;
        BAR =  0b100100011101;

ENCODING
!bar__RED_IR_optionalCount_IR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_79_77_Pq=*barmode;
BITS_2_75_74_iswzA=op;
BITS_1_80_80_ftz=0;
BITS_4_57_54_barname=Sb;
BITS_8_39_32_Rb=Rc;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "bar__RED_dfrBlk_IR_optionalCount_IR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BarRED:barmode /Red:op /DEFER_BLOCKINGONLY:defer_blocking
UImm(4)*:Sb
','Register("RZ"):Rc
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS)) :
 "Can only be used with CS"
ILLEGAL_INSTR_ENCODING_ERROR
 ((op !=`Red@INVALID3)) :
 "Invalid op field value"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_ILLEGAL_INSTR_PARAM)+(1<<IERROR_ILLEGAL_INSTR_PARAM2)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@BAR_Imm_R ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_CS)+0 ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 4;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_ADU ;

OPCODES
        BARmio_pipe =  0b100100011101;
        BAR =  0b100100011101;

ENCODING
!bar__RED_dfrBlk_IR_optionalCount_IR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_79_77_Pq=*barmode;
BITS_2_75_74_iswzA=op;
BITS_1_80_80_ftz=*defer_blocking;
BITS_4_57_54_barname=Sb;
BITS_8_39_32_Rb=Rc;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "bar__ARV_IR_IR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BarArv:barmode
UImm(4)*:Sb
','Register:Rc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS)) :
 "Can only be used with CS"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_ILLEGAL_INSTR_PARAM)+(1<<IERROR_ILLEGAL_INSTR_PARAM2)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 5 ;
 SIDL_NAME = `SIDL_NAMES@BAR_Imm_R ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_CS)+0 ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 4;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_ADU ;

OPCODES
        BARmio_pipe =  0b100100011101;
        BAR =  0b100100011101;

ENCODING
!bar__ARV_IR_IR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_79_77_Pq=*barmode;
BITS_1_80_80_ftz=0;
BITS_4_57_54_barname=Sb;
BITS_8_39_32_Rb=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "bar__SCAN_IR_IR"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BarSCAN:barmode
UImm(4)*:Sb
','Register:Rc
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS)) :
 "Can only be used with CS"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_ILLEGAL_INSTR_PARAM)+(1<<IERROR_ILLEGAL_INSTR_PARAM2)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 5 ;
 SIDL_NAME = `SIDL_NAMES@BAR_Imm_R ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_CS)+0 ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 4;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_ADU ;

OPCODES
        BARmio_pipe =  0b100100011101;
        BAR =  0b100100011101;

ENCODING
!bar__SCAN_IR_IR_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_79_77_Pq=*barmode;
BITS_1_80_80_ftz=0;
BITS_4_57_54_barname=Sb;
BITS_8_39_32_Rb=Rc;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "bar__SYNC_II_optionalCount_II"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BarSync:barmode
UImm(4)*:Sb
','UImm(12/0)*:Sc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS)) :
 "Can only be used with CS"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_ILLEGAL_INSTR_PARAM)+(1<<IERROR_ILLEGAL_INSTR_PARAM2)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 5 ;
 SIDL_NAME = `SIDL_NAMES@BAR_Imm_Imm ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_CS)+0 ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 4;
 ISRC_C_SIZE = 12;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_ADU ;

OPCODES
        BARmio_pipe =  0b101100011101;
        BAR =  0b101100011101;

ENCODING
!bar__SYNC_II_optionalCount_II_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_79_77_Pq=*barmode;
BITS_1_80_80_ftz=0;
BITS_4_57_54_barname=Sb;
BITS_12_53_42_Sc=Sc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "bar__SYNC_dfrBlk_II_optionalCount_II"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BarSync:barmode /DEFER_BLOCKINGONLY:defer_blocking
UImm(4)*:Sb
','UImm(12/0)*:Sc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS)) :
 "Can only be used with CS"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_ILLEGAL_INSTR_PARAM)+(1<<IERROR_ILLEGAL_INSTR_PARAM2)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@BAR_Imm_Imm ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_CS)+0 ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 4;
 ISRC_C_SIZE = 12;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_ADU ;

OPCODES
        BARmio_pipe =  0b101100011101;
        BAR =  0b101100011101;

ENCODING
!bar__SYNC_dfrBlk_II_optionalCount_II_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_79_77_Pq=*barmode;
BITS_1_80_80_ftz=*defer_blocking;
BITS_4_57_54_barname=Sb;
BITS_12_53_42_Sc=Sc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "bar__RED_II_optionalCount_II"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BarRED:barmode /Red:op
UImm(4)*:Sb
','UImm(12/0)*:Sc
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS)) :
 "Can only be used with CS"
ILLEGAL_INSTR_ENCODING_ERROR
 ((op !=`Red@INVALID3)) :
 "Invalid op field value"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_ILLEGAL_INSTR_PARAM)+(1<<IERROR_ILLEGAL_INSTR_PARAM2)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 5 ;
 SIDL_NAME = `SIDL_NAMES@BAR_Imm_Imm ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_CS)+0 ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 4;
 ISRC_C_SIZE = 12;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_ADU ;

OPCODES
        BARmio_pipe =  0b101100011101;
        BAR =  0b101100011101;

ENCODING
!bar__RED_II_optionalCount_II_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_79_77_Pq=*barmode;
BITS_2_75_74_iswzA=op;
BITS_1_80_80_ftz=0;
BITS_4_57_54_barname=Sb;
BITS_12_53_42_Sc=Sc;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "bar__RED_dfrBlk_II_optionalCount_II"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BarRED:barmode /Red:op /DEFER_BLOCKINGONLY:defer_blocking
UImm(4)*:Sb
','UImm(12/0)*:Sc
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS)) :
 "Can only be used with CS"
ILLEGAL_INSTR_ENCODING_ERROR
 ((op !=`Red@INVALID3)) :
 "Invalid op field value"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_ILLEGAL_INSTR_PARAM)+(1<<IERROR_ILLEGAL_INSTR_PARAM2)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@BAR_Imm_Imm ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_CS)+0 ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 4;
 ISRC_C_SIZE = 12;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_ADU ;

OPCODES
        BARmio_pipe =  0b101100011101;
        BAR =  0b101100011101;

ENCODING
!bar__RED_dfrBlk_II_optionalCount_II_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_79_77_Pq=*barmode;
BITS_2_75_74_iswzA=op;
BITS_1_80_80_ftz=*defer_blocking;
BITS_4_57_54_barname=Sb;
BITS_12_53_42_Sc=Sc;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "bar__ARV_II_II"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BarArv:barmode
UImm(4)*:Sb
','UImm(12)*:Sc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS)) :
 "Can only be used with CS"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_ILLEGAL_INSTR_PARAM)+(1<<IERROR_ILLEGAL_INSTR_PARAM2)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 5 ;
 SIDL_NAME = `SIDL_NAMES@BAR_Imm_Imm ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_CS)+0 ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 4;
 ISRC_C_SIZE = 12;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_ADU ;

OPCODES
        BARmio_pipe =  0b101100011101;
        BAR =  0b101100011101;

ENCODING
!bar__ARV_II_II_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_79_77_Pq=*barmode;
BITS_1_80_80_ftz=0;
BITS_4_57_54_barname=Sb;
BITS_12_53_42_Sc=Sc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "bar__SCAN_II_II"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BarSCAN:barmode
UImm(4)*:Sb
','UImm(12)*:Sc
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS)) :
 "Can only be used with CS"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_ILLEGAL_INSTR_PARAM)+(1<<IERROR_ILLEGAL_INSTR_PARAM2)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 5 ;
 SIDL_NAME = `SIDL_NAMES@BAR_Imm_Imm ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_CS)+0 ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Sb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Sc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 4;
 ISRC_C_SIZE = 12;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_ADU ;

OPCODES
        BARmio_pipe =  0b101100011101;
        BAR =  0b101100011101;

ENCODING
!bar__SCAN_II_II_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_79_77_Pq=*barmode;
BITS_1_80_80_ftz=0;
BITS_4_57_54_barname=Sb;
BITS_12_53_42_Sc=Sc;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "bar__SYNCALL_noSrc_II"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BarSYNCALL:barmode
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS)) :
 "Can only be used with CS"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_ILLEGAL_INSTR_PARAM)+(1<<IERROR_ILLEGAL_INSTR_PARAM2)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 5 ;
 SIDL_NAME = `SIDL_NAMES@BAR_Imm_Imm ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_CS)+0 ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 4;
 ISRC_C_SIZE = 12;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_ADU ;

OPCODES
        BARmio_pipe =  0b101100011101;
        BAR =  0b101100011101;

ENCODING
!bar__SYNCALL_noSrc_II_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_79_77_Pq=*barmode;
BITS_1_80_80_ftz=0;
BITS_4_57_54_barname=*0;
BITS_12_53_42_Sc=*0;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "bar__SYNCALL_dfrBlk_noSrc_II"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BarSYNCALL:barmode /DEFER_BLOCKINGONLY:defer_blocking
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS)) :
 "Can only be used with CS"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_ILLEGAL_INSTR_PARAM)+(1<<IERROR_ILLEGAL_INSTR_PARAM2)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@BAR_Imm_Imm ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_CS)+0 ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 4;
 ISRC_C_SIZE = 12;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_ADU ;

OPCODES
        BARmio_pipe =  0b101100011101;
        BAR =  0b101100011101;

ENCODING
!bar__SYNCALL_dfrBlk_noSrc_II_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_79_77_Pq=*barmode;
BITS_1_80_80_ftz=*defer_blocking;
BITS_4_57_54_barname=*0;
BITS_12_53_42_Sc=*0;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "depbar__noLE"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode BITSET(6/0x0000):scoreboard_list
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_1(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 4 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;

OPCODES
        DEPBARfe_pipe =  0b100100011010;
        DEPBAR =  0b100100011010;

ENCODING
!depbar__noLE_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_47_47_le=0;
BITS_6_37_32_scoreboard_list=scoreboard_list;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_1(batch_t,usched_info);



CLASS "depbar__LE"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LEONLY:le Scoreboard:sbidx ','UImm(6)*:cnt ','BITSET(6/0x0000):scoreboard_list
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((sbidx !=`Scoreboard@INVALID6)&&(sbidx !=`Scoreboard@INVALID7)) :
 "Invalid sbidx field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((scoreboard_list & (1 << sbidx)) == 0):
 "In DEPBAR.LE s, m, S, the scoreboard s cannot be in the set of scorboards S"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_1(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 4 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;

OPCODES
        DEPBARfe_pipe =  0b100100011010;
        DEPBAR =  0b100100011010;

ENCODING
!depbar__LE_unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_47_47_le=*le;
BITS_3_46_44_sbidx=sbidx;
BITS_6_43_38_cnt=cnt;
BITS_6_37_32_scoreboard_list=scoreboard_list;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_1(batch_t,usched_info);



ALTERNATE CLASS "depbar_all_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /ALLOnly:le
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_1(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 4 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;

OPCODES
        DEPBARfe_pipe =  0b100100011010;
        DEPBAR =  0b100100011010;

ENCODING
!depbar_all__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_47_47_le=*le;
BITS_6_37_32_scoreboard_list=*63;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=7;
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_1(batch_t,usched_info);



CLASS "cs2r_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /QInteger("64"):sz
Register:Rd
','SpecialRegister:SRa
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_1(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((sz == `QInteger@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `QInteger@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((sz == `QInteger@"64"))) -> (((((SRa)+((SRa)==`SpecialRegister@SRZ)) % 2) == 0)) :
 "Disallowed register"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(SRa));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);

PREDICATES
 IDEST_SIZE = sz ? 64 : 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;

OPCODES
        CS2Rint_pipe =  0b100000000101;
        CS2R =  0b100000000101;

ENCODING
!cs2r__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_80_80_ftz=sz;
BITS_8_23_16_Rd=Rd;
BITS_8_79_72_imm8=SRa;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_1(batch_t,usched_info);



ALTERNATE CLASS "csmtest_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /VOP:vtgmode
UImm(28)*:Sa
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_VSA)||(%SHADER_TYPE == $ST_VSB)||(%SHADER_TYPE == $ST_GS)||(%SHADER_TYPE == $ST_TS)||(%SHADER_TYPE == $ST_TI)) :
 "Can only be used with VS, GS, TS, TI"
ILLEGAL_INSTR_ENCODING_ERROR
 ((vtgmode !=`VOP@INVALID0)) :
 "Invalid vtgmode field value"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_1(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_GS)+(1<<ISHADER_TI)+(1<<ISHADER_TS)+(1<<ISHADER_VS)+0 ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Sa));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_VOTE_INDEX);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 28;

OPCODES
        CSMTESTfe_pipe =  0b100000001101;
        CSMTEST =  0b100000001101;

ENCODING
!csmtest__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_63_62_vtgmode=vtgmode;
BITS_3_78_76_icmp=0;
BITS_2_75_74_iswzA=0;
BITS_3_83_81_Pu=7;
BITS_3_86_84_cop=7;
BITS_28_59_32_Sa=Sa;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*0;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_1(batch_t,usched_info);



ALTERNATE CLASS "csmtest_cmp_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /VOP:vtgmode /CCMP_DIST:ccmp
Predicate:Pu
','UImm(28)*:Sa
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_VSA)||(%SHADER_TYPE == $ST_VSB)||(%SHADER_TYPE == $ST_GS)||(%SHADER_TYPE == $ST_TS)||(%SHADER_TYPE == $ST_TI)) :
 "Can only be used with VS, GS, TS, TI"
ILLEGAL_INSTR_ENCODING_ERROR
 ((vtgmode !=`VOP@INVALID0)) :
 "Invalid vtgmode field value"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_1(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_GS)+(1<<ISHADER_TI)+(1<<ISHADER_TS)+(1<<ISHADER_VS)+0 ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Sa));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_VOTE_INDEX);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 28;

OPCODES
        CSMTESTfe_pipe =  0b100000001101;
        CSMTEST =  0b100000001101;

ENCODING
!csmtest_cmp__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_63_62_vtgmode=vtgmode;
BITS_3_78_76_icmp=*ccmp;
BITS_2_75_74_iswzA=0;
BITS_3_83_81_Pu=*Pu;
BITS_3_86_84_cop=7;
BITS_28_59_32_Sa=Sa;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*0;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_1(batch_t,usched_info);



CLASS "csmtest_bop_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /VOP:vtgmode /CCMP_DIST:ccmp /Bop:bop
Predicate:Pu
','Predicate:Pv
','UImm(28)*:Sa
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_VSA)||(%SHADER_TYPE == $ST_VSB)||(%SHADER_TYPE == $ST_GS)||(%SHADER_TYPE == $ST_TS)||(%SHADER_TYPE == $ST_TI)) :
 "Can only be used with VS, GS, TS, TI"
ILLEGAL_INSTR_ENCODING_ERROR
 ((vtgmode !=`VOP@INVALID0)) :
 "Invalid vtgmode field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((bop !=`Bop@INVALID3)) :
 "Invalid bop field value"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_1(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_GS)+(1<<ISHADER_TI)+(1<<ISHADER_TS)+(1<<ISHADER_VS)+0 ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Sa));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_VOTE_INDEX);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 28;

OPCODES
        CSMTESTfe_pipe =  0b100000001101;
        CSMTEST =  0b100000001101;

ENCODING
!csmtest_bop__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_63_62_vtgmode=vtgmode;
BITS_3_78_76_icmp=*ccmp;
BITS_2_75_74_iswzA=*bop;
BITS_3_83_81_Pu=*Pu;
BITS_3_86_84_cop=*Pv;
BITS_28_59_32_Sa=Sa;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_1(batch_t,usched_info);



ALTERNATE CLASS "vote_vtg_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /VOP:vtgmode
UImm(28)*:Sa
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_VSA)||(%SHADER_TYPE == $ST_VSB)||(%SHADER_TYPE == $ST_GS)||(%SHADER_TYPE == $ST_TS)||(%SHADER_TYPE == $ST_TI)) :
 "Can only be used with VS, GS, TS, TI"
ILLEGAL_INSTR_ENCODING_ERROR
 ((vtgmode !=`VOP@INVALID0)) :
 "Invalid vtgmode field value"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_1(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_GS)+(1<<ISHADER_TI)+(1<<ISHADER_TS)+(1<<ISHADER_VS)+0 ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Sa));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_VOTE_INDEX);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 28;

OPCODES
        VOTE_VTGfe_pipe =  0b100000001101;
        VOTE_VTG =  0b100000001101;

ENCODING
!vote_vtg__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_63_62_vtgmode=vtgmode;
BITS_3_78_76_icmp=0;
BITS_2_75_74_iswzA=0;
BITS_3_83_81_Pu=7;
BITS_3_86_84_cop=7;
BITS_28_59_32_Sa=Sa;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*0;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_1(batch_t,usched_info);



ALTERNATE CLASS "vote_vtg_cmp_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /VOP:vtgmode /CCMP_DIST:ccmp
Predicate:Pu
','UImm(28)*:Sa
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_VSA)||(%SHADER_TYPE == $ST_VSB)||(%SHADER_TYPE == $ST_GS)||(%SHADER_TYPE == $ST_TS)||(%SHADER_TYPE == $ST_TI)) :
 "Can only be used with VS, GS, TS, TI"
ILLEGAL_INSTR_ENCODING_ERROR
 ((vtgmode !=`VOP@INVALID0)) :
 "Invalid vtgmode field value"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_1(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_GS)+(1<<ISHADER_TI)+(1<<ISHADER_TS)+(1<<ISHADER_VS)+0 ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Sa));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_VOTE_INDEX);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 28;

OPCODES
        VOTE_VTGfe_pipe =  0b100000001101;
        VOTE_VTG =  0b100000001101;

ENCODING
!vote_vtg_cmp__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_63_62_vtgmode=vtgmode;
BITS_3_78_76_icmp=*ccmp;
BITS_2_75_74_iswzA=0;
BITS_3_83_81_Pu=*Pu;
BITS_3_86_84_cop=7;
BITS_28_59_32_Sa=Sa;
BITS_3_89_87_Pp =* 7;
BITS_1_90_90_Pp_not =*0;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_1(batch_t,usched_info);



ALTERNATE CLASS "vote_vtg_bop_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /VOP:vtgmode /CCMP_DIST:ccmp /Bop:bop
Predicate:Pu
','Predicate:Pv
','UImm(28)*:Sa
',' [!]Predicate:Pp
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_VSA)||(%SHADER_TYPE == $ST_VSB)||(%SHADER_TYPE == $ST_GS)||(%SHADER_TYPE == $ST_TS)||(%SHADER_TYPE == $ST_TI)) :
 "Can only be used with VS, GS, TS, TI"
ILLEGAL_INSTR_ENCODING_ERROR
 ((vtgmode !=`VOP@INVALID0)) :
 "Invalid vtgmode field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((bop !=`Bop@INVALID3)) :
 "Invalid bop field value"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_1(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_GS)+(1<<ISHADER_TI)+(1<<ISHADER_TS)+(1<<ISHADER_VS)+0 ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Sa));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_VOTE_INDEX);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 28;

OPCODES
        VOTE_VTGfe_pipe =  0b100000001101;
        VOTE_VTG =  0b100000001101;

ENCODING
!vote_vtg_bop__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_63_62_vtgmode=vtgmode;
BITS_3_78_76_icmp=*ccmp;
BITS_2_75_74_iswzA=*bop;
BITS_3_83_81_Pu=*Pu;
BITS_3_86_84_cop=*Pv;
BITS_28_59_32_Sa=Sa;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_1(batch_t,usched_info);



CLASS "getlmembase_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
Register:Rd
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;
 VIRTUAL_QUEUE = $VQ_UNORDERED ;

OPCODES
        GETLMEMBASEmio_pipe =  0b1111000000;
        GETLMEMBASE =  0b1111000000;

ENCODING
!getlmembase__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_8_23_16_Rd=Rd;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "lepc_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
Register:Rd
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-2))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
MISALIGNED_REG_ERROR
 (((Rd)+((Rd)==`Register@RZ)) % 2) == 0 :
 "Register Rd is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_1(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 64;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;

OPCODES
        LEPCint_pipe =  0b1101001110;
        LEPC =  0b1101001110;

ENCODING
!lepc__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_8_23_16_Rd=Rd;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_1(batch_t,usched_info);



CLASS "nop_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_1(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;

OPCODES
        NOPfe_pipe =  0b100100011000;
        NOP =  0b100100011000;

ENCODING
!nop__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_1(batch_t,usched_info);



CLASS "pmtrig_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
 [!]Predicate("PT"):Pp
','UImm(16)*:imm
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_1(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_COUPLED_MATH;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 0 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(imm));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 16;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 0;

OPCODES
        PMTRIGfe_pipe =  0b100000000001;
        PMTRIG =  0b100000000001;

ENCODING
!pmtrig__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_89_87_Pp = Pp;
BITS_1_90_90_Pp_not = Pp@not;
BITS_16_47_32_Sb=imm;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=*7;
BITS_3_112_110_dst_wr_sb=*7;
BITS_8_124_122_109_105_opex=TABLES_opex_1(batch_t,usched_info);



CLASS "r2b_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /MODE_BAR_WARP("BAR"):mode
UImm(4)*:barname
','Register:Rb
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS)) :
 "Can only be used with CS"
ILLEGAL_INSTR_ENCODING_ERROR
 ((mode !=`MODE_BAR_WARP@INVALID1)&&(mode !=`MODE_BAR_WARP@INVALID3)) :
 "Invalid mode field value"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_CS)+0 ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(barname));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_INTEGER);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 4;
 VIRTUAL_QUEUE = $VQ_ADU ;

OPCODES
        R2Bmio_pipe =  0b1100011110;
        R2B =  0b1100011110;

ENCODING
!r2b__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_79_78_rnd=mode;
BITS_4_57_54_barname=barname;
BITS_8_39_32_Rb=Rb;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "s2r_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
Register:Rd
','SpecialRegister:SRa
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(SRa));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);

PREDICATES
 IDEST_SIZE = 32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_UNORDERED ;

OPCODES
        S2Rmio_pipe =  0b100100011001;
        S2R =  0b100100011001;

ENCODING
!s2r__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_8_23_16_Rd=Rd;
BITS_8_79_72_imm8=SRa;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "setctaid_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /CTA_DIM("ALL"):dim
Register:Ra
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 (%SHADER_TYPE == $ST_UNKNOWN) || ((%SHADER_TYPE == $ST_TRAP)||(%SHADER_TYPE == $ST_CS)) :
 "Can only be used with CS"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((dim == `CTA_DIM@ALL))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `CTA_DIM@ALL))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = (1<<ISHADER_TRAP)+(1<<ISHADER_CS)+0 ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32 + (dim==3)*32;
 VIRTUAL_QUEUE = $VQ_ADU ;

OPCODES
        SETCTAIDmio_pipe =  0b1100011111;
        SETCTAID =  0b1100011111;

ENCODING
!setctaid__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_2_79_78_rnd=dim;
BITS_8_31_24_Ra=Ra;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "setlmembase_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode
Register:Ra
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 64;
 VIRTUAL_QUEUE = $VQ_ADU ;

OPCODES
        SETLMEMBASEmio_pipe =  0b1111000001;
        SETLMEMBASE =  0b1111000001;

ENCODING
!setlmembase__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_8_31_24_Ra=Ra;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "suatom_imm_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DOnly:d /BA("noba"):ba /Dim1:dim /AtomsOp:op /COP("EN"):cop /SURFACESIZE("U32"):sz /SEM_WEAK_STRONG("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private /Clamp1("NEAR"):clamp
Predicate("PT"):Pu
','Register:Rd
',' [ NonZeroRegister:Ra ]
','Register:Rb
','UImm(5)*:bank5
','UImm(14)*:tsPtrIdx
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((dim !=`Dim1@INVALID6)&&(dim !=`Dim1@INVALID7)) :
 "Invalid dim field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((op !=`AtomsOp@INVALID9)&&(op !=`AtomsOp@INVALID10)&&(op !=`AtomsOp@INVALID11)&&(op !=`AtomsOp@INVALID12)&&(op !=`AtomsOp@INVALID13)&&(op !=`AtomsOp@INVALID14)&&(op !=`AtomsOp@INVALID15)) :
 "Invalid op field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sem !=`SEM_WEAK_STRONG@INVALID0)&&(sem !=`SEM_WEAK_STRONG@INVALID3)) :
 "Invalid sem field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((clamp !=`Clamp1@INVALID3)) :
 "Invalid clamp field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@F32.FTZ.RN)||(sz == `SURFACESIZE@F16x2.RN)||(sz == `SURFACESIZE@SD32))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@SD64))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@SD64))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@SD64))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@ADD))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@F32.FTZ.RN)||(sz == `SURFACESIZE@F16x2.RN)||(sz == `SURFACESIZE@SD32))) :
 "Invalid instruction combination ( rule name: ADD)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@MIN)||(op == `AtomsOp@MAX))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@F16x2.RN)||(sz == `SURFACESIZE@SD32)||(sz == `SURFACESIZE@SD64))) :
 "Invalid instruction combination ( rule name: MIN_MAX)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@INC)||(op == `AtomsOp@DEC))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32))) :
 "Invalid instruction combination ( rule name: INC_DEC)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@AND)||(op == `AtomsOp@OR)||(op == `AtomsOp@XOR))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@SD32))) :
 "Invalid instruction combination ( rule name: AND_OR_XOR)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@EXCH))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64))) :
 "Invalid instruction combination ( rule name: EXCH)"
OOR_REG_ERROR
 (((sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@SD64))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@SD64))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SUATOM_I ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SURFACE_COORDINATES);

PREDICATES
 IDEST_SIZE = (( ((sz == `AtomicInteger@U32)) + ((sz == `AtomicInteger@S32)) + ((sz == `AtomicInteger@SD32)) + ((sz == `AtomicInteger@U64)*2) + ((sz == `AtomicInteger@S64)*2) + ((sz == `AtomicInteger@SD64)*2) + ((sz == `AtomicInteger@F32.FTZ.RN) + ((sz == `AtomicInteger@F16x2.FTZ.RN)*1)) )*32);
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (( ((sz == `AtomicInteger@U32)) + ((sz == `AtomicInteger@S32)) + ((sz == `AtomicInteger@SD32)) + ((sz == `AtomicInteger@U64)*2) + ((sz == `AtomicInteger@S64)*2) + ((sz == `AtomicInteger@SD64)*2) + ((sz == `AtomicInteger@F32.FTZ.RN) + ((sz == `AtomicInteger@F16x2.FTZ.RN)*1)) )*32);
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((dim<2) + ((dim==2)*2) + ((dim==3)*2) + ((dim>3)*3))*32;
 VIRTUAL_QUEUE = $VQ_SUATOM ;

OPCODES
        SUATOMmio_pipe =  0b10110010011;
        SUATOM =  0b10110010011;

ENCODING
!suatom_imm__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=ba;
BITS_3_63_61_dim=dim;
BITS_4_90_87_op=*op;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_2_60_59_clamp=clamp;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_14_53_40_Sb_addr=tsPtrIdx;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "suatom_tid_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DOnly:d /BA("noba"):ba /Dim1:dim /AtomsOp:op /COP("EN"):cop /SURFACESIZE("U32"):sz /SEM_WEAK_STRONG("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private /Clamp1("NEAR"):clamp
Predicate("PT"):Pu
','Register:Rd
',' [ NonZeroRegister:Ra ]
','Register:Rb
','UImm(5)*:bank5
','UImm(6)*:hdrtblbase6
','UImm(8)*:tid8
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((dim !=`Dim1@INVALID6)&&(dim !=`Dim1@INVALID7)) :
 "Invalid dim field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((op !=`AtomsOp@INVALID9)&&(op !=`AtomsOp@INVALID10)&&(op !=`AtomsOp@INVALID11)&&(op !=`AtomsOp@INVALID12)&&(op !=`AtomsOp@INVALID13)&&(op !=`AtomsOp@INVALID14)&&(op !=`AtomsOp@INVALID15)) :
 "Invalid op field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sem !=`SEM_WEAK_STRONG@INVALID0)&&(sem !=`SEM_WEAK_STRONG@INVALID3)) :
 "Invalid sem field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((clamp !=`Clamp1@INVALID3)) :
 "Invalid clamp field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@F32.FTZ.RN)||(sz == `SURFACESIZE@F16x2.RN)||(sz == `SURFACESIZE@SD32))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@SD64))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@SD64))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@SD64))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@ADD))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@F32.FTZ.RN)||(sz == `SURFACESIZE@F16x2.RN)||(sz == `SURFACESIZE@SD32))) :
 "Invalid instruction combination ( rule name: ADD)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@MIN)||(op == `AtomsOp@MAX))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@F16x2.RN)||(sz == `SURFACESIZE@SD32)||(sz == `SURFACESIZE@SD64))) :
 "Invalid instruction combination ( rule name: MIN_MAX)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@INC)||(op == `AtomsOp@DEC))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32))) :
 "Invalid instruction combination ( rule name: INC_DEC)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@AND)||(op == `AtomsOp@OR)||(op == `AtomsOp@XOR))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@SD32))) :
 "Invalid instruction combination ( rule name: AND_OR_XOR)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@EXCH))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64))) :
 "Invalid instruction combination ( rule name: EXCH)"
OOR_REG_ERROR
 (((sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@SD64))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@SD64))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SUATOM_TID ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SURFACE_COORDINATES);

PREDICATES
 IDEST_SIZE = (( ((sz == `AtomicInteger@U32)) + ((sz == `AtomicInteger@S32)) + ((sz == `AtomicInteger@SD32)) + ((sz == `AtomicInteger@U64)*2) + ((sz == `AtomicInteger@S64)*2) + ((sz == `AtomicInteger@SD64)*2) + ((sz == `AtomicInteger@F32.FTZ.RN) + ((sz == `AtomicInteger@F16x2.FTZ.RN)*1)) )*32);
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (( ((sz == `AtomicInteger@U32)) + ((sz == `AtomicInteger@S32)) + ((sz == `AtomicInteger@SD32)) + ((sz == `AtomicInteger@U64)*2) + ((sz == `AtomicInteger@S64)*2) + ((sz == `AtomicInteger@SD64)*2) + ((sz == `AtomicInteger@F32.FTZ.RN) + ((sz == `AtomicInteger@F16x2.FTZ.RN)*1)) )*32);
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((dim<2) + ((dim==2)*2) + ((dim==3)*2) + ((dim>3)*3))*32;
 VIRTUAL_QUEUE = $VQ_SUATOM ;

OPCODES
        SUATOMmio_pipe =  0b11110010011;
        SUATOM =  0b11110010011;

ENCODING
!suatom_tid__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=ba;
BITS_3_63_61_dim=dim;
BITS_4_90_87_op=*op;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_2_60_59_clamp=clamp;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_6_45_40_hdrtblbase6=hdrtblbase6;
BITS_8_53_46_tid8=tid8;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "suatom_reg_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DOnly:d /BA("noba"):ba /Dim1:dim /AtomsOp:op /COP("EN"):cop /SURFACESIZE("U32"):sz /SEM_WEAK_STRONG("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private /Clamp1("NEAR"):clamp
Predicate("PT"):Pu
','Register:Rd
',' [ NonZeroRegister:Ra ]
','Register:Rb
','NonZeroRegister:Rc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((dim !=`Dim1@INVALID6)&&(dim !=`Dim1@INVALID7)) :
 "Invalid dim field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((op !=`AtomsOp@INVALID9)&&(op !=`AtomsOp@INVALID10)&&(op !=`AtomsOp@INVALID11)&&(op !=`AtomsOp@INVALID12)&&(op !=`AtomsOp@INVALID13)&&(op !=`AtomsOp@INVALID14)&&(op !=`AtomsOp@INVALID15)) :
 "Invalid op field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sem !=`SEM_WEAK_STRONG@INVALID0)&&(sem !=`SEM_WEAK_STRONG@INVALID3)) :
 "Invalid sem field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((clamp !=`Clamp1@INVALID3)) :
 "Invalid clamp field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rc)!=`Register@RZ) :
 "Disallowed register Rc"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@F32.FTZ.RN)||(sz == `SURFACESIZE@F16x2.RN)||(sz == `SURFACESIZE@SD32))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@SD64))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@SD64))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@SD64))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@ADD))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@F32.FTZ.RN)||(sz == `SURFACESIZE@F16x2.RN)||(sz == `SURFACESIZE@SD32))) :
 "Invalid instruction combination ( rule name: ADD)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@MIN)||(op == `AtomsOp@MAX))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@F16x2.RN)||(sz == `SURFACESIZE@SD32)||(sz == `SURFACESIZE@SD64))) :
 "Invalid instruction combination ( rule name: MIN_MAX)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@INC)||(op == `AtomsOp@DEC))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32))) :
 "Invalid instruction combination ( rule name: INC_DEC)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@AND)||(op == `AtomsOp@OR)||(op == `AtomsOp@XOR))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@SD32))) :
 "Invalid instruction combination ( rule name: AND_OR_XOR)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@EXCH))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64))) :
 "Invalid instruction combination ( rule name: EXCH)"
OOR_REG_ERROR
 (((sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@SD64))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@SD64))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SUATOM_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SURFACE_COORDINATES);

PREDICATES
 IDEST_SIZE = (( ((sz == `AtomicInteger@U32)) + ((sz == `AtomicInteger@S32)) + ((sz == `AtomicInteger@SD32)) + ((sz == `AtomicInteger@U64)*2) + ((sz == `AtomicInteger@S64)*2) + ((sz == `AtomicInteger@SD64)*2) + ((sz == `AtomicInteger@F32.FTZ.RN) + ((sz == `AtomicInteger@F16x2.FTZ.RN)*1)) )*32);
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (( ((sz == `AtomicInteger@U32)) + ((sz == `AtomicInteger@S32)) + ((sz == `AtomicInteger@SD32)) + ((sz == `AtomicInteger@U64)*2) + ((sz == `AtomicInteger@S64)*2) + ((sz == `AtomicInteger@SD64)*2) + ((sz == `AtomicInteger@F32.FTZ.RN) + ((sz == `AtomicInteger@F16x2.FTZ.RN)*1)) )*32);
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = ((dim<2) + ((dim==2)*2) + ((dim==3)*2) + ((dim>3)*3))*32;
 VIRTUAL_QUEUE = $VQ_SUATOM ;

OPCODES
        SUATOMmio_pipe =  0b1110010100;
        SUATOM =  0b1110010100;

ENCODING
!suatom_reg__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=ba;
BITS_3_63_61_dim=dim;
BITS_4_90_87_op=*op;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_2_60_59_clamp=clamp;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "suatom_imm_weakonly_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DOnly:d /BA("noba"):ba /Dim1:dim /AtomsOp:op /COP("EN"):cop /SURFACESIZE("U32"):sz /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private /Clamp1("NEAR"):clamp
Predicate("PT"):Pu
','Register:Rd
',' [ NonZeroRegister:Ra ]
','Register:Rb
','UImm(5)*:bank5
','UImm(14)*:tsPtrIdx
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((dim !=`Dim1@INVALID6)&&(dim !=`Dim1@INVALID7)) :
 "Invalid dim field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((op !=`AtomsOp@INVALID9)&&(op !=`AtomsOp@INVALID10)&&(op !=`AtomsOp@INVALID11)&&(op !=`AtomsOp@INVALID12)&&(op !=`AtomsOp@INVALID13)&&(op !=`AtomsOp@INVALID14)&&(op !=`AtomsOp@INVALID15)) :
 "Invalid op field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((clamp !=`Clamp1@INVALID3)) :
 "Invalid clamp field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@F32.FTZ.RN)||(sz == `SURFACESIZE@F16x2.RN)||(sz == `SURFACESIZE@SD32))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@SD64))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@SD64))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@SD64))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@ADD))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@F32.FTZ.RN)||(sz == `SURFACESIZE@F16x2.RN)||(sz == `SURFACESIZE@SD32))) :
 "Invalid instruction combination ( rule name: ADD)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@MIN)||(op == `AtomsOp@MAX))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@F16x2.RN)||(sz == `SURFACESIZE@SD32)||(sz == `SURFACESIZE@SD64))) :
 "Invalid instruction combination ( rule name: MIN_MAX)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@INC)||(op == `AtomsOp@DEC))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32))) :
 "Invalid instruction combination ( rule name: INC_DEC)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@AND)||(op == `AtomsOp@OR)||(op == `AtomsOp@XOR))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@SD32))) :
 "Invalid instruction combination ( rule name: AND_OR_XOR)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@EXCH))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64))) :
 "Invalid instruction combination ( rule name: EXCH)"
OOR_REG_ERROR
 (((sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@SD64))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@SD64))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SUATOM_I ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SURFACE_COORDINATES);

PREDICATES
 IDEST_SIZE = (( ((sz == `AtomicInteger@U32)) + ((sz == `AtomicInteger@S32)) + ((sz == `AtomicInteger@SD32)) + ((sz == `AtomicInteger@U64)*2) + ((sz == `AtomicInteger@S64)*2) + ((sz == `AtomicInteger@SD64)*2) + ((sz == `AtomicInteger@F32.FTZ.RN) + ((sz == `AtomicInteger@F16x2.FTZ.RN)*1)) )*32);
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (( ((sz == `AtomicInteger@U32)) + ((sz == `AtomicInteger@S32)) + ((sz == `AtomicInteger@SD32)) + ((sz == `AtomicInteger@U64)*2) + ((sz == `AtomicInteger@S64)*2) + ((sz == `AtomicInteger@SD64)*2) + ((sz == `AtomicInteger@F32.FTZ.RN) + ((sz == `AtomicInteger@F16x2.FTZ.RN)*1)) )*32);
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((dim<2) + ((dim==2)*2) + ((dim==3)*2) + ((dim>3)*3))*32;
 VIRTUAL_QUEUE = $VQ_SUATOM ;

OPCODES
        SUATOMmio_pipe =  0b10110010011;
        SUATOM =  0b10110010011;

ENCODING
!suatom_imm_weakonly__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=ba;
BITS_3_63_61_dim=dim;
BITS_4_90_87_op=*op;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_2_60_59_clamp=clamp;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_14_53_40_Sb_addr=tsPtrIdx;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "suatom_tid_weakonly_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DOnly:d /BA("noba"):ba /Dim1:dim /AtomsOp:op /COP("EN"):cop /SURFACESIZE("U32"):sz /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private /Clamp1("NEAR"):clamp
Predicate("PT"):Pu
','Register:Rd
',' [ NonZeroRegister:Ra ]
','Register:Rb
','UImm(5)*:bank5
','UImm(6)*:hdrtblbase6
','UImm(8)*:tid8
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((dim !=`Dim1@INVALID6)&&(dim !=`Dim1@INVALID7)) :
 "Invalid dim field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((op !=`AtomsOp@INVALID9)&&(op !=`AtomsOp@INVALID10)&&(op !=`AtomsOp@INVALID11)&&(op !=`AtomsOp@INVALID12)&&(op !=`AtomsOp@INVALID13)&&(op !=`AtomsOp@INVALID14)&&(op !=`AtomsOp@INVALID15)) :
 "Invalid op field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((clamp !=`Clamp1@INVALID3)) :
 "Invalid clamp field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@F32.FTZ.RN)||(sz == `SURFACESIZE@F16x2.RN)||(sz == `SURFACESIZE@SD32))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@SD64))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@SD64))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@SD64))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@ADD))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@F32.FTZ.RN)||(sz == `SURFACESIZE@F16x2.RN)||(sz == `SURFACESIZE@SD32))) :
 "Invalid instruction combination ( rule name: ADD)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@MIN)||(op == `AtomsOp@MAX))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@F16x2.RN)||(sz == `SURFACESIZE@SD32)||(sz == `SURFACESIZE@SD64))) :
 "Invalid instruction combination ( rule name: MIN_MAX)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@INC)||(op == `AtomsOp@DEC))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32))) :
 "Invalid instruction combination ( rule name: INC_DEC)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@AND)||(op == `AtomsOp@OR)||(op == `AtomsOp@XOR))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@SD32))) :
 "Invalid instruction combination ( rule name: AND_OR_XOR)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@EXCH))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64))) :
 "Invalid instruction combination ( rule name: EXCH)"
OOR_REG_ERROR
 (((sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@SD64))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@SD64))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SUATOM_TID ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SURFACE_COORDINATES);

PREDICATES
 IDEST_SIZE = (( ((sz == `AtomicInteger@U32)) + ((sz == `AtomicInteger@S32)) + ((sz == `AtomicInteger@SD32)) + ((sz == `AtomicInteger@U64)*2) + ((sz == `AtomicInteger@S64)*2) + ((sz == `AtomicInteger@SD64)*2) + ((sz == `AtomicInteger@F32.FTZ.RN) + ((sz == `AtomicInteger@F16x2.FTZ.RN)*1)) )*32);
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (( ((sz == `AtomicInteger@U32)) + ((sz == `AtomicInteger@S32)) + ((sz == `AtomicInteger@SD32)) + ((sz == `AtomicInteger@U64)*2) + ((sz == `AtomicInteger@S64)*2) + ((sz == `AtomicInteger@SD64)*2) + ((sz == `AtomicInteger@F32.FTZ.RN) + ((sz == `AtomicInteger@F16x2.FTZ.RN)*1)) )*32);
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((dim<2) + ((dim==2)*2) + ((dim==3)*2) + ((dim>3)*3))*32;
 VIRTUAL_QUEUE = $VQ_SUATOM ;

OPCODES
        SUATOMmio_pipe =  0b11110010011;
        SUATOM =  0b11110010011;

ENCODING
!suatom_tid_weakonly__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=ba;
BITS_3_63_61_dim=dim;
BITS_4_90_87_op=*op;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_2_60_59_clamp=clamp;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_6_45_40_hdrtblbase6=hdrtblbase6;
BITS_8_53_46_tid8=tid8;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "suatom_reg_weakonly_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DOnly:d /BA("noba"):ba /Dim1:dim /AtomsOp:op /COP("EN"):cop /SURFACESIZE("U32"):sz /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private /Clamp1("NEAR"):clamp
Predicate("PT"):Pu
','Register:Rd
',' [ NonZeroRegister:Ra ]
','Register:Rb
','NonZeroRegister:Rc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((dim !=`Dim1@INVALID6)&&(dim !=`Dim1@INVALID7)) :
 "Invalid dim field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((op !=`AtomsOp@INVALID9)&&(op !=`AtomsOp@INVALID10)&&(op !=`AtomsOp@INVALID11)&&(op !=`AtomsOp@INVALID12)&&(op !=`AtomsOp@INVALID13)&&(op !=`AtomsOp@INVALID14)&&(op !=`AtomsOp@INVALID15)) :
 "Invalid op field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((clamp !=`Clamp1@INVALID3)) :
 "Invalid clamp field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rc)!=`Register@RZ) :
 "Disallowed register Rc"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@F32.FTZ.RN)||(sz == `SURFACESIZE@F16x2.RN)||(sz == `SURFACESIZE@SD32))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@SD64))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@SD64))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@SD64))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@ADD))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@F32.FTZ.RN)||(sz == `SURFACESIZE@F16x2.RN)||(sz == `SURFACESIZE@SD32))) :
 "Invalid instruction combination ( rule name: ADD)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@MIN)||(op == `AtomsOp@MAX))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@F16x2.RN)||(sz == `SURFACESIZE@SD32)||(sz == `SURFACESIZE@SD64))) :
 "Invalid instruction combination ( rule name: MIN_MAX)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@INC)||(op == `AtomsOp@DEC))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32))) :
 "Invalid instruction combination ( rule name: INC_DEC)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@AND)||(op == `AtomsOp@OR)||(op == `AtomsOp@XOR))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@SD32))) :
 "Invalid instruction combination ( rule name: AND_OR_XOR)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `AtomsOp@EXCH))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64))) :
 "Invalid instruction combination ( rule name: EXCH)"
OOR_REG_ERROR
 (((sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@SD64))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@SD64))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SUATOM_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SURFACE_COORDINATES);

PREDICATES
 IDEST_SIZE = (( ((sz == `AtomicInteger@U32)) + ((sz == `AtomicInteger@S32)) + ((sz == `AtomicInteger@SD32)) + ((sz == `AtomicInteger@U64)*2) + ((sz == `AtomicInteger@S64)*2) + ((sz == `AtomicInteger@SD64)*2) + ((sz == `AtomicInteger@F32.FTZ.RN) + ((sz == `AtomicInteger@F16x2.FTZ.RN)*1)) )*32);
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (( ((sz == `AtomicInteger@U32)) + ((sz == `AtomicInteger@S32)) + ((sz == `AtomicInteger@SD32)) + ((sz == `AtomicInteger@U64)*2) + ((sz == `AtomicInteger@S64)*2) + ((sz == `AtomicInteger@SD64)*2) + ((sz == `AtomicInteger@F32.FTZ.RN) + ((sz == `AtomicInteger@F16x2.FTZ.RN)*1)) )*32);
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = ((dim<2) + ((dim==2)*2) + ((dim==3)*2) + ((dim>3)*3))*32;
 VIRTUAL_QUEUE = $VQ_SUATOM ;

OPCODES
        SUATOMmio_pipe =  0b1110010100;
        SUATOM =  0b1110010100;

ENCODING
!suatom_reg_weakonly__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=ba;
BITS_3_63_61_dim=dim;
BITS_4_90_87_op=*op;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_2_60_59_clamp=clamp;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "suatom_cas_imm_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DOnly:d /BA("noba"):ba /Dim1:dim /CAS:op /COP("EN"):cop /ATOMCASSZ("U32"):sz /SEM_WEAK_STRONG("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private /Clamp1("NEAR"):clamp
Predicate("PT"):Pu
','Register:Rd
',' [ NonZeroRegister:Ra ]
','Register:Rb
','UImm(5)*:bank5
','UImm(14)*:tsPtrIdx
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((dim !=`Dim1@INVALID6)&&(dim !=`Dim1@INVALID7)) :
 "Invalid dim field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`ATOMCASSZ@INVALID3)&&(sz !=`ATOMCASSZ@INVALID4)&&(sz !=`ATOMCASSZ@INVALID5)&&(sz !=`ATOMCASSZ@INVALID6)&&(sz !=`ATOMCASSZ@INVALID7)) :
 "Invalid sz field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sem !=`SEM_WEAK_STRONG@INVALID0)&&(sem !=`SEM_WEAK_STRONG@INVALID3)) :
 "Invalid sem field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((clamp !=`Clamp1@INVALID3)) :
 "Invalid clamp field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-2))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
MISALIGNED_REG_ERROR
 (((Rb)+((Rb)==`Register@RZ)) % 2) == 0 :
 "Register Rb is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@"32")||(sz == `ATOMCASSZ@U32)||(sz == `ATOMCASSZ@S32))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@"32")||(sz == `ATOMCASSZ@U32)||(sz == `ATOMCASSZ@S32))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((sz == `ATOMCASSZ@"32")||(sz == `ATOMCASSZ@U32)||(sz == `ATOMCASSZ@S32))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@"64")||(sz == `ATOMCASSZ@U64))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@"64")||(sz == `ATOMCASSZ@U64))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((sz == `ATOMCASSZ@"64")||(sz == `ATOMCASSZ@U64))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@"64")||(sz == `ATOMCASSZ@U64))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@"64")||(sz == `ATOMCASSZ@U64))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SUATOM_I_CAS ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SURFACE_COORDINATES);

PREDICATES
 IDEST_SIZE = (( ((sz == `AtomicInteger@U32)) + ((sz == `AtomicInteger@S32)) + ((sz == `AtomicInteger@SD32)) + ((sz == `AtomicInteger@U64)*2) + ((sz == `AtomicInteger@S64)*2) + ((sz == `AtomicInteger@SD64)*2) + ((sz == `AtomicInteger@F32.FTZ.RN) + ((sz == `AtomicInteger@F16x2.FTZ.RN)*1)) )*32);
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (( ((sz == `AtomicInteger@U32)) + ((sz == `AtomicInteger@S32)) + ((sz == `AtomicInteger@SD32)) + ((sz == `AtomicInteger@U64)*2) + ((sz == `AtomicInteger@S64)*2) + ((sz == `AtomicInteger@SD64)*2) + ((sz == `AtomicInteger@F32.FTZ.RN) + ((sz == `AtomicInteger@F16x2.FTZ.RN)*1)) )*32*2);
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((dim<2) + ((dim==2)*2) + ((dim==3)*2) + ((dim>3)*3))*32;
 VIRTUAL_QUEUE = $VQ_SUATOM ;

OPCODES
        SUATOMmio_pipe =  0b10110010101;
        SUATOM =  0b10110010101;

ENCODING
!suatom_cas_imm__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=ba;
BITS_3_63_61_dim=dim;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_2_60_59_clamp=clamp;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_14_53_40_Sb_addr=tsPtrIdx;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "suatom_cas_tid_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DOnly:d /BA("noba"):ba /Dim1:dim /CAS:op /COP("EN"):cop /ATOMCASSZ("U32"):sz /SEM_WEAK_STRONG("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private /Clamp1("NEAR"):clamp
Predicate("PT"):Pu
','Register:Rd
',' [ NonZeroRegister:Ra ]
','Register:Rb
','UImm(5)*:bank5
','UImm(6)*:hdrtblbase6
','UImm(8)*:tid8
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((dim !=`Dim1@INVALID6)&&(dim !=`Dim1@INVALID7)) :
 "Invalid dim field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`ATOMCASSZ@INVALID3)&&(sz !=`ATOMCASSZ@INVALID4)&&(sz !=`ATOMCASSZ@INVALID5)&&(sz !=`ATOMCASSZ@INVALID6)&&(sz !=`ATOMCASSZ@INVALID7)) :
 "Invalid sz field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sem !=`SEM_WEAK_STRONG@INVALID0)&&(sem !=`SEM_WEAK_STRONG@INVALID3)) :
 "Invalid sem field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((clamp !=`Clamp1@INVALID3)) :
 "Invalid clamp field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-2))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
MISALIGNED_REG_ERROR
 (((Rb)+((Rb)==`Register@RZ)) % 2) == 0 :
 "Register Rb is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@"32")||(sz == `ATOMCASSZ@U32)||(sz == `ATOMCASSZ@S32))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@"32")||(sz == `ATOMCASSZ@U32)||(sz == `ATOMCASSZ@S32))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((sz == `ATOMCASSZ@"32")||(sz == `ATOMCASSZ@U32)||(sz == `ATOMCASSZ@S32))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@"64")||(sz == `ATOMCASSZ@U64))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@"64")||(sz == `ATOMCASSZ@U64))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((sz == `ATOMCASSZ@"64")||(sz == `ATOMCASSZ@U64))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@"64")||(sz == `ATOMCASSZ@U64))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@"64")||(sz == `ATOMCASSZ@U64))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SUATOM_TID_CAS ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SURFACE_COORDINATES);

PREDICATES
 IDEST_SIZE = (( ((sz == `AtomicInteger@U32)) + ((sz == `AtomicInteger@S32)) + ((sz == `AtomicInteger@SD32)) + ((sz == `AtomicInteger@U64)*2) + ((sz == `AtomicInteger@S64)*2) + ((sz == `AtomicInteger@SD64)*2) + ((sz == `AtomicInteger@F32.FTZ.RN) + ((sz == `AtomicInteger@F16x2.FTZ.RN)*1)) )*32);
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (( ((sz == `AtomicInteger@U32)) + ((sz == `AtomicInteger@S32)) + ((sz == `AtomicInteger@SD32)) + ((sz == `AtomicInteger@U64)*2) + ((sz == `AtomicInteger@S64)*2) + ((sz == `AtomicInteger@SD64)*2) + ((sz == `AtomicInteger@F32.FTZ.RN) + ((sz == `AtomicInteger@F16x2.FTZ.RN)*1)) )*32*2);
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((dim<2) + ((dim==2)*2) + ((dim==3)*2) + ((dim>3)*3))*32;
 VIRTUAL_QUEUE = $VQ_SUATOM ;

OPCODES
        SUATOMmio_pipe =  0b11110010101;
        SUATOM =  0b11110010101;

ENCODING
!suatom_cas_tid__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=ba;
BITS_3_63_61_dim=dim;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_2_60_59_clamp=clamp;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_6_45_40_hdrtblbase6=hdrtblbase6;
BITS_8_53_46_tid8=tid8;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "suatom_cas_reg_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DOnly:d /BA("noba"):ba /Dim1:dim /CAS:op /COP("EN"):cop /ATOMCASSZ("U32"):sz /SEM_WEAK_STRONG("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private /Clamp1("NEAR"):clamp
Predicate("PT"):Pu
','Register:Rd
',' [ NonZeroRegister:Ra ]
','Register:Rb
','NonZeroRegister:Rc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((dim !=`Dim1@INVALID6)&&(dim !=`Dim1@INVALID7)) :
 "Invalid dim field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`ATOMCASSZ@INVALID3)&&(sz !=`ATOMCASSZ@INVALID4)&&(sz !=`ATOMCASSZ@INVALID5)&&(sz !=`ATOMCASSZ@INVALID6)&&(sz !=`ATOMCASSZ@INVALID7)) :
 "Invalid sz field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sem !=`SEM_WEAK_STRONG@INVALID0)&&(sem !=`SEM_WEAK_STRONG@INVALID3)) :
 "Invalid sem field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((clamp !=`Clamp1@INVALID3)) :
 "Invalid clamp field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-2))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
MISALIGNED_REG_ERROR
 (((Rb)+((Rb)==`Register@RZ)) % 2) == 0 :
 "Register Rb is misaligned"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rc)!=`Register@RZ) :
 "Disallowed register Rc"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@"32")||(sz == `ATOMCASSZ@U32)||(sz == `ATOMCASSZ@S32))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@"32")||(sz == `ATOMCASSZ@U32)||(sz == `ATOMCASSZ@S32))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((sz == `ATOMCASSZ@"32")||(sz == `ATOMCASSZ@U32)||(sz == `ATOMCASSZ@S32))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@"64")||(sz == `ATOMCASSZ@U64))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@"64")||(sz == `ATOMCASSZ@U64))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((sz == `ATOMCASSZ@"64")||(sz == `ATOMCASSZ@U64))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@"64")||(sz == `ATOMCASSZ@U64))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@"64")||(sz == `ATOMCASSZ@U64))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SUATOM_R_CAS ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SURFACE_COORDINATES);

PREDICATES
 IDEST_SIZE = (( ((sz == `AtomicInteger@U32)) + ((sz == `AtomicInteger@S32)) + ((sz == `AtomicInteger@SD32)) + ((sz == `AtomicInteger@U64)*2) + ((sz == `AtomicInteger@S64)*2) + ((sz == `AtomicInteger@SD64)*2) + ((sz == `AtomicInteger@F32.FTZ.RN) + ((sz == `AtomicInteger@F16x2.FTZ.RN)*1)) )*32);
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (( ((sz == `AtomicInteger@U32)) + ((sz == `AtomicInteger@S32)) + ((sz == `AtomicInteger@SD32)) + ((sz == `AtomicInteger@U64)*2) + ((sz == `AtomicInteger@S64)*2) + ((sz == `AtomicInteger@SD64)*2) + ((sz == `AtomicInteger@F32.FTZ.RN) + ((sz == `AtomicInteger@F16x2.FTZ.RN)*1)) )*32*2);
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = ((dim<2) + ((dim==2)*2) + ((dim==3)*2) + ((dim>3)*3))*32;
 VIRTUAL_QUEUE = $VQ_SUATOM ;

OPCODES
        SUATOMmio_pipe =  0b1110010110;
        SUATOM =  0b1110010110;

ENCODING
!suatom_cas_reg__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=ba;
BITS_3_63_61_dim=dim;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_2_60_59_clamp=clamp;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "suatom_cas_imm_weakonly_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DOnly:d /BA("noba"):ba /Dim1:dim /CAS:op /COP("EN"):cop /ATOMCASSZ("U32"):sz /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private /Clamp1("NEAR"):clamp
Predicate("PT"):Pu
','Register:Rd
',' [ NonZeroRegister:Ra ]
','Register:Rb
','UImm(5)*:bank5
','UImm(14)*:tsPtrIdx
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((dim !=`Dim1@INVALID6)&&(dim !=`Dim1@INVALID7)) :
 "Invalid dim field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`ATOMCASSZ@INVALID3)&&(sz !=`ATOMCASSZ@INVALID4)&&(sz !=`ATOMCASSZ@INVALID5)&&(sz !=`ATOMCASSZ@INVALID6)&&(sz !=`ATOMCASSZ@INVALID7)) :
 "Invalid sz field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((clamp !=`Clamp1@INVALID3)) :
 "Invalid clamp field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-2))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
MISALIGNED_REG_ERROR
 (((Rb)+((Rb)==`Register@RZ)) % 2) == 0 :
 "Register Rb is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@"32")||(sz == `ATOMCASSZ@U32)||(sz == `ATOMCASSZ@S32))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@"32")||(sz == `ATOMCASSZ@U32)||(sz == `ATOMCASSZ@S32))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((sz == `ATOMCASSZ@"32")||(sz == `ATOMCASSZ@U32)||(sz == `ATOMCASSZ@S32))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@"64")||(sz == `ATOMCASSZ@U64))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@"64")||(sz == `ATOMCASSZ@U64))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((sz == `ATOMCASSZ@"64")||(sz == `ATOMCASSZ@U64))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@"64")||(sz == `ATOMCASSZ@U64))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@"64")||(sz == `ATOMCASSZ@U64))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SUATOM_I_CAS ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SURFACE_COORDINATES);

PREDICATES
 IDEST_SIZE = (( ((sz == `AtomicInteger@U32)) + ((sz == `AtomicInteger@S32)) + ((sz == `AtomicInteger@SD32)) + ((sz == `AtomicInteger@U64)*2) + ((sz == `AtomicInteger@S64)*2) + ((sz == `AtomicInteger@SD64)*2) + ((sz == `AtomicInteger@F32.FTZ.RN) + ((sz == `AtomicInteger@F16x2.FTZ.RN)*1)) )*32);
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (( ((sz == `AtomicInteger@U32)) + ((sz == `AtomicInteger@S32)) + ((sz == `AtomicInteger@SD32)) + ((sz == `AtomicInteger@U64)*2) + ((sz == `AtomicInteger@S64)*2) + ((sz == `AtomicInteger@SD64)*2) + ((sz == `AtomicInteger@F32.FTZ.RN) + ((sz == `AtomicInteger@F16x2.FTZ.RN)*1)) )*32*2);
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((dim<2) + ((dim==2)*2) + ((dim==3)*2) + ((dim>3)*3))*32;
 VIRTUAL_QUEUE = $VQ_SUATOM ;

OPCODES
        SUATOMmio_pipe =  0b10110010101;
        SUATOM =  0b10110010101;

ENCODING
!suatom_cas_imm_weakonly__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=ba;
BITS_3_63_61_dim=dim;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_2_60_59_clamp=clamp;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_14_53_40_Sb_addr=tsPtrIdx;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "suatom_cas_tid_weakonly_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DOnly:d /BA("noba"):ba /Dim1:dim /CAS:op /COP("EN"):cop /ATOMCASSZ("U32"):sz /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private /Clamp1("NEAR"):clamp
Predicate("PT"):Pu
','Register:Rd
',' [ NonZeroRegister:Ra ]
','Register:Rb
','UImm(5)*:bank5
','UImm(6)*:hdrtblbase6
','UImm(8)*:tid8
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((dim !=`Dim1@INVALID6)&&(dim !=`Dim1@INVALID7)) :
 "Invalid dim field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`ATOMCASSZ@INVALID3)&&(sz !=`ATOMCASSZ@INVALID4)&&(sz !=`ATOMCASSZ@INVALID5)&&(sz !=`ATOMCASSZ@INVALID6)&&(sz !=`ATOMCASSZ@INVALID7)) :
 "Invalid sz field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((clamp !=`Clamp1@INVALID3)) :
 "Invalid clamp field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-2))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
MISALIGNED_REG_ERROR
 (((Rb)+((Rb)==`Register@RZ)) % 2) == 0 :
 "Register Rb is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@"32")||(sz == `ATOMCASSZ@U32)||(sz == `ATOMCASSZ@S32))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@"32")||(sz == `ATOMCASSZ@U32)||(sz == `ATOMCASSZ@S32))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((sz == `ATOMCASSZ@"32")||(sz == `ATOMCASSZ@U32)||(sz == `ATOMCASSZ@S32))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@"64")||(sz == `ATOMCASSZ@U64))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@"64")||(sz == `ATOMCASSZ@U64))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((sz == `ATOMCASSZ@"64")||(sz == `ATOMCASSZ@U64))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@"64")||(sz == `ATOMCASSZ@U64))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@"64")||(sz == `ATOMCASSZ@U64))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SUATOM_TID_CAS ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SURFACE_COORDINATES);

PREDICATES
 IDEST_SIZE = (( ((sz == `AtomicInteger@U32)) + ((sz == `AtomicInteger@S32)) + ((sz == `AtomicInteger@SD32)) + ((sz == `AtomicInteger@U64)*2) + ((sz == `AtomicInteger@S64)*2) + ((sz == `AtomicInteger@SD64)*2) + ((sz == `AtomicInteger@F32.FTZ.RN) + ((sz == `AtomicInteger@F16x2.FTZ.RN)*1)) )*32);
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (( ((sz == `AtomicInteger@U32)) + ((sz == `AtomicInteger@S32)) + ((sz == `AtomicInteger@SD32)) + ((sz == `AtomicInteger@U64)*2) + ((sz == `AtomicInteger@S64)*2) + ((sz == `AtomicInteger@SD64)*2) + ((sz == `AtomicInteger@F32.FTZ.RN) + ((sz == `AtomicInteger@F16x2.FTZ.RN)*1)) )*32*2);
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((dim<2) + ((dim==2)*2) + ((dim==3)*2) + ((dim>3)*3))*32;
 VIRTUAL_QUEUE = $VQ_SUATOM ;

OPCODES
        SUATOMmio_pipe =  0b11110010101;
        SUATOM =  0b11110010101;

ENCODING
!suatom_cas_tid_weakonly__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=ba;
BITS_3_63_61_dim=dim;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_2_60_59_clamp=clamp;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_6_45_40_hdrtblbase6=hdrtblbase6;
BITS_8_53_46_tid8=tid8;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "suatom_cas_reg_weakonly_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DOnly:d /BA("noba"):ba /Dim1:dim /CAS:op /COP("EN"):cop /ATOMCASSZ("U32"):sz /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private /Clamp1("NEAR"):clamp
Predicate("PT"):Pu
','Register:Rd
',' [ NonZeroRegister:Ra ]
','Register:Rb
','NonZeroRegister:Rc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((dim !=`Dim1@INVALID6)&&(dim !=`Dim1@INVALID7)) :
 "Invalid dim field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`ATOMCASSZ@INVALID3)&&(sz !=`ATOMCASSZ@INVALID4)&&(sz !=`ATOMCASSZ@INVALID5)&&(sz !=`ATOMCASSZ@INVALID6)&&(sz !=`ATOMCASSZ@INVALID7)) :
 "Invalid sz field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((clamp !=`Clamp1@INVALID3)) :
 "Invalid clamp field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-2))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
MISALIGNED_REG_ERROR
 (((Rb)+((Rb)==`Register@RZ)) % 2) == 0 :
 "Register Rb is misaligned"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rc)!=`Register@RZ) :
 "Disallowed register Rc"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@"32")||(sz == `ATOMCASSZ@U32)||(sz == `ATOMCASSZ@S32))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@"32")||(sz == `ATOMCASSZ@U32)||(sz == `ATOMCASSZ@S32))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((sz == `ATOMCASSZ@"32")||(sz == `ATOMCASSZ@U32)||(sz == `ATOMCASSZ@S32))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@"64")||(sz == `ATOMCASSZ@U64))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@"64")||(sz == `ATOMCASSZ@U64))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((sz == `ATOMCASSZ@"64")||(sz == `ATOMCASSZ@U64))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `ATOMCASSZ@"64")||(sz == `ATOMCASSZ@U64))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `ATOMCASSZ@"64")||(sz == `ATOMCASSZ@U64))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SUATOM_R_CAS ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SURFACE_COORDINATES);

PREDICATES
 IDEST_SIZE = (( ((sz == `AtomicInteger@U32)) + ((sz == `AtomicInteger@S32)) + ((sz == `AtomicInteger@SD32)) + ((sz == `AtomicInteger@U64)*2) + ((sz == `AtomicInteger@S64)*2) + ((sz == `AtomicInteger@SD64)*2) + ((sz == `AtomicInteger@F32.FTZ.RN) + ((sz == `AtomicInteger@F16x2.FTZ.RN)*1)) )*32);
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (( ((sz == `AtomicInteger@U32)) + ((sz == `AtomicInteger@S32)) + ((sz == `AtomicInteger@SD32)) + ((sz == `AtomicInteger@U64)*2) + ((sz == `AtomicInteger@S64)*2) + ((sz == `AtomicInteger@SD64)*2) + ((sz == `AtomicInteger@F32.FTZ.RN) + ((sz == `AtomicInteger@F16x2.FTZ.RN)*1)) )*32*2);
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = ((dim<2) + ((dim==2)*2) + ((dim==3)*2) + ((dim>3)*3))*32;
 VIRTUAL_QUEUE = $VQ_SUATOM ;

OPCODES
        SUATOMmio_pipe =  0b1110010110;
        SUATOM =  0b1110010110;

ENCODING
!suatom_cas_reg_weakonly__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=ba;
BITS_3_63_61_dim=dim;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_2_60_59_clamp=clamp;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "suld_d_imm_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DOnly:d /BA("noba"):ba /Dim1:dim /COP("EN"):cop /SZ_U8_S8_U16_S16_32_64_128("32"):sz /SEM_WEAK_STRONG_MMIO("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private /Clamp1("NEAR"):clamp
Predicate("PT"):Pu
','Register:Rd
',' [ NonZeroRegister:Ra ]
','UImm(5)*:bank5
','UImm(14)*:tsPtrIdx
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((dim !=`Dim1@INVALID6)&&(dim !=`Dim1@INVALID7)) :
 "Invalid dim field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`SZ_U8_S8_U16_S16_32_64_128@INVALID7)) :
 "Invalid sz field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sem !=`SEM_WEAK_STRONG_MMIO@INVALID0)) :
 "Invalid sem field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((clamp !=`Clamp1@INVALID3)) :
 "Invalid clamp field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"128"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"128"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SULD_D_I ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SURFACE_COORDINATES);

PREDICATES
 IDEST_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((dim<2) + ((dim==2)*2) + ((dim==3)*2) + ((dim>3)*3))*32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        SULDmio_pipe =  0b101110011001;
        SULD =  0b101110011001;

ENCODING
!suld_d_imm__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=ba;
BITS_3_63_61_dim=dim;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_2_60_59_clamp=clamp;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_5_58_54_Sb_bank=bank5;
BITS_14_53_40_Sb_addr=tsPtrIdx;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "suld_d_tid_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DOnly:d /BA("noba"):ba /Dim1:dim /COP("EN"):cop /SZ_U8_S8_U16_S16_32_64_128("32"):sz /SEM_WEAK_STRONG_MMIO("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private /Clamp1("NEAR"):clamp
Predicate("PT"):Pu
','Register:Rd
',' [ NonZeroRegister:Ra ]
','UImm(5)*:bank5
','UImm(6)*:hdrtblbase6
','UImm(8)*:tid8
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((dim !=`Dim1@INVALID6)&&(dim !=`Dim1@INVALID7)) :
 "Invalid dim field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`SZ_U8_S8_U16_S16_32_64_128@INVALID7)) :
 "Invalid sz field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sem !=`SEM_WEAK_STRONG_MMIO@INVALID0)) :
 "Invalid sem field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((clamp !=`Clamp1@INVALID3)) :
 "Invalid clamp field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"128"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"128"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SULD_D_TID ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SURFACE_COORDINATES);

PREDICATES
 IDEST_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((dim<2) + ((dim==2)*2) + ((dim==3)*2) + ((dim>3)*3))*32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        SULDmio_pipe =  0b11110011001;
        SULD =  0b11110011001;

ENCODING
!suld_d_tid__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=ba;
BITS_3_63_61_dim=dim;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_2_60_59_clamp=clamp;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_5_58_54_Sb_bank=bank5;
BITS_6_45_40_hdrtblbase6=hdrtblbase6;
BITS_8_53_46_tid8=tid8;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "suld_d_reg_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DOnly:d /BA("noba"):ba /Dim1:dim /COP("EN"):cop /SZ_U8_S8_U16_S16_32_64_128("32"):sz /SEM_WEAK_STRONG_MMIO("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private /Clamp1("NEAR"):clamp
Predicate("PT"):Pu
','Register:Rd
',' [ NonZeroRegister:Ra ]
','NonZeroRegister:Rc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((dim !=`Dim1@INVALID6)&&(dim !=`Dim1@INVALID7)) :
 "Invalid dim field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`SZ_U8_S8_U16_S16_32_64_128@INVALID7)) :
 "Invalid sz field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sem !=`SEM_WEAK_STRONG_MMIO@INVALID0)) :
 "Invalid sem field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((clamp !=`Clamp1@INVALID3)) :
 "Invalid clamp field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rc)!=`Register@RZ) :
 "Disallowed register Rc"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"128"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"128"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SULD_D_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SURFACE_COORDINATES);

PREDICATES
 IDEST_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = ((dim<2) + ((dim==2)*2) + ((dim==3)*2) + ((dim>3)*3))*32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        SULDmio_pipe =  0b100110011010;
        SULD =  0b100110011010;

ENCODING
!suld_d_reg__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=ba;
BITS_3_63_61_dim=dim;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_2_60_59_clamp=clamp;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "suld_p_imm_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /PONLY:p /Dim1:dim /COP("EN"):cop /SEM_WEAK_STRONG_MMIO("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private /RGBA("RGBA"):rgba /Clamp1("NEAR"):clamp
Predicate("PT"):Pu
','Register:Rd
',' [ NonZeroRegister:Ra ]
','UImm(5)*:bank5
','UImm(14)*:tsPtrIdx
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((dim !=`Dim1@INVALID6)&&(dim !=`Dim1@INVALID7)) :
 "Invalid dim field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sem !=`SEM_WEAK_STRONG_MMIO@INVALID0)) :
 "Invalid sem field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((rgba !=`RGBA@INVALID0)&&(rgba !=`RGBA@INVALID2)&&(rgba !=`RGBA@INVALID4)&&(rgba !=`RGBA@INVALID5)&&(rgba !=`RGBA@INVALID6)&&(rgba !=`RGBA@INVALID7)&&(rgba !=`RGBA@INVALID8)&&(rgba !=`RGBA@INVALID9)&&(rgba !=`RGBA@INVALID10)&&(rgba !=`RGBA@INVALID11)&&(rgba !=`RGBA@INVALID12)&&(rgba !=`RGBA@INVALID13)&&(rgba !=`RGBA@INVALID14)) :
 "Invalid rgba field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((clamp !=`Clamp1@INVALID3)) :
 "Invalid clamp field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((rgba == `RGBA@RG))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((rgba == `RGBA@RG))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((rgba == `RGBA@RGBA))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((rgba == `RGBA@RGBA))) -> (((((Rd)+((Rd)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SULD_P_I ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SURFACE_COORDINATES);

PREDICATES
 IDEST_SIZE = ((((rgba==`RGBA@R))*1+ ((rgba==`RGBA@RG))*2+ ((rgba==`RGBA@RGBA))*4))*32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((dim<2) + ((dim==2)*2) + ((dim==3)*2) + ((dim>3)*3))*32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        SULDmio_pipe =  0b101110010111;
        SULD =  0b101110010111;

ENCODING
!suld_p_imm__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_63_61_dim=dim;
BITS_3_86_84_cop=cop;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_4_75_72_PixMaskU04=rgba;
BITS_2_60_59_clamp=clamp;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_5_58_54_Sb_bank=bank5;
BITS_14_53_40_Sb_addr=tsPtrIdx;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "suld_p_tid_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /PONLY:p /Dim1:dim /COP("EN"):cop /SEM_WEAK_STRONG_MMIO("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private /RGBA("RGBA"):rgba /Clamp1("NEAR"):clamp
Predicate("PT"):Pu
','Register:Rd
',' [ NonZeroRegister:Ra ]
','UImm(5)*:bank5
','UImm(6)*:hdrtblbase6
','UImm(8)*:tid8
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((dim !=`Dim1@INVALID6)&&(dim !=`Dim1@INVALID7)) :
 "Invalid dim field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sem !=`SEM_WEAK_STRONG_MMIO@INVALID0)) :
 "Invalid sem field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((rgba !=`RGBA@INVALID0)&&(rgba !=`RGBA@INVALID2)&&(rgba !=`RGBA@INVALID4)&&(rgba !=`RGBA@INVALID5)&&(rgba !=`RGBA@INVALID6)&&(rgba !=`RGBA@INVALID7)&&(rgba !=`RGBA@INVALID8)&&(rgba !=`RGBA@INVALID9)&&(rgba !=`RGBA@INVALID10)&&(rgba !=`RGBA@INVALID11)&&(rgba !=`RGBA@INVALID12)&&(rgba !=`RGBA@INVALID13)&&(rgba !=`RGBA@INVALID14)) :
 "Invalid rgba field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((clamp !=`Clamp1@INVALID3)) :
 "Invalid clamp field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((rgba == `RGBA@RG))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((rgba == `RGBA@RG))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((rgba == `RGBA@RGBA))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((rgba == `RGBA@RGBA))) -> (((((Rd)+((Rd)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SULD_P_TID ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SURFACE_COORDINATES);

PREDICATES
 IDEST_SIZE = ((((rgba==`RGBA@R))*1+ ((rgba==`RGBA@RG))*2+ ((rgba==`RGBA@RGBA))*4))*32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((dim<2) + ((dim==2)*2) + ((dim==3)*2) + ((dim>3)*3))*32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        SULDmio_pipe =  0b11110010111;
        SULD =  0b11110010111;

ENCODING
!suld_p_tid__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_63_61_dim=dim;
BITS_3_86_84_cop=cop;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_4_75_72_PixMaskU04=rgba;
BITS_2_60_59_clamp=clamp;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_5_58_54_Sb_bank=bank5;
BITS_6_45_40_hdrtblbase6=hdrtblbase6;
BITS_8_53_46_tid8=tid8;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "suld_p_reg_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /PONLY:p /Dim1:dim /COP("EN"):cop /SEM_WEAK_STRONG_MMIO("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private /RGBA("RGBA"):rgba /Clamp1("NEAR"):clamp
Predicate("PT"):Pu
','Register:Rd
',' [ NonZeroRegister:Ra ]
','NonZeroRegister:Rc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((dim !=`Dim1@INVALID6)&&(dim !=`Dim1@INVALID7)) :
 "Invalid dim field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sem !=`SEM_WEAK_STRONG_MMIO@INVALID0)) :
 "Invalid sem field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((rgba !=`RGBA@INVALID0)&&(rgba !=`RGBA@INVALID2)&&(rgba !=`RGBA@INVALID4)&&(rgba !=`RGBA@INVALID5)&&(rgba !=`RGBA@INVALID6)&&(rgba !=`RGBA@INVALID7)&&(rgba !=`RGBA@INVALID8)&&(rgba !=`RGBA@INVALID9)&&(rgba !=`RGBA@INVALID10)&&(rgba !=`RGBA@INVALID11)&&(rgba !=`RGBA@INVALID12)&&(rgba !=`RGBA@INVALID13)&&(rgba !=`RGBA@INVALID14)) :
 "Invalid rgba field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((clamp !=`Clamp1@INVALID3)) :
 "Invalid clamp field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rc)!=`Register@RZ) :
 "Disallowed register Rc"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((rgba == `RGBA@RG))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((rgba == `RGBA@RG))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((rgba == `RGBA@RGBA))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((rgba == `RGBA@RGBA))) -> (((((Rd)+((Rd)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SULD_P_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SURFACE_COORDINATES);

PREDICATES
 IDEST_SIZE = ((((rgba==`RGBA@R))*1+ ((rgba==`RGBA@RG))*2+ ((rgba==`RGBA@RGBA))*4))*32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = ((dim<2) + ((dim==2)*2) + ((dim==3)*2) + ((dim>3)*3))*32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        SULDmio_pipe =  0b100110011000;
        SULD =  0b100110011000;

ENCODING
!suld_p_reg__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_63_61_dim=dim;
BITS_3_86_84_cop=cop;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_4_75_72_PixMaskU04=rgba;
BITS_2_60_59_clamp=clamp;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "suld_d_imm_weakonly_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DOnly:d /BA("noba"):ba /Dim1:dim /COP("EN"):cop /SZ_U8_S8_U16_S16_32_64_128("32"):sz /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private /Clamp1("NEAR"):clamp
Predicate("PT"):Pu
','Register:Rd
',' [ NonZeroRegister:Ra ]
','UImm(5)*:bank5
','UImm(14)*:tsPtrIdx
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((dim !=`Dim1@INVALID6)&&(dim !=`Dim1@INVALID7)) :
 "Invalid dim field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`SZ_U8_S8_U16_S16_32_64_128@INVALID7)) :
 "Invalid sz field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((clamp !=`Clamp1@INVALID3)) :
 "Invalid clamp field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"128"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"128"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SULD_D_I ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SURFACE_COORDINATES);

PREDICATES
 IDEST_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((dim<2) + ((dim==2)*2) + ((dim==3)*2) + ((dim>3)*3))*32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        SULDmio_pipe =  0b101110011001;
        SULD =  0b101110011001;

ENCODING
!suld_d_imm_weakonly__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=ba;
BITS_3_63_61_dim=dim;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_2_60_59_clamp=clamp;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_5_58_54_Sb_bank=bank5;
BITS_14_53_40_Sb_addr=tsPtrIdx;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "suld_d_tid_weakonly_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DOnly:d /BA("noba"):ba /Dim1:dim /COP("EN"):cop /SZ_U8_S8_U16_S16_32_64_128("32"):sz /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private /Clamp1("NEAR"):clamp
Predicate("PT"):Pu
','Register:Rd
',' [ NonZeroRegister:Ra ]
','UImm(5)*:bank5
','UImm(6)*:hdrtblbase6
','UImm(8)*:tid8
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((dim !=`Dim1@INVALID6)&&(dim !=`Dim1@INVALID7)) :
 "Invalid dim field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`SZ_U8_S8_U16_S16_32_64_128@INVALID7)) :
 "Invalid sz field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((clamp !=`Clamp1@INVALID3)) :
 "Invalid clamp field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"128"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"128"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SULD_D_TID ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SURFACE_COORDINATES);

PREDICATES
 IDEST_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((dim<2) + ((dim==2)*2) + ((dim==3)*2) + ((dim>3)*3))*32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        SULDmio_pipe =  0b11110011001;
        SULD =  0b11110011001;

ENCODING
!suld_d_tid_weakonly__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=ba;
BITS_3_63_61_dim=dim;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_2_60_59_clamp=clamp;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_5_58_54_Sb_bank=bank5;
BITS_6_45_40_hdrtblbase6=hdrtblbase6;
BITS_8_53_46_tid8=tid8;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "suld_d_reg_weakonly_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DOnly:d /BA("noba"):ba /Dim1:dim /COP("EN"):cop /SZ_U8_S8_U16_S16_32_64_128("32"):sz /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private /Clamp1("NEAR"):clamp
Predicate("PT"):Pu
','Register:Rd
',' [ NonZeroRegister:Ra ]
','NonZeroRegister:Rc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((dim !=`Dim1@INVALID6)&&(dim !=`Dim1@INVALID7)) :
 "Invalid dim field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`SZ_U8_S8_U16_S16_32_64_128@INVALID7)) :
 "Invalid sz field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((clamp !=`Clamp1@INVALID3)) :
 "Invalid clamp field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rc)!=`Register@RZ) :
 "Disallowed register Rc"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"64"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"64"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"128"))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"128"))) -> (((((Rd)+((Rd)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SULD_D_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SURFACE_COORDINATES);

PREDICATES
 IDEST_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = ((dim<2) + ((dim==2)*2) + ((dim==3)*2) + ((dim>3)*3))*32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        SULDmio_pipe =  0b100110011010;
        SULD =  0b100110011010;

ENCODING
!suld_d_reg_weakonly__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=ba;
BITS_3_63_61_dim=dim;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_2_60_59_clamp=clamp;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "suld_p_imm_weakonly_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /PONLY:p /Dim1:dim /COP("EN"):cop /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private /RGBA("RGBA"):rgba /Clamp1("NEAR"):clamp
Predicate("PT"):Pu
','Register:Rd
',' [ NonZeroRegister:Ra ]
','UImm(5)*:bank5
','UImm(14)*:tsPtrIdx
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((dim !=`Dim1@INVALID6)&&(dim !=`Dim1@INVALID7)) :
 "Invalid dim field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((rgba !=`RGBA@INVALID0)&&(rgba !=`RGBA@INVALID2)&&(rgba !=`RGBA@INVALID4)&&(rgba !=`RGBA@INVALID5)&&(rgba !=`RGBA@INVALID6)&&(rgba !=`RGBA@INVALID7)&&(rgba !=`RGBA@INVALID8)&&(rgba !=`RGBA@INVALID9)&&(rgba !=`RGBA@INVALID10)&&(rgba !=`RGBA@INVALID11)&&(rgba !=`RGBA@INVALID12)&&(rgba !=`RGBA@INVALID13)&&(rgba !=`RGBA@INVALID14)) :
 "Invalid rgba field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((clamp !=`Clamp1@INVALID3)) :
 "Invalid clamp field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((rgba == `RGBA@RG))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((rgba == `RGBA@RG))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((rgba == `RGBA@RGBA))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((rgba == `RGBA@RGBA))) -> (((((Rd)+((Rd)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SULD_P_I ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SURFACE_COORDINATES);

PREDICATES
 IDEST_SIZE = ((((rgba==`RGBA@R))*1+ ((rgba==`RGBA@RG))*2+ ((rgba==`RGBA@RGBA))*4))*32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((dim<2) + ((dim==2)*2) + ((dim==3)*2) + ((dim>3)*3))*32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        SULDmio_pipe =  0b101110010111;
        SULD =  0b101110010111;

ENCODING
!suld_p_imm_weakonly__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_63_61_dim=dim;
BITS_3_86_84_cop=cop;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_4_75_72_PixMaskU04=rgba;
BITS_2_60_59_clamp=clamp;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_5_58_54_Sb_bank=bank5;
BITS_14_53_40_Sb_addr=tsPtrIdx;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "suld_p_tid_weakonly_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /PONLY:p /Dim1:dim /COP("EN"):cop /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private /RGBA("RGBA"):rgba /Clamp1("NEAR"):clamp
Predicate("PT"):Pu
','Register:Rd
',' [ NonZeroRegister:Ra ]
','UImm(5)*:bank5
','UImm(6)*:hdrtblbase6
','UImm(8)*:tid8
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((dim !=`Dim1@INVALID6)&&(dim !=`Dim1@INVALID7)) :
 "Invalid dim field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((rgba !=`RGBA@INVALID0)&&(rgba !=`RGBA@INVALID2)&&(rgba !=`RGBA@INVALID4)&&(rgba !=`RGBA@INVALID5)&&(rgba !=`RGBA@INVALID6)&&(rgba !=`RGBA@INVALID7)&&(rgba !=`RGBA@INVALID8)&&(rgba !=`RGBA@INVALID9)&&(rgba !=`RGBA@INVALID10)&&(rgba !=`RGBA@INVALID11)&&(rgba !=`RGBA@INVALID12)&&(rgba !=`RGBA@INVALID13)&&(rgba !=`RGBA@INVALID14)) :
 "Invalid rgba field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((clamp !=`Clamp1@INVALID3)) :
 "Invalid clamp field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((rgba == `RGBA@RG))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((rgba == `RGBA@RG))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((rgba == `RGBA@RGBA))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((rgba == `RGBA@RGBA))) -> (((((Rd)+((Rd)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SULD_P_TID ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SURFACE_COORDINATES);

PREDICATES
 IDEST_SIZE = ((((rgba==`RGBA@R))*1+ ((rgba==`RGBA@RG))*2+ ((rgba==`RGBA@RGBA))*4))*32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((dim<2) + ((dim==2)*2) + ((dim==3)*2) + ((dim>3)*3))*32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        SULDmio_pipe =  0b11110010111;
        SULD =  0b11110010111;

ENCODING
!suld_p_tid_weakonly__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_63_61_dim=dim;
BITS_3_86_84_cop=cop;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_4_75_72_PixMaskU04=rgba;
BITS_2_60_59_clamp=clamp;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_5_58_54_Sb_bank=bank5;
BITS_6_45_40_hdrtblbase6=hdrtblbase6;
BITS_8_53_46_tid8=tid8;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "suld_p_reg_weakonly_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /PONLY:p /Dim1:dim /COP("EN"):cop /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private /RGBA("RGBA"):rgba /Clamp1("NEAR"):clamp
Predicate("PT"):Pu
','Register:Rd
',' [ NonZeroRegister:Ra ]
','NonZeroRegister:Rc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((dim !=`Dim1@INVALID6)&&(dim !=`Dim1@INVALID7)) :
 "Invalid dim field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((rgba !=`RGBA@INVALID0)&&(rgba !=`RGBA@INVALID2)&&(rgba !=`RGBA@INVALID4)&&(rgba !=`RGBA@INVALID5)&&(rgba !=`RGBA@INVALID6)&&(rgba !=`RGBA@INVALID7)&&(rgba !=`RGBA@INVALID8)&&(rgba !=`RGBA@INVALID9)&&(rgba !=`RGBA@INVALID10)&&(rgba !=`RGBA@INVALID11)&&(rgba !=`RGBA@INVALID12)&&(rgba !=`RGBA@INVALID13)&&(rgba !=`RGBA@INVALID14)) :
 "Invalid rgba field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((clamp !=`Clamp1@INVALID3)) :
 "Invalid clamp field value"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rc)!=`Register@RZ) :
 "Disallowed register Rc"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((rgba == `RGBA@RG))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((rgba == `RGBA@RG))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((rgba == `RGBA@RGBA))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((rgba == `RGBA@RGBA))) -> (((((Rd)+((Rd)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SULD_P_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SURFACE_COORDINATES);

PREDICATES
 IDEST_SIZE = ((((rgba==`RGBA@R))*1+ ((rgba==`RGBA@RG))*2+ ((rgba==`RGBA@RGBA))*4))*32;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = ((dim<2) + ((dim==2)*2) + ((dim==3)*2) + ((dim>3)*3))*32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        SULDmio_pipe =  0b100110011000;
        SULD =  0b100110011000;

ENCODING
!suld_p_reg_weakonly__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_63_61_dim=dim;
BITS_3_86_84_cop=cop;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_4_75_72_PixMaskU04=rgba;
BITS_2_60_59_clamp=clamp;
BITS_3_83_81_Pu=Pu;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=*Ra;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "sured_imm_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DOnly:d /BA("noba"):ba /Dim1:dim /RedOp:op /COP("EN"):cop /SURFACESIZE("U32"):sz /SEM_WEAK_STRONG("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private /Clamp1("NEAR"):clamp
 [ NonZeroRegister:Ra ]
','Register:Rb
','UImm(5)*:bank5
','UImm(14)*:tsPtrIdx
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((dim !=`Dim1@INVALID6)&&(dim !=`Dim1@INVALID7)) :
 "Invalid dim field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sem !=`SEM_WEAK_STRONG@INVALID0)&&(sem !=`SEM_WEAK_STRONG@INVALID3)) :
 "Invalid sem field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((clamp !=`Clamp1@INVALID3)) :
 "Invalid clamp field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@SD64))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@SD64))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `RedOp@ADD))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@F32.FTZ.RN)||(sz == `SURFACESIZE@F16x2.RN)||(sz == `SURFACESIZE@SD32))) :
 "Invalid instruction combination ( rule name: ADD)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `RedOp@MIN)||(op == `RedOp@MAX))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@F16x2.RN)||(sz == `SURFACESIZE@SD32)||(sz == `SURFACESIZE@SD64))) :
 "Invalid instruction combination ( rule name: MIN_MAX)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `RedOp@DEC)||(op == `RedOp@INC))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32))) :
 "Invalid instruction combination ( rule name: INC_DEC)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `RedOp@AND)||(op == `RedOp@XOR)||(op == `RedOp@OR))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@SD32))) :
 "Invalid instruction combination ( rule name: AND_OR_XOR)"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SURED_I ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SURFACE_COORDINATES);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (( ((sz == `AtomicInteger@U32)) + ((sz == `AtomicInteger@S32)) + ((sz == `AtomicInteger@SD32)) + ((sz == `AtomicInteger@U64)*2) + ((sz == `AtomicInteger@S64)*2) + ((sz == `AtomicInteger@SD64)*2) + ((sz == `AtomicInteger@F32.FTZ.RN) + ((sz == `AtomicInteger@F16x2.FTZ.RN)*1)) )*32);
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((dim<2) + ((dim==2)*2) + ((dim==3)*2) + ((dim>3)*3))*32;
 VIRTUAL_QUEUE = $VQ_SUST ;

OPCODES
        SUREDmio_pipe =  0b10110011111;
        SURED =  0b10110011111;

ENCODING
!sured_imm__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=ba;
BITS_3_63_61_dim=dim;
BITS_3_89_87_Pp=op;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_2_60_59_clamp=clamp;
BITS_8_31_24_Ra=*Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_14_53_40_Sb_addr=tsPtrIdx;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "sured_tid_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DOnly:d /BA("noba"):ba /Dim1:dim /RedOp:op /COP("EN"):cop /SURFACESIZE("U32"):sz /SEM_WEAK_STRONG("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private /Clamp1("NEAR"):clamp
 [ NonZeroRegister:Ra ]
','Register:Rb
','UImm(5)*:bank5
','UImm(6)*:hdrtblbase6
','UImm(8)*:tid8
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((dim !=`Dim1@INVALID6)&&(dim !=`Dim1@INVALID7)) :
 "Invalid dim field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sem !=`SEM_WEAK_STRONG@INVALID0)&&(sem !=`SEM_WEAK_STRONG@INVALID3)) :
 "Invalid sem field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((clamp !=`Clamp1@INVALID3)) :
 "Invalid clamp field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@SD64))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@SD64))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `RedOp@ADD))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@F32.FTZ.RN)||(sz == `SURFACESIZE@F16x2.RN)||(sz == `SURFACESIZE@SD32))) :
 "Invalid instruction combination ( rule name: ADD)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `RedOp@MIN)||(op == `RedOp@MAX))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@F16x2.RN)||(sz == `SURFACESIZE@SD32)||(sz == `SURFACESIZE@SD64))) :
 "Invalid instruction combination ( rule name: MIN_MAX)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `RedOp@DEC)||(op == `RedOp@INC))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32))) :
 "Invalid instruction combination ( rule name: INC_DEC)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `RedOp@AND)||(op == `RedOp@XOR)||(op == `RedOp@OR))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@SD32))) :
 "Invalid instruction combination ( rule name: AND_OR_XOR)"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SURED_TID ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SURFACE_COORDINATES);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (( ((sz == `AtomicInteger@U32)) + ((sz == `AtomicInteger@S32)) + ((sz == `AtomicInteger@SD32)) + ((sz == `AtomicInteger@U64)*2) + ((sz == `AtomicInteger@S64)*2) + ((sz == `AtomicInteger@SD64)*2) + ((sz == `AtomicInteger@F32.FTZ.RN) + ((sz == `AtomicInteger@F16x2.FTZ.RN)*1)) )*32);
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((dim<2) + ((dim==2)*2) + ((dim==3)*2) + ((dim>3)*3))*32;
 VIRTUAL_QUEUE = $VQ_SUST ;

OPCODES
        SUREDmio_pipe =  0b11110011111;
        SURED =  0b11110011111;

ENCODING
!sured_tid__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=ba;
BITS_3_63_61_dim=dim;
BITS_3_89_87_Pp=op;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_2_60_59_clamp=clamp;
BITS_8_31_24_Ra=*Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_6_45_40_hdrtblbase6=hdrtblbase6;
BITS_8_53_46_tid8=tid8;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "sured_reg_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DOnly:d /BA("noba"):ba /Dim1:dim /RedOp:op /COP("EN"):cop /SURFACESIZE("U32"):sz /SEM_WEAK_STRONG("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private /Clamp1("NEAR"):clamp
 [ NonZeroRegister:Ra ]
','Register:Rb
','NonZeroRegister:Rc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((dim !=`Dim1@INVALID6)&&(dim !=`Dim1@INVALID7)) :
 "Invalid dim field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sem !=`SEM_WEAK_STRONG@INVALID0)&&(sem !=`SEM_WEAK_STRONG@INVALID3)) :
 "Invalid sem field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((clamp !=`Clamp1@INVALID3)) :
 "Invalid clamp field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rc)!=`Register@RZ) :
 "Disallowed register Rc"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@SD64))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@SD64))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `RedOp@ADD))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@F32.FTZ.RN)||(sz == `SURFACESIZE@F16x2.RN)||(sz == `SURFACESIZE@SD32))) :
 "Invalid instruction combination ( rule name: ADD)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `RedOp@MIN)||(op == `RedOp@MAX))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@F16x2.RN)||(sz == `SURFACESIZE@SD32)||(sz == `SURFACESIZE@SD64))) :
 "Invalid instruction combination ( rule name: MIN_MAX)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `RedOp@DEC)||(op == `RedOp@INC))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32))) :
 "Invalid instruction combination ( rule name: INC_DEC)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `RedOp@AND)||(op == `RedOp@XOR)||(op == `RedOp@OR))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@SD32))) :
 "Invalid instruction combination ( rule name: AND_OR_XOR)"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SURED_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SURFACE_COORDINATES);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (( ((sz == `AtomicInteger@U32)) + ((sz == `AtomicInteger@S32)) + ((sz == `AtomicInteger@SD32)) + ((sz == `AtomicInteger@U64)*2) + ((sz == `AtomicInteger@S64)*2) + ((sz == `AtomicInteger@SD64)*2) + ((sz == `AtomicInteger@F32.FTZ.RN) + ((sz == `AtomicInteger@F16x2.FTZ.RN)*1)) )*32);
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = ((dim<2) + ((dim==2)*2) + ((dim==3)*2) + ((dim>3)*3))*32;
 VIRTUAL_QUEUE = $VQ_SUST ;

OPCODES
        SUREDmio_pipe =  0b1110100000;
        SURED =  0b1110100000;

ENCODING
!sured_reg__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=ba;
BITS_3_63_61_dim=dim;
BITS_3_89_87_Pp=op;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_2_60_59_clamp=clamp;
BITS_8_31_24_Ra=*Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "sured_imm_weakonly_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DOnly:d /BA("noba"):ba /Dim1:dim /RedOp:op /COP("EN"):cop /SURFACESIZE("U32"):sz /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private /Clamp1("NEAR"):clamp
 [ NonZeroRegister:Ra ]
','Register:Rb
','UImm(5)*:bank5
','UImm(14)*:tsPtrIdx
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((dim !=`Dim1@INVALID6)&&(dim !=`Dim1@INVALID7)) :
 "Invalid dim field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((clamp !=`Clamp1@INVALID3)) :
 "Invalid clamp field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@SD64))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@SD64))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `RedOp@ADD))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@F32.FTZ.RN)||(sz == `SURFACESIZE@F16x2.RN)||(sz == `SURFACESIZE@SD32))) :
 "Invalid instruction combination ( rule name: ADD)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `RedOp@MIN)||(op == `RedOp@MAX))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@F16x2.RN)||(sz == `SURFACESIZE@SD32)||(sz == `SURFACESIZE@SD64))) :
 "Invalid instruction combination ( rule name: MIN_MAX)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `RedOp@DEC)||(op == `RedOp@INC))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32))) :
 "Invalid instruction combination ( rule name: INC_DEC)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `RedOp@AND)||(op == `RedOp@XOR)||(op == `RedOp@OR))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@SD32))) :
 "Invalid instruction combination ( rule name: AND_OR_XOR)"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SURED_I ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SURFACE_COORDINATES);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (( ((sz == `AtomicInteger@U32)) + ((sz == `AtomicInteger@S32)) + ((sz == `AtomicInteger@SD32)) + ((sz == `AtomicInteger@U64)*2) + ((sz == `AtomicInteger@S64)*2) + ((sz == `AtomicInteger@SD64)*2) + ((sz == `AtomicInteger@F32.FTZ.RN) + ((sz == `AtomicInteger@F16x2.FTZ.RN)*1)) )*32);
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((dim<2) + ((dim==2)*2) + ((dim==3)*2) + ((dim>3)*3))*32;
 VIRTUAL_QUEUE = $VQ_SUST ;

OPCODES
        SUREDmio_pipe =  0b10110011111;
        SURED =  0b10110011111;

ENCODING
!sured_imm_weakonly__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=ba;
BITS_3_63_61_dim=dim;
BITS_3_89_87_Pp=op;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_2_60_59_clamp=clamp;
BITS_8_31_24_Ra=*Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_14_53_40_Sb_addr=tsPtrIdx;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "sured_tid_weakonly_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DOnly:d /BA("noba"):ba /Dim1:dim /RedOp:op /COP("EN"):cop /SURFACESIZE("U32"):sz /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private /Clamp1("NEAR"):clamp
 [ NonZeroRegister:Ra ]
','Register:Rb
','UImm(5)*:bank5
','UImm(6)*:hdrtblbase6
','UImm(8)*:tid8
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((dim !=`Dim1@INVALID6)&&(dim !=`Dim1@INVALID7)) :
 "Invalid dim field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((clamp !=`Clamp1@INVALID3)) :
 "Invalid clamp field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@SD64))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@SD64))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `RedOp@ADD))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@F32.FTZ.RN)||(sz == `SURFACESIZE@F16x2.RN)||(sz == `SURFACESIZE@SD32))) :
 "Invalid instruction combination ( rule name: ADD)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `RedOp@MIN)||(op == `RedOp@MAX))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@F16x2.RN)||(sz == `SURFACESIZE@SD32)||(sz == `SURFACESIZE@SD64))) :
 "Invalid instruction combination ( rule name: MIN_MAX)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `RedOp@DEC)||(op == `RedOp@INC))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32))) :
 "Invalid instruction combination ( rule name: INC_DEC)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `RedOp@AND)||(op == `RedOp@XOR)||(op == `RedOp@OR))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@SD32))) :
 "Invalid instruction combination ( rule name: AND_OR_XOR)"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SURED_TID ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SURFACE_COORDINATES);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (( ((sz == `AtomicInteger@U32)) + ((sz == `AtomicInteger@S32)) + ((sz == `AtomicInteger@SD32)) + ((sz == `AtomicInteger@U64)*2) + ((sz == `AtomicInteger@S64)*2) + ((sz == `AtomicInteger@SD64)*2) + ((sz == `AtomicInteger@F32.FTZ.RN) + ((sz == `AtomicInteger@F16x2.FTZ.RN)*1)) )*32);
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((dim<2) + ((dim==2)*2) + ((dim==3)*2) + ((dim>3)*3))*32;
 VIRTUAL_QUEUE = $VQ_SUST ;

OPCODES
        SUREDmio_pipe =  0b11110011111;
        SURED =  0b11110011111;

ENCODING
!sured_tid_weakonly__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=ba;
BITS_3_63_61_dim=dim;
BITS_3_89_87_Pp=op;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_2_60_59_clamp=clamp;
BITS_8_31_24_Ra=*Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_6_45_40_hdrtblbase6=hdrtblbase6;
BITS_8_53_46_tid8=tid8;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "sured_reg_weakonly_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DOnly:d /BA("noba"):ba /Dim1:dim /RedOp:op /COP("EN"):cop /SURFACESIZE("U32"):sz /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private /Clamp1("NEAR"):clamp
 [ NonZeroRegister:Ra ]
','Register:Rb
','NonZeroRegister:Rc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((dim !=`Dim1@INVALID6)&&(dim !=`Dim1@INVALID7)) :
 "Invalid dim field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((clamp !=`Clamp1@INVALID3)) :
 "Invalid clamp field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rc)!=`Register@RZ) :
 "Disallowed register Rc"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@SD64))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@SD64))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `RedOp@ADD))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@F32.FTZ.RN)||(sz == `SURFACESIZE@F16x2.RN)||(sz == `SURFACESIZE@SD32))) :
 "Invalid instruction combination ( rule name: ADD)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `RedOp@MIN)||(op == `RedOp@MAX))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@S64)||(sz == `SURFACESIZE@F16x2.RN)||(sz == `SURFACESIZE@SD32)||(sz == `SURFACESIZE@SD64))) :
 "Invalid instruction combination ( rule name: MIN_MAX)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `RedOp@DEC)||(op == `RedOp@INC))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32))) :
 "Invalid instruction combination ( rule name: INC_DEC)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((op == `RedOp@AND)||(op == `RedOp@XOR)||(op == `RedOp@OR))) -> (((sz == `SURFACESIZE@"32")||(sz == `SURFACESIZE@U32)||(sz == `SURFACESIZE@S32)||(sz == `SURFACESIZE@"64")||(sz == `SURFACESIZE@U64)||(sz == `SURFACESIZE@SD32))) :
 "Invalid instruction combination ( rule name: AND_OR_XOR)"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SURED_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SURFACE_COORDINATES);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (( ((sz == `AtomicInteger@U32)) + ((sz == `AtomicInteger@S32)) + ((sz == `AtomicInteger@SD32)) + ((sz == `AtomicInteger@U64)*2) + ((sz == `AtomicInteger@S64)*2) + ((sz == `AtomicInteger@SD64)*2) + ((sz == `AtomicInteger@F32.FTZ.RN) + ((sz == `AtomicInteger@F16x2.FTZ.RN)*1)) )*32);
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = ((dim<2) + ((dim==2)*2) + ((dim==3)*2) + ((dim>3)*3))*32;
 VIRTUAL_QUEUE = $VQ_SUST ;

OPCODES
        SUREDmio_pipe =  0b1110100000;
        SURED =  0b1110100000;

ENCODING
!sured_reg_weakonly__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=ba;
BITS_3_63_61_dim=dim;
BITS_3_89_87_Pp=op;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_2_60_59_clamp=clamp;
BITS_8_31_24_Ra=*Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "sust_d_imm_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DOnly:d /BA("noba"):ba /Dim1:dim /COP("EN"):cop /SZ_U8_S8_U16_S16_32_64_128("32"):sz /SEM_WEAK_STRONG_MMIO("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private /Clamp1("NEAR"):clamp
 [ NonZeroRegister:Ra ]
','Register:Rb
','UImm(5)*:bank5
','UImm(14)*:tsPtrIdx
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((dim !=`Dim1@INVALID6)&&(dim !=`Dim1@INVALID7)) :
 "Invalid dim field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`SZ_U8_S8_U16_S16_32_64_128@INVALID7)) :
 "Invalid sz field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sem !=`SEM_WEAK_STRONG_MMIO@INVALID0)) :
 "Invalid sem field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((clamp !=`Clamp1@INVALID3)) :
 "Invalid clamp field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"64"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"64"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"128"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"128"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SUST_D_I ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SURFACE_COORDINATES);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((dim<2) + ((dim==2)*2) + ((dim==3)*2) + ((dim>3)*3))*32;
 VIRTUAL_QUEUE = $VQ_SUST ;

OPCODES
        SUSTmio_pipe =  0b101110011101;
        SUST =  0b101110011101;

ENCODING
!sust_d_imm__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=ba;
BITS_3_63_61_dim=dim;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_2_60_59_clamp=clamp;
BITS_8_31_24_Ra=*Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_14_53_40_Sb_addr=tsPtrIdx;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "sust_d_tid_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DOnly:d /BA("noba"):ba /Dim1:dim /COP("EN"):cop /SZ_U8_S8_U16_S16_32_64_128("32"):sz /SEM_WEAK_STRONG_MMIO("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private /Clamp1("NEAR"):clamp
 [ NonZeroRegister:Ra ]
','Register:Rb
','UImm(5)*:bank5
','UImm(6)*:hdrtblbase6
','UImm(8)*:tid8
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((dim !=`Dim1@INVALID6)&&(dim !=`Dim1@INVALID7)) :
 "Invalid dim field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`SZ_U8_S8_U16_S16_32_64_128@INVALID7)) :
 "Invalid sz field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sem !=`SEM_WEAK_STRONG_MMIO@INVALID0)) :
 "Invalid sem field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((clamp !=`Clamp1@INVALID3)) :
 "Invalid clamp field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"64"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"64"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"128"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"128"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SUST_D_TID ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SURFACE_COORDINATES);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((dim<2) + ((dim==2)*2) + ((dim==3)*2) + ((dim>3)*3))*32;
 VIRTUAL_QUEUE = $VQ_SUST ;

OPCODES
        SUSTmio_pipe =  0b11110011101;
        SUST =  0b11110011101;

ENCODING
!sust_d_tid__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=ba;
BITS_3_63_61_dim=dim;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_2_60_59_clamp=clamp;
BITS_8_31_24_Ra=*Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_6_45_40_hdrtblbase6=hdrtblbase6;
BITS_8_53_46_tid8=tid8;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "sust_d_reg_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DOnly:d /BA("noba"):ba /Dim1:dim /COP("EN"):cop /SZ_U8_S8_U16_S16_32_64_128("32"):sz /SEM_WEAK_STRONG_MMIO("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private /Clamp1("NEAR"):clamp
 [ NonZeroRegister:Ra ]
','Register:Rb
','NonZeroRegister:Rc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((dim !=`Dim1@INVALID6)&&(dim !=`Dim1@INVALID7)) :
 "Invalid dim field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`SZ_U8_S8_U16_S16_32_64_128@INVALID7)) :
 "Invalid sz field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sem !=`SEM_WEAK_STRONG_MMIO@INVALID0)) :
 "Invalid sem field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((clamp !=`Clamp1@INVALID3)) :
 "Invalid clamp field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rc)!=`Register@RZ) :
 "Disallowed register Rc"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"64"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"64"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"128"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"128"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SUST_D_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SURFACE_COORDINATES);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = ((dim<2) + ((dim==2)*2) + ((dim==3)*2) + ((dim>3)*3))*32;
 VIRTUAL_QUEUE = $VQ_SUST ;

OPCODES
        SUSTmio_pipe =  0b100110011110;
        SUST =  0b100110011110;

ENCODING
!sust_d_reg__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=ba;
BITS_3_63_61_dim=dim;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_2_60_59_clamp=clamp;
BITS_8_31_24_Ra=*Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "sust_p_imm_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /PONLY:p /Dim1:dim /COP("EN"):cop /SEM_WEAK_STRONG_MMIO("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private /RGBA("RGBA"):rgba /Clamp1("NEAR"):clamp
 [ NonZeroRegister:Ra ]
','Register:Rb
','UImm(5)*:bank5
','UImm(14)*:tsPtrIdx
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((dim !=`Dim1@INVALID6)&&(dim !=`Dim1@INVALID7)) :
 "Invalid dim field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sem !=`SEM_WEAK_STRONG_MMIO@INVALID0)) :
 "Invalid sem field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((rgba !=`RGBA@INVALID0)&&(rgba !=`RGBA@INVALID2)&&(rgba !=`RGBA@INVALID4)&&(rgba !=`RGBA@INVALID5)&&(rgba !=`RGBA@INVALID6)&&(rgba !=`RGBA@INVALID7)&&(rgba !=`RGBA@INVALID8)&&(rgba !=`RGBA@INVALID9)&&(rgba !=`RGBA@INVALID10)&&(rgba !=`RGBA@INVALID11)&&(rgba !=`RGBA@INVALID12)&&(rgba !=`RGBA@INVALID13)&&(rgba !=`RGBA@INVALID14)) :
 "Invalid rgba field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((clamp !=`Clamp1@INVALID3)) :
 "Invalid clamp field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((rgba == `RGBA@RG))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((rgba == `RGBA@RG))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((rgba == `RGBA@RGBA))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((rgba == `RGBA@RGBA))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SUST_P_I ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SURFACE_COORDINATES);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = ((((rgba==`RGBA@R))*1+ ((rgba==`RGBA@RG))*2+ ((rgba==`RGBA@RGBA))*4))*32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((dim<2) + ((dim==2)*2) + ((dim==3)*2) + ((dim>3)*3))*32;
 VIRTUAL_QUEUE = $VQ_SUST ;

OPCODES
        SUSTmio_pipe =  0b101110011011;
        SUST =  0b101110011011;

ENCODING
!sust_p_imm__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_63_61_dim=dim;
BITS_3_86_84_cop=cop;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_4_75_72_PixMaskU04=rgba;
BITS_2_60_59_clamp=clamp;
BITS_8_31_24_Ra=*Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_14_53_40_Sb_addr=tsPtrIdx;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "sust_p_tid_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /PONLY:p /Dim1:dim /COP("EN"):cop /SEM_WEAK_STRONG_MMIO("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private /RGBA("RGBA"):rgba /Clamp1("NEAR"):clamp
 [ NonZeroRegister:Ra ]
','Register:Rb
','UImm(5)*:bank5
','UImm(6)*:hdrtblbase6
','UImm(8)*:tid8
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((dim !=`Dim1@INVALID6)&&(dim !=`Dim1@INVALID7)) :
 "Invalid dim field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sem !=`SEM_WEAK_STRONG_MMIO@INVALID0)) :
 "Invalid sem field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((rgba !=`RGBA@INVALID0)&&(rgba !=`RGBA@INVALID2)&&(rgba !=`RGBA@INVALID4)&&(rgba !=`RGBA@INVALID5)&&(rgba !=`RGBA@INVALID6)&&(rgba !=`RGBA@INVALID7)&&(rgba !=`RGBA@INVALID8)&&(rgba !=`RGBA@INVALID9)&&(rgba !=`RGBA@INVALID10)&&(rgba !=`RGBA@INVALID11)&&(rgba !=`RGBA@INVALID12)&&(rgba !=`RGBA@INVALID13)&&(rgba !=`RGBA@INVALID14)) :
 "Invalid rgba field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((clamp !=`Clamp1@INVALID3)) :
 "Invalid clamp field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((rgba == `RGBA@RG))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((rgba == `RGBA@RG))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((rgba == `RGBA@RGBA))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((rgba == `RGBA@RGBA))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SUST_P_TID ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SURFACE_COORDINATES);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = ((((rgba==`RGBA@R))*1+ ((rgba==`RGBA@RG))*2+ ((rgba==`RGBA@RGBA))*4))*32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((dim<2) + ((dim==2)*2) + ((dim==3)*2) + ((dim>3)*3))*32;
 VIRTUAL_QUEUE = $VQ_SUST ;

OPCODES
        SUSTmio_pipe =  0b11110011011;
        SUST =  0b11110011011;

ENCODING
!sust_p_tid__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_63_61_dim=dim;
BITS_3_86_84_cop=cop;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_4_75_72_PixMaskU04=rgba;
BITS_2_60_59_clamp=clamp;
BITS_8_31_24_Ra=*Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_6_45_40_hdrtblbase6=hdrtblbase6;
BITS_8_53_46_tid8=tid8;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "sust_p_reg_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /PONLY:p /Dim1:dim /COP("EN"):cop /SEM_WEAK_STRONG_MMIO("WEAK"):sem /SCO:sco /PRIVATE("noprivate"):private /RGBA("RGBA"):rgba /Clamp1("NEAR"):clamp
 [ NonZeroRegister:Ra ]
','Register:Rb
','NonZeroRegister:Rc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((dim !=`Dim1@INVALID6)&&(dim !=`Dim1@INVALID7)) :
 "Invalid dim field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sem !=`SEM_WEAK_STRONG_MMIO@INVALID0)) :
 "Invalid sem field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((rgba !=`RGBA@INVALID0)&&(rgba !=`RGBA@INVALID2)&&(rgba !=`RGBA@INVALID4)&&(rgba !=`RGBA@INVALID5)&&(rgba !=`RGBA@INVALID6)&&(rgba !=`RGBA@INVALID7)&&(rgba !=`RGBA@INVALID8)&&(rgba !=`RGBA@INVALID9)&&(rgba !=`RGBA@INVALID10)&&(rgba !=`RGBA@INVALID11)&&(rgba !=`RGBA@INVALID12)&&(rgba !=`RGBA@INVALID13)&&(rgba !=`RGBA@INVALID14)) :
 "Invalid rgba field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((clamp !=`Clamp1@INVALID3)) :
 "Invalid clamp field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rc)!=`Register@RZ) :
 "Disallowed register Rc"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((rgba == `RGBA@RG))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((rgba == `RGBA@RG))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((rgba == `RGBA@RGBA))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((rgba == `RGBA@RGBA))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SUST_P_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SURFACE_COORDINATES);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = ((((rgba==`RGBA@R))*1+ ((rgba==`RGBA@RG))*2+ ((rgba==`RGBA@RGBA))*4))*32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = ((dim<2) + ((dim==2)*2) + ((dim==3)*2) + ((dim>3)*3))*32;
 VIRTUAL_QUEUE = $VQ_SUST ;

OPCODES
        SUSTmio_pipe =  0b100110011100;
        SUST =  0b100110011100;

ENCODING
!sust_p_reg__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_63_61_dim=dim;
BITS_3_86_84_cop=cop;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=sco;
BITS_1_76_76_private=private;
BITS_4_75_72_PixMaskU04=rgba;
BITS_2_60_59_clamp=clamp;
BITS_8_31_24_Ra=*Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "sust_d_imm_weakonly_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DOnly:d /BA("noba"):ba /Dim1:dim /COP("EN"):cop /SZ_U8_S8_U16_S16_32_64_128("32"):sz /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private /Clamp1("NEAR"):clamp
 [ NonZeroRegister:Ra ]
','Register:Rb
','UImm(5)*:bank5
','UImm(14)*:tsPtrIdx
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((dim !=`Dim1@INVALID6)&&(dim !=`Dim1@INVALID7)) :
 "Invalid dim field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`SZ_U8_S8_U16_S16_32_64_128@INVALID7)) :
 "Invalid sz field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((clamp !=`Clamp1@INVALID3)) :
 "Invalid clamp field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"64"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"64"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"128"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"128"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SUST_D_I ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SURFACE_COORDINATES);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((dim<2) + ((dim==2)*2) + ((dim==3)*2) + ((dim>3)*3))*32;
 VIRTUAL_QUEUE = $VQ_SUST ;

OPCODES
        SUSTmio_pipe =  0b101110011101;
        SUST =  0b101110011101;

ENCODING
!sust_d_imm_weakonly__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=ba;
BITS_3_63_61_dim=dim;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_2_60_59_clamp=clamp;
BITS_8_31_24_Ra=*Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_14_53_40_Sb_addr=tsPtrIdx;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "sust_d_tid_weakonly_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DOnly:d /BA("noba"):ba /Dim1:dim /COP("EN"):cop /SZ_U8_S8_U16_S16_32_64_128("32"):sz /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private /Clamp1("NEAR"):clamp
 [ NonZeroRegister:Ra ]
','Register:Rb
','UImm(5)*:bank5
','UImm(6)*:hdrtblbase6
','UImm(8)*:tid8
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((dim !=`Dim1@INVALID6)&&(dim !=`Dim1@INVALID7)) :
 "Invalid dim field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`SZ_U8_S8_U16_S16_32_64_128@INVALID7)) :
 "Invalid sz field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((clamp !=`Clamp1@INVALID3)) :
 "Invalid clamp field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"64"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"64"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"128"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"128"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SUST_D_TID ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SURFACE_COORDINATES);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((dim<2) + ((dim==2)*2) + ((dim==3)*2) + ((dim>3)*3))*32;
 VIRTUAL_QUEUE = $VQ_SUST ;

OPCODES
        SUSTmio_pipe =  0b11110011101;
        SUST =  0b11110011101;

ENCODING
!sust_d_tid_weakonly__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=ba;
BITS_3_63_61_dim=dim;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_2_60_59_clamp=clamp;
BITS_8_31_24_Ra=*Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_6_45_40_hdrtblbase6=hdrtblbase6;
BITS_8_53_46_tid8=tid8;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "sust_d_reg_weakonly_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /DOnly:d /BA("noba"):ba /Dim1:dim /COP("EN"):cop /SZ_U8_S8_U16_S16_32_64_128("32"):sz /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private /Clamp1("NEAR"):clamp
 [ NonZeroRegister:Ra ]
','Register:Rb
','NonZeroRegister:Rc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((dim !=`Dim1@INVALID6)&&(dim !=`Dim1@INVALID7)) :
 "Invalid dim field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((sz !=`SZ_U8_S8_U16_S16_32_64_128@INVALID7)) :
 "Invalid sz field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((clamp !=`Clamp1@INVALID3)) :
 "Invalid clamp field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rc)!=`Register@RZ) :
 "Disallowed register Rc"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"64"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"64"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"128"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((sz == `SZ_U8_S8_U16_S16_32_64_128@"128"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SUST_D_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SURFACE_COORDINATES);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = (( sz <= 4 ) ? 1 : ( ( sz == 5 ) ? 2 : 4 ))*32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = ((dim<2) + ((dim==2)*2) + ((dim==3)*2) + ((dim>3)*3))*32;
 VIRTUAL_QUEUE = $VQ_SUST ;

OPCODES
        SUSTmio_pipe =  0b100110011110;
        SUST =  0b100110011110;

ENCODING
!sust_d_reg_weakonly__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_72_72_e=ba;
BITS_3_63_61_dim=dim;
BITS_3_86_84_cop=cop;
BITS_3_75_73_sz=sz;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_2_60_59_clamp=clamp;
BITS_8_31_24_Ra=*Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "sust_p_imm_weakonly_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /PONLY:p /Dim1:dim /COP("EN"):cop /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private /RGBA("RGBA"):rgba /Clamp1("NEAR"):clamp
 [ NonZeroRegister:Ra ]
','Register:Rb
','UImm(5)*:bank5
','UImm(14)*:tsPtrIdx
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((dim !=`Dim1@INVALID6)&&(dim !=`Dim1@INVALID7)) :
 "Invalid dim field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((rgba !=`RGBA@INVALID0)&&(rgba !=`RGBA@INVALID2)&&(rgba !=`RGBA@INVALID4)&&(rgba !=`RGBA@INVALID5)&&(rgba !=`RGBA@INVALID6)&&(rgba !=`RGBA@INVALID7)&&(rgba !=`RGBA@INVALID8)&&(rgba !=`RGBA@INVALID9)&&(rgba !=`RGBA@INVALID10)&&(rgba !=`RGBA@INVALID11)&&(rgba !=`RGBA@INVALID12)&&(rgba !=`RGBA@INVALID13)&&(rgba !=`RGBA@INVALID14)) :
 "Invalid rgba field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((clamp !=`Clamp1@INVALID3)) :
 "Invalid clamp field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((rgba == `RGBA@RG))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((rgba == `RGBA@RG))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((rgba == `RGBA@RGBA))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((rgba == `RGBA@RGBA))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SUST_P_I ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SURFACE_COORDINATES);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = ((((rgba==`RGBA@R))*1+ ((rgba==`RGBA@RG))*2+ ((rgba==`RGBA@RGBA))*4))*32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((dim<2) + ((dim==2)*2) + ((dim==3)*2) + ((dim>3)*3))*32;
 VIRTUAL_QUEUE = $VQ_SUST ;

OPCODES
        SUSTmio_pipe =  0b101110011011;
        SUST =  0b101110011011;

ENCODING
!sust_p_imm_weakonly__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_63_61_dim=dim;
BITS_3_86_84_cop=cop;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_4_75_72_PixMaskU04=rgba;
BITS_2_60_59_clamp=clamp;
BITS_8_31_24_Ra=*Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_14_53_40_Sb_addr=tsPtrIdx;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "sust_p_tid_weakonly_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /PONLY:p /Dim1:dim /COP("EN"):cop /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private /RGBA("RGBA"):rgba /Clamp1("NEAR"):clamp
 [ NonZeroRegister:Ra ]
','Register:Rb
','UImm(5)*:bank5
','UImm(6)*:hdrtblbase6
','UImm(8)*:tid8
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((dim !=`Dim1@INVALID6)&&(dim !=`Dim1@INVALID7)) :
 "Invalid dim field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((rgba !=`RGBA@INVALID0)&&(rgba !=`RGBA@INVALID2)&&(rgba !=`RGBA@INVALID4)&&(rgba !=`RGBA@INVALID5)&&(rgba !=`RGBA@INVALID6)&&(rgba !=`RGBA@INVALID7)&&(rgba !=`RGBA@INVALID8)&&(rgba !=`RGBA@INVALID9)&&(rgba !=`RGBA@INVALID10)&&(rgba !=`RGBA@INVALID11)&&(rgba !=`RGBA@INVALID12)&&(rgba !=`RGBA@INVALID13)&&(rgba !=`RGBA@INVALID14)) :
 "Invalid rgba field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((clamp !=`Clamp1@INVALID3)) :
 "Invalid clamp field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((rgba == `RGBA@RG))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((rgba == `RGBA@RG))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((rgba == `RGBA@RGBA))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((rgba == `RGBA@RGBA))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SUST_P_TID ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SURFACE_COORDINATES);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = ((((rgba==`RGBA@R))*1+ ((rgba==`RGBA@RG))*2+ ((rgba==`RGBA@RGBA))*4))*32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((dim<2) + ((dim==2)*2) + ((dim==3)*2) + ((dim>3)*3))*32;
 VIRTUAL_QUEUE = $VQ_SUST ;

OPCODES
        SUSTmio_pipe =  0b11110011011;
        SUST =  0b11110011011;

ENCODING
!sust_p_tid_weakonly__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_63_61_dim=dim;
BITS_3_86_84_cop=cop;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_4_75_72_PixMaskU04=rgba;
BITS_2_60_59_clamp=clamp;
BITS_8_31_24_Ra=*Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_6_45_40_hdrtblbase6=hdrtblbase6;
BITS_8_53_46_tid8=tid8;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



ALTERNATE CLASS "sust_p_reg_weakonly_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /PONLY:p /Dim1:dim /COP("EN"):cop /WEAKONLY("WEAK"):sem /PRIVATE("noprivate"):private /RGBA("RGBA"):rgba /Clamp1("NEAR"):clamp
 [ NonZeroRegister:Ra ]
','Register:Rb
','NonZeroRegister:Rc
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((dim !=`Dim1@INVALID6)&&(dim !=`Dim1@INVALID7)) :
 "Invalid dim field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((rgba !=`RGBA@INVALID0)&&(rgba !=`RGBA@INVALID2)&&(rgba !=`RGBA@INVALID4)&&(rgba !=`RGBA@INVALID5)&&(rgba !=`RGBA@INVALID6)&&(rgba !=`RGBA@INVALID7)&&(rgba !=`RGBA@INVALID8)&&(rgba !=`RGBA@INVALID9)&&(rgba !=`RGBA@INVALID10)&&(rgba !=`RGBA@INVALID11)&&(rgba !=`RGBA@INVALID12)&&(rgba !=`RGBA@INVALID13)&&(rgba !=`RGBA@INVALID14)) :
 "Invalid rgba field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((clamp !=`Clamp1@INVALID3)) :
 "Invalid clamp field value"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
OOR_REG_ERROR
 (((Rc)==`Register@RZ)||(((Rc)<=(%MAX_REG_COUNT-1))&&((Rc)!=`Register@R254))) :
 "Register Rc is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rc)!=`Register@RZ) :
 "Disallowed register Rc"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"1D_ARRAY")||(dim == `Dim1@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dim == `Dim1@"2D_ARRAY")||(dim == `Dim1@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((rgba == `RGBA@RG))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((rgba == `RGBA@RG))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((rgba == `RGBA@RGBA))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((rgba == `RGBA@RGBA))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_ADDR)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_ADDR)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@SUST_P_R ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_GENERIC);
 ISRC_C_OPERAND_MAP = (1<<INDEX(Rc));
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_SURFACE_COORDINATES);

PREDICATES
 IDEST_SIZE = 0;
 IDEST2_SIZE = 0;
 ISRC_B_SIZE = ((((rgba==`RGBA@R))*1+ ((rgba==`RGBA@RG))*2+ ((rgba==`RGBA@RGBA))*4))*32;
 ISRC_C_SIZE = 32;
 ISRC_A_SIZE = ((dim<2) + ((dim==2)*2) + ((dim==3)*2) + ((dim>3)*3))*32;
 VIRTUAL_QUEUE = $VQ_SUST ;

OPCODES
        SUSTmio_pipe =  0b100110011100;
        SUST =  0b100110011100;

ENCODING
!sust_p_reg_weakonly__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_3_63_61_dim=dim;
BITS_3_86_84_cop=cop;
BITS_2_80_79_sem=sem;
BITS_2_78_77_sco=*3;
BITS_1_76_76_private=private;
BITS_4_75_72_PixMaskU04=rgba;
BITS_2_60_59_clamp=clamp;
BITS_8_31_24_Ra=*Ra;
BITS_8_39_32_Rb=Rb;
BITS_8_71_64_Rc=Rc;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=7;
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "tex_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /F16RM("nof16rm"):f16rm /LODLC("nolodlc"):lodlc /AOFFI("noaoffi"):aoffi /DC("nodc"):dc /COP("EN"):cop /NDV("nondv"):ndv /NODEP("nonodep"):nodep
Predicate("PT"):Pu
','Register:Rd2
','Register:Rd
','NonZeroRegister:Ra
','Register("RZ"):Rb
','UImm(5)*:bank5
','UImm(14)*:tsPtrIdx ','TEXPARAMA:paramA ','UImm(4/15)*:wmsk
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((f16rm !=`F16RM@INVALID3)) :
 "Invalid f16rm field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((lodlc !=`LODLC@INVALID6)&&(lodlc !=`LODLC@INVALID7)) :
 "Invalid lodlc field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((paramA !=`TEXPARAMA@INVALID6)) :
 "Invalid paramA field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((wmsk == 1)||(wmsk == 2)||(wmsk == 3)||(wmsk == 4)||(wmsk == 5)||(wmsk == 6)||(wmsk == 7)||(wmsk == 8)||(wmsk == 9)||(wmsk == 10)||(wmsk == 11)||(wmsk == 12)||(wmsk == 13)||(wmsk == 14)||(wmsk == 15)) :
 "Invalid wmsk field value"
OOR_REG_ERROR
 (((Rd2)==`Register@RZ)||(((Rd2)<=(%MAX_REG_COUNT-1))&&((Rd2)!=`Register@R254))) :
 "Register Rd2 is out of range"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
ILLEGAL_INSTR_ENCODING_ERROR
 (((paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@ARRAY_CUBE))) -> (((aoffi == `AOFFI@noaoffi))) :
 "Invalid instruction combination ( rule name: CUBE)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((paramA == `TEXPARAMA@"3D"))) -> (((dc == `DC@nodc))) :
 "Invalid instruction combination ( rule name: 3D)"
OOR_REG_ERROR
 (((lodlc == `LODLC@LC)||(lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((lodlc == `LODLC@LC)||(lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((lodlc == `LODLC@LC)||(lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((lodlc == `LODLC@LC)||(lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((lodlc == `LODLC@LC)||(lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((lodlc == `LODLC@LC)||(lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `TEXPARAMA@ARRAY_2D))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_CUBE))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_CUBE))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `TEXPARAMA@ARRAY_CUBE))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((lodlc == `LODLC@LC)||(lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((lodlc == `LODLC@LC)||(lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((lodlc == `LODLC@LC)||(lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LC)||(lodlc == `LODLC@LZ))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LC)||(lodlc == `LODLC@LZ))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LC)||(lodlc == `LODLC@LZ))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LC)||(lodlc == `LODLC@LZ))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LC)||(lodlc == `LODLC@LZ))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)==`Register@RZ)||((Rd2)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)+((Rd2)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@TEX ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<INDEX(Rd2));
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);

PREDICATES
 IDEST_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>=2) ? (32 + ((f16rm==0)*32)) : 32;
 IDEST2_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>2) ? (32 + (((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))==4)*(f16rm==0)*32)) : 0;
 ISRC_B_SIZE = ((aoffi==`AOFFI@AOFFI)*32 + (((lodlc==`LODLC@LB)*1 + (lodlc==`LODLC@LL)*1 + (lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*2) - ((lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*1))*32 + (dc==`DC@DC)*32);
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = (((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@"3D")*3) + ((paramA==`TEXPARAMA@CUBE)*3) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*4))) + (((lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*1)*((((paramA==`TEXPARAMA@ARRAY_1D)*1) + ((paramA==`TEXPARAMA@ARRAY_2D)*1) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*1))!=1)))*32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        TEXmio_pipe =  0b101101100000;
        TEX =  0b101101100000;

ENCODING
!tex__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_60_60_scr=0;
BITS_1_59_59_b=0;
BITS_2_80_79_sem=f16rm;
BITS_3_89_87_Pp=lodlc;
BITS_1_76_76_private=aoffi;
BITS_1_78_78_ofmt=dc;
BITS_3_86_84_cop=cop;
BITS_1_77_77_ntz=ndv;
BITS_1_90_90_Pp_not=nodep;
BITS_3_83_81_Pu=Pu;
BITS_8_71_64_Rc=Rd2;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_14_53_40_Sb_addr=tsPtrIdx;
BITS_3_63_61_dim=paramA;
BITS_4_75_72_PixMaskU04=wmsk;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "tex_scr_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /SCRONLY:scr /F16RM("nof16rm"):f16rm /LODLC("nolodlc"):lodlc /AOFFI("noaoffi"):aoffi /DC("nodc"):dc /COP("EN"):cop /NDV("nondv"):ndv /NODEP("nonodep"):nodep
Predicate("PT"):Pu
','Register:Rd2
','Register:Rd
','NonZeroRegister:Ra
','Register("RZ"):Rb
','UImm(5)*:bank5
','UImm(14)*:tsPtrIdx ','TEXPARAMA:paramA ','UImm(4/15)*:wmsk
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@"3D")*3) + ((paramA==`TEXPARAMA@CUBE)*3) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*4))) - (((lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*1)*(((paramA==`TEXPARAMA@ARRAY_1D)*1) + ((paramA==`TEXPARAMA@ARRAY_2D)*1) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*1))) + (((lodlc==`LODLC@LB)*1 + (lodlc==`LODLC@LL)*1 + (lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*2)) + (aoffi==`AOFFI@AOFFI) + (dc==`DC@DC)) <= 4) :
  "More than 4 coordinates are not allowed for .SCR"
ILLEGAL_INSTR_ENCODING_ERROR
 ((f16rm !=`F16RM@INVALID3)) :
 "Invalid f16rm field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((lodlc !=`LODLC@INVALID6)&&(lodlc !=`LODLC@INVALID7)) :
 "Invalid lodlc field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((paramA !=`TEXPARAMA@INVALID6)) :
 "Invalid paramA field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((wmsk == 1)||(wmsk == 2)||(wmsk == 3)||(wmsk == 4)||(wmsk == 5)||(wmsk == 6)||(wmsk == 7)||(wmsk == 8)||(wmsk == 9)||(wmsk == 10)||(wmsk == 11)||(wmsk == 12)||(wmsk == 13)||(wmsk == 14)||(wmsk == 15)) :
 "Invalid wmsk field value"
OOR_REG_ERROR
 (((Rd2)==`Register@RZ)||(((Rd2)<=(%MAX_REG_COUNT-1))&&((Rd2)!=`Register@R254))) :
 "Register Rd2 is out of range"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
ILLEGAL_INSTR_ENCODING_ERROR
 (((paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@ARRAY_CUBE))) -> (((aoffi == `AOFFI@noaoffi))) :
 "Invalid instruction combination ( rule name: CUBE)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((paramA == `TEXPARAMA@"3D"))) -> (((dc == `DC@nodc))) :
 "Invalid instruction combination ( rule name: 3D)"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@CUBE))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@CUBE))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@CUBE))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@CUBE))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@CUBE))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@CUBE))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@CUBE))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_CUBE))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_CUBE))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_CUBE))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)==`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"3D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"3D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"3D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@CUBE))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@CUBE))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@CUBE))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"3D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@CUBE))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@CUBE))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@CUBE))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_CUBE))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_CUBE))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_CUBE))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"3D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@CUBE))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@CUBE))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@CUBE))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"3D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@CUBE))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@CUBE))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@CUBE))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@CUBE))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@CUBE))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@CUBE))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@CUBE))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_CUBE))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_CUBE))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_CUBE))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)==`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"3D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"3D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"3D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)==`Register@RZ)||((Rd2)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)+((Rd2)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@TEX ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<INDEX(Rd2));
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);

PREDICATES
 IDEST_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>=2) ? (32 + ((f16rm==0)*32)) : 32;
 IDEST2_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>2) ? (32 + (((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))==4)*(f16rm==0)*32)) : 0;
 ISRC_B_SIZE = ((((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@"3D")*3) + ((paramA==`TEXPARAMA@CUBE)*3) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*4))) - (((lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*1)*((((paramA==`TEXPARAMA@ARRAY_1D)*1) + ((paramA==`TEXPARAMA@ARRAY_2D)*1) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*1)))) + (((lodlc==`LODLC@LB)*1 + (lodlc==`LODLC@LL)*1 + (lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*2)) + (aoffi==`AOFFI@AOFFI) + (dc==`DC@DC))==4) ? 64 : 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@"3D")*3) + ((paramA==`TEXPARAMA@CUBE)*3) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*4))) - (((lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*1)*((((paramA==`TEXPARAMA@ARRAY_1D)*1) + ((paramA==`TEXPARAMA@ARRAY_2D)*1) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*1)))) + (((lodlc==`LODLC@LB)*1 + (lodlc==`LODLC@LL)*1 + (lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*2)) + (aoffi==`AOFFI@AOFFI) + (dc==`DC@DC))>2) ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        TEXmio_pipe =  0b101101100000;
        TEX =  0b101101100000;

ENCODING
!tex_scr__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_60_60_scr=*scr;
BITS_1_59_59_b=0;
BITS_2_80_79_sem=f16rm;
BITS_3_89_87_Pp=lodlc;
BITS_1_76_76_private=aoffi;
BITS_1_78_78_ofmt=dc;
BITS_3_86_84_cop=cop;
BITS_1_77_77_ntz=ndv;
BITS_1_90_90_Pp_not=nodep;
BITS_3_83_81_Pu=Pu;
BITS_8_71_64_Rc=Rd2;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_14_53_40_Sb_addr=tsPtrIdx;
BITS_3_63_61_dim=paramA;
BITS_4_75_72_PixMaskU04=wmsk;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "tex_b_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BONLY:b /F16RM("nof16rm"):f16rm /LODLC("nolodlc"):lodlc /AOFFI("noaoffi"):aoffi /DC("nodc"):dc /COP("EN"):cop /NDV("nondv"):ndv /NODEP("nonodep"):nodep
Predicate("PT"):Pu
','Register:Rd2
','Register:Rd
','NonZeroRegister:Ra
','NonZeroRegister:Rb
','UImm(5)*:bank5
','UImm(14)*:tsPtrIdx ','TEXPARAMA:paramA ','UImm(4/15)*:wmsk
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((f16rm !=`F16RM@INVALID3)) :
 "Invalid f16rm field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((lodlc !=`LODLC@INVALID6)&&(lodlc !=`LODLC@INVALID7)) :
 "Invalid lodlc field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((paramA !=`TEXPARAMA@INVALID6)) :
 "Invalid paramA field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((wmsk == 1)||(wmsk == 2)||(wmsk == 3)||(wmsk == 4)||(wmsk == 5)||(wmsk == 6)||(wmsk == 7)||(wmsk == 8)||(wmsk == 9)||(wmsk == 10)||(wmsk == 11)||(wmsk == 12)||(wmsk == 13)||(wmsk == 14)||(wmsk == 15)) :
 "Invalid wmsk field value"
OOR_REG_ERROR
 (((Rd2)==`Register@RZ)||(((Rd2)<=(%MAX_REG_COUNT-1))&&((Rd2)!=`Register@R254))) :
 "Register Rd2 is out of range"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rb)!=`Register@RZ) :
 "Disallowed register Rb"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
ILLEGAL_INSTR_ENCODING_ERROR
 (((paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@ARRAY_CUBE))) -> (((aoffi == `AOFFI@noaoffi))) :
 "Invalid instruction combination ( rule name: CUBE)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((paramA == `TEXPARAMA@"3D"))) -> (((dc == `DC@nodc))) :
 "Invalid instruction combination ( rule name: 3D)"
OOR_REG_ERROR
 (((lodlc == `LODLC@LC)||(lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((lodlc == `LODLC@LC)||(lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((lodlc == `LODLC@LC)||(lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((lodlc == `LODLC@LC)||(lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((lodlc == `LODLC@LC)||(lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((lodlc == `LODLC@LC)||(lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `TEXPARAMA@ARRAY_2D))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_CUBE))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_CUBE))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `TEXPARAMA@ARRAY_CUBE))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((lodlc == `LODLC@LC)||(lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((lodlc == `LODLC@LC)||(lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((lodlc == `LODLC@LC)||(lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LC)||(lodlc == `LODLC@LZ))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LC)||(lodlc == `LODLC@LZ))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LC)||(lodlc == `LODLC@LZ))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LC)||(lodlc == `LODLC@LZ))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LC)||(lodlc == `LODLC@LZ))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LC)||(lodlc == `LODLC@LZ))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LC)||(lodlc == `LODLC@LZ))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LC)||(lodlc == `LODLC@LZ))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LC)||(lodlc == `LODLC@LZ))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)==`Register@RZ)||((Rd2)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)+((Rd2)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@TEX ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<INDEX(Rd2));
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);

PREDICATES
 IDEST_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>=2) ? (32 + ((f16rm==0)*32)) : 32;
 IDEST2_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>2) ? (32 + (((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))==4)*(f16rm==0)*32)) : 0;
 ISRC_B_SIZE = (32 + (aoffi==`AOFFI@AOFFI)*32 + (((lodlc==`LODLC@LB)*1 + (lodlc==`LODLC@LL)*1 + (lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*2) - ((lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*1))*32 + (dc==`DC@DC)*32);
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = (((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@"3D")*3) + ((paramA==`TEXPARAMA@CUBE)*3) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*4))) + (((lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*1)*((((paramA==`TEXPARAMA@ARRAY_1D)*1) + ((paramA==`TEXPARAMA@ARRAY_2D)*1) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*1))!=1)))*32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        TEXmio_pipe =  0b101101100000;
        TEX =  0b101101100000;

ENCODING
!tex_b__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_60_60_scr=0;
BITS_1_59_59_b=*b;
BITS_2_80_79_sem=f16rm;
BITS_3_89_87_Pp=lodlc;
BITS_1_76_76_private=aoffi;
BITS_1_78_78_ofmt=dc;
BITS_3_86_84_cop=cop;
BITS_1_77_77_ntz=ndv;
BITS_1_90_90_Pp_not=nodep;
BITS_3_83_81_Pu=Pu;
BITS_8_71_64_Rc=Rd2;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_14_53_40_Sb_addr=tsPtrIdx;
BITS_3_63_61_dim=paramA;
BITS_4_75_72_PixMaskU04=wmsk;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "tex_scr_b_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /SCRONLY:scr /BONLY:b /F16RM("nof16rm"):f16rm /LODLC("nolodlc"):lodlc /AOFFI("noaoffi"):aoffi /DC("nodc"):dc /COP("EN"):cop /NDV("nondv"):ndv /NODEP("nonodep"):nodep
Predicate("PT"):Pu
','Register:Rd2
','Register:Rd
','NonZeroRegister:Ra
','NonZeroRegister:Rb
','UImm(5)*:bank5
','UImm(14)*:tsPtrIdx ','TEXPARAMA:paramA ','UImm(4/15)*:wmsk
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@"3D")*3) + ((paramA==`TEXPARAMA@CUBE)*3) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*4))) - (((lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*1)*(((paramA==`TEXPARAMA@ARRAY_1D)*1) + ((paramA==`TEXPARAMA@ARRAY_2D)*1) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*1))) + (((lodlc==`LODLC@LB)*1 + (lodlc==`LODLC@LL)*1 + (lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*2)) + (aoffi==`AOFFI@AOFFI) + (dc==`DC@DC) + 1) <= 4) :
  "More than 4 coordinates are not allowed for .SCR"
ILLEGAL_INSTR_ENCODING_ERROR
 ((f16rm !=`F16RM@INVALID3)) :
 "Invalid f16rm field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((lodlc !=`LODLC@INVALID6)&&(lodlc !=`LODLC@INVALID7)) :
 "Invalid lodlc field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((paramA !=`TEXPARAMA@INVALID6)) :
 "Invalid paramA field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((wmsk == 1)||(wmsk == 2)||(wmsk == 3)||(wmsk == 4)||(wmsk == 5)||(wmsk == 6)||(wmsk == 7)||(wmsk == 8)||(wmsk == 9)||(wmsk == 10)||(wmsk == 11)||(wmsk == 12)||(wmsk == 13)||(wmsk == 14)||(wmsk == 15)) :
 "Invalid wmsk field value"
OOR_REG_ERROR
 (((Rd2)==`Register@RZ)||(((Rd2)<=(%MAX_REG_COUNT-1))&&((Rd2)!=`Register@R254))) :
 "Register Rd2 is out of range"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rb)!=`Register@RZ) :
 "Disallowed register Rb"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
ILLEGAL_INSTR_ENCODING_ERROR
 (((paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@ARRAY_CUBE))) -> (((aoffi == `AOFFI@noaoffi))) :
 "Invalid instruction combination ( rule name: CUBE)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((paramA == `TEXPARAMA@"3D"))) -> (((dc == `DC@nodc))) :
 "Invalid instruction combination ( rule name: 3D)"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@CUBE))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@CUBE))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@CUBE))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"3D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@CUBE))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@CUBE))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@CUBE))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"3D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)==`Register@RZ)||((Rd2)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)+((Rd2)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@TEX ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<INDEX(Rd2));
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);

PREDICATES
 IDEST_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>=2) ? (32 + ((f16rm==0)*32)) : 32;
 IDEST2_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>2) ? (32 + (((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))==4)*(f16rm==0)*32)) : 0;
 ISRC_B_SIZE = ((((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@"3D")*3) + ((paramA==`TEXPARAMA@CUBE)*3) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*4))) - (((lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*1)*((((paramA==`TEXPARAMA@ARRAY_1D)*1) + ((paramA==`TEXPARAMA@ARRAY_2D)*1) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*1)))) + (((lodlc==`LODLC@LB)*1 + (lodlc==`LODLC@LL)*1 + (lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*2)) + (aoffi==`AOFFI@AOFFI) + (dc==`DC@DC) + 1)==4) ? 64 : 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@"3D")*3) + ((paramA==`TEXPARAMA@CUBE)*3) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*4))) - (((lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*1)*((((paramA==`TEXPARAMA@ARRAY_1D)*1) + ((paramA==`TEXPARAMA@ARRAY_2D)*1) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*1)))) + (((lodlc==`LODLC@LB)*1 + (lodlc==`LODLC@LL)*1 + (lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*2)) + (aoffi==`AOFFI@AOFFI) + (dc==`DC@DC) + 1)>2) ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        TEXmio_pipe =  0b101101100000;
        TEX =  0b101101100000;

ENCODING
!tex_scr_b__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_60_60_scr=*scr;
BITS_1_59_59_b=*b;
BITS_2_80_79_sem=f16rm;
BITS_3_89_87_Pp=lodlc;
BITS_1_76_76_private=aoffi;
BITS_1_78_78_ofmt=dc;
BITS_3_86_84_cop=cop;
BITS_1_77_77_ntz=ndv;
BITS_1_90_90_Pp_not=nodep;
BITS_3_83_81_Pu=Pu;
BITS_8_71_64_Rc=Rd2;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_14_53_40_Sb_addr=tsPtrIdx;
BITS_3_63_61_dim=paramA;
BITS_4_75_72_PixMaskU04=wmsk;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "tex_b_noConst_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BONLY:b /F16RM("nof16rm"):f16rm /LODLC("nolodlc"):lodlc /AOFFI("noaoffi"):aoffi /DC("nodc"):dc /COP("EN"):cop /NDV("nondv"):ndv /NODEP("nonodep"):nodep
Predicate("PT"):Pu
','Register:Rd2
','Register:Rd
','NonZeroRegister:Ra
','NonZeroRegister:Rb ','TEXPARAMA:paramA ','UImm(4/15)*:wmsk
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((f16rm !=`F16RM@INVALID3)) :
 "Invalid f16rm field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((lodlc !=`LODLC@INVALID6)&&(lodlc !=`LODLC@INVALID7)) :
 "Invalid lodlc field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((paramA !=`TEXPARAMA@INVALID6)) :
 "Invalid paramA field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((wmsk == 1)||(wmsk == 2)||(wmsk == 3)||(wmsk == 4)||(wmsk == 5)||(wmsk == 6)||(wmsk == 7)||(wmsk == 8)||(wmsk == 9)||(wmsk == 10)||(wmsk == 11)||(wmsk == 12)||(wmsk == 13)||(wmsk == 14)||(wmsk == 15)) :
 "Invalid wmsk field value"
OOR_REG_ERROR
 (((Rd2)==`Register@RZ)||(((Rd2)<=(%MAX_REG_COUNT-1))&&((Rd2)!=`Register@R254))) :
 "Register Rd2 is out of range"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rb)!=`Register@RZ) :
 "Disallowed register Rb"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
ILLEGAL_INSTR_ENCODING_ERROR
 (((paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@ARRAY_CUBE))) -> (((aoffi == `AOFFI@noaoffi))) :
 "Invalid instruction combination ( rule name: CUBE)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((paramA == `TEXPARAMA@"3D"))) -> (((dc == `DC@nodc))) :
 "Invalid instruction combination ( rule name: 3D)"
OOR_REG_ERROR
 (((lodlc == `LODLC@LC)||(lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((lodlc == `LODLC@LC)||(lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((lodlc == `LODLC@LC)||(lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((lodlc == `LODLC@LC)||(lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((lodlc == `LODLC@LC)||(lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((lodlc == `LODLC@LC)||(lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `TEXPARAMA@ARRAY_2D))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_CUBE))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_CUBE))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `TEXPARAMA@ARRAY_CUBE))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((lodlc == `LODLC@LC)||(lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((lodlc == `LODLC@LC)||(lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((lodlc == `LODLC@LC)||(lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LC)||(lodlc == `LODLC@LZ))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LC)||(lodlc == `LODLC@LZ))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LC)||(lodlc == `LODLC@LZ))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LC)||(lodlc == `LODLC@LZ))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LC)||(lodlc == `LODLC@LZ))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LC)||(lodlc == `LODLC@LZ))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LC)||(lodlc == `LODLC@LZ))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LC)||(lodlc == `LODLC@LZ))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LC)||(lodlc == `LODLC@LZ))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)==`Register@RZ)||((Rd2)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)+((Rd2)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@TEX_B_noConst ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<INDEX(Rd2));
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);

PREDICATES
 IDEST_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>=2) ? (32 + ((f16rm==0)*32)) : 32;
 IDEST2_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>2) ? (32 + (((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))==4)*(f16rm==0)*32)) : 0;
 ISRC_B_SIZE = (32 + (aoffi==`AOFFI@AOFFI)*32 + (((lodlc==`LODLC@LB)*1 + (lodlc==`LODLC@LL)*1 + (lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*2) - ((lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*1))*32 + (dc==`DC@DC)*32);
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = (((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@"3D")*3) + ((paramA==`TEXPARAMA@CUBE)*3) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*4))) + (((lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*1)*((((paramA==`TEXPARAMA@ARRAY_1D)*1) + ((paramA==`TEXPARAMA@ARRAY_2D)*1) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*1))!=1)))*32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        TEXmio_pipe =  0b1101100001;
        TEX =  0b1101100001;

ENCODING
!tex_b_noConst__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_60_60_scr=0;
BITS_1_59_59_b=*b;
BITS_2_80_79_sem=f16rm;
BITS_3_89_87_Pp=lodlc;
BITS_1_76_76_private=aoffi;
BITS_1_78_78_ofmt=dc;
BITS_3_86_84_cop=cop;
BITS_1_77_77_ntz=ndv;
BITS_1_90_90_Pp_not=nodep;
BITS_3_83_81_Pu=Pu;
BITS_8_71_64_Rc=Rd2;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_3_63_61_dim=paramA;
BITS_4_75_72_PixMaskU04=wmsk;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "tex_scr_b_noConst_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /SCRONLY:scr /BONLY:b /F16RM("nof16rm"):f16rm /LODLC("nolodlc"):lodlc /AOFFI("noaoffi"):aoffi /DC("nodc"):dc /COP("EN"):cop /NDV("nondv"):ndv /NODEP("nonodep"):nodep
Predicate("PT"):Pu
','Register:Rd2
','Register:Rd
','NonZeroRegister:Ra
','NonZeroRegister:Rb ','TEXPARAMA:paramA ','UImm(4/15)*:wmsk
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@"3D")*3) + ((paramA==`TEXPARAMA@CUBE)*3) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*4))) - (((lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*1)*(((paramA==`TEXPARAMA@ARRAY_1D)*1) + ((paramA==`TEXPARAMA@ARRAY_2D)*1) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*1))) + (((lodlc==`LODLC@LB)*1 + (lodlc==`LODLC@LL)*1 + (lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*2)) + (aoffi==`AOFFI@AOFFI) + (dc==`DC@DC) + 1) <= 4) :
  "More than 4 coordinates are not allowed for .SCR"
ILLEGAL_INSTR_ENCODING_ERROR
 ((f16rm !=`F16RM@INVALID3)) :
 "Invalid f16rm field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((lodlc !=`LODLC@INVALID6)&&(lodlc !=`LODLC@INVALID7)) :
 "Invalid lodlc field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((paramA !=`TEXPARAMA@INVALID6)) :
 "Invalid paramA field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((wmsk == 1)||(wmsk == 2)||(wmsk == 3)||(wmsk == 4)||(wmsk == 5)||(wmsk == 6)||(wmsk == 7)||(wmsk == 8)||(wmsk == 9)||(wmsk == 10)||(wmsk == 11)||(wmsk == 12)||(wmsk == 13)||(wmsk == 14)||(wmsk == 15)) :
 "Invalid wmsk field value"
OOR_REG_ERROR
 (((Rd2)==`Register@RZ)||(((Rd2)<=(%MAX_REG_COUNT-1))&&((Rd2)!=`Register@R254))) :
 "Register Rd2 is out of range"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rb)!=`Register@RZ) :
 "Disallowed register Rb"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
ILLEGAL_INSTR_ENCODING_ERROR
 (((paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@ARRAY_CUBE))) -> (((aoffi == `AOFFI@noaoffi))) :
 "Invalid instruction combination ( rule name: CUBE)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((paramA == `TEXPARAMA@"3D"))) -> (((dc == `DC@nodc))) :
 "Invalid instruction combination ( rule name: 3D)"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@CUBE))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@CUBE))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@CUBE))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"3D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@CUBE))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@CUBE))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@CUBE))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"3D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)==`Register@RZ)||((Rd2)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)+((Rd2)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@TEX_B_noConst ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<INDEX(Rd2));
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);

PREDICATES
 IDEST_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>=2) ? (32 + ((f16rm==0)*32)) : 32;
 IDEST2_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>2) ? (32 + (((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))==4)*(f16rm==0)*32)) : 0;
 ISRC_B_SIZE = ((((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@"3D")*3) + ((paramA==`TEXPARAMA@CUBE)*3) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*4))) - (((lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*1)*((((paramA==`TEXPARAMA@ARRAY_1D)*1) + ((paramA==`TEXPARAMA@ARRAY_2D)*1) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*1)))) + (((lodlc==`LODLC@LB)*1 + (lodlc==`LODLC@LL)*1 + (lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*2)) + (aoffi==`AOFFI@AOFFI) + (dc==`DC@DC) + 1)==4) ? 64 : 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@"3D")*3) + ((paramA==`TEXPARAMA@CUBE)*3) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*4))) - (((lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*1)*((((paramA==`TEXPARAMA@ARRAY_1D)*1) + ((paramA==`TEXPARAMA@ARRAY_2D)*1) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*1)))) + (((lodlc==`LODLC@LB)*1 + (lodlc==`LODLC@LL)*1 + (lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*2)) + (aoffi==`AOFFI@AOFFI) + (dc==`DC@DC) + 1)>2) ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        TEXmio_pipe =  0b1101100001;
        TEX =  0b1101100001;

ENCODING
!tex_scr_b_noConst__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_60_60_scr=*scr;
BITS_1_59_59_b=*b;
BITS_2_80_79_sem=f16rm;
BITS_3_89_87_Pp=lodlc;
BITS_1_76_76_private=aoffi;
BITS_1_78_78_ofmt=dc;
BITS_3_86_84_cop=cop;
BITS_1_77_77_ntz=ndv;
BITS_1_90_90_Pp_not=nodep;
BITS_3_83_81_Pu=Pu;
BITS_8_71_64_Rc=Rd2;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_3_63_61_dim=paramA;
BITS_4_75_72_PixMaskU04=wmsk;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "tex_b_tid_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BONLY:b /F16RM("nof16rm"):f16rm /LODLC("nolodlc"):lodlc /AOFFI("noaoffi"):aoffi /DC("nodc"):dc /COP("EN"):cop /NDV("nondv"):ndv /NODEP("nonodep"):nodep
Predicate("PT"):Pu
','Register:Rd2
','Register:Rd
','NonZeroRegister:Ra
','NonZeroRegister:Rb
','UImm(5)*:bank5
','UImm(6)*:hdrtblbase6
','UImm(8)*:tid8 ','TEXPARAMA:paramA ','UImm(4/15)*:wmsk
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((f16rm !=`F16RM@INVALID3)) :
 "Invalid f16rm field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((lodlc !=`LODLC@INVALID6)&&(lodlc !=`LODLC@INVALID7)) :
 "Invalid lodlc field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((paramA !=`TEXPARAMA@INVALID6)) :
 "Invalid paramA field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((wmsk == 1)||(wmsk == 2)||(wmsk == 3)||(wmsk == 4)||(wmsk == 5)||(wmsk == 6)||(wmsk == 7)||(wmsk == 8)||(wmsk == 9)||(wmsk == 10)||(wmsk == 11)||(wmsk == 12)||(wmsk == 13)||(wmsk == 14)||(wmsk == 15)) :
 "Invalid wmsk field value"
OOR_REG_ERROR
 (((Rd2)==`Register@RZ)||(((Rd2)<=(%MAX_REG_COUNT-1))&&((Rd2)!=`Register@R254))) :
 "Register Rd2 is out of range"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rb)!=`Register@RZ) :
 "Disallowed register Rb"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
ILLEGAL_INSTR_ENCODING_ERROR
 (((paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@ARRAY_CUBE))) -> (((aoffi == `AOFFI@noaoffi))) :
 "Invalid instruction combination ( rule name: CUBE)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((paramA == `TEXPARAMA@"3D"))) -> (((dc == `DC@nodc))) :
 "Invalid instruction combination ( rule name: 3D)"
OOR_REG_ERROR
 (((lodlc == `LODLC@LC)||(lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((lodlc == `LODLC@LC)||(lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((lodlc == `LODLC@LC)||(lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((lodlc == `LODLC@LC)||(lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((lodlc == `LODLC@LC)||(lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((lodlc == `LODLC@LC)||(lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `TEXPARAMA@ARRAY_2D))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_CUBE))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_CUBE))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `TEXPARAMA@ARRAY_CUBE))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((lodlc == `LODLC@LC)||(lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((lodlc == `LODLC@LC)||(lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((lodlc == `LODLC@LC)||(lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LC)||(lodlc == `LODLC@LZ))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LC)||(lodlc == `LODLC@LZ))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LC)||(lodlc == `LODLC@LZ))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LC)||(lodlc == `LODLC@LZ))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LC)||(lodlc == `LODLC@LZ))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LC)||(lodlc == `LODLC@LZ))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LC)||(lodlc == `LODLC@LZ))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LC)||(lodlc == `LODLC@LZ))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc)||(lodlc == `LODLC@LC)||(lodlc == `LODLC@LZ))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB)||(lodlc == `LODLC@LL)||(lodlc == `LODLC@LB.LC))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)==`Register@RZ)||((Rd2)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)+((Rd2)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@TEX_B ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<INDEX(Rd2));
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);

PREDICATES
 IDEST_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>=2) ? (32 + ((f16rm==0)*32)) : 32;
 IDEST2_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>2) ? (32 + (((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))==4)*(f16rm==0)*32)) : 0;
 ISRC_B_SIZE = (32 + (aoffi==`AOFFI@AOFFI)*32 + (((lodlc==`LODLC@LB)*1 + (lodlc==`LODLC@LL)*1 + (lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*2) - ((lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*1))*32 + (dc==`DC@DC)*32);
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = (((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@"3D")*3) + ((paramA==`TEXPARAMA@CUBE)*3) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*4))) + (((lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*1)*((((paramA==`TEXPARAMA@ARRAY_1D)*1) + ((paramA==`TEXPARAMA@ARRAY_2D)*1) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*1))!=1)))*32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        TEXmio_pipe =  0b101101100010;
        TEX =  0b101101100010;

ENCODING
!tex_b_tid__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_60_60_scr=0;
BITS_1_59_59_b=*b;
BITS_2_80_79_sem=f16rm;
BITS_3_89_87_Pp=lodlc;
BITS_1_76_76_private=aoffi;
BITS_1_78_78_ofmt=dc;
BITS_3_86_84_cop=cop;
BITS_1_77_77_ntz=ndv;
BITS_1_90_90_Pp_not=nodep;
BITS_3_83_81_Pu=Pu;
BITS_8_71_64_Rc=Rd2;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_6_45_40_hdrtblbase6=hdrtblbase6;
BITS_8_53_46_tid8=tid8;
BITS_3_63_61_dim=paramA;
BITS_4_75_72_PixMaskU04=wmsk;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "tex_scr_b_tid_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /SCRONLY:scr /BONLY:b /F16RM("nof16rm"):f16rm /LODLC("nolodlc"):lodlc /AOFFI("noaoffi"):aoffi /DC("nodc"):dc /COP("EN"):cop /NDV("nondv"):ndv /NODEP("nonodep"):nodep
Predicate("PT"):Pu
','Register:Rd2
','Register:Rd
','NonZeroRegister:Ra
','NonZeroRegister:Rb
','UImm(5)*:bank5
','UImm(6)*:hdrtblbase6
','UImm(8)*:tid8 ','TEXPARAMA:paramA ','UImm(4/15)*:wmsk
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@"3D")*3) + ((paramA==`TEXPARAMA@CUBE)*3) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*4))) - (((lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*1)*(((paramA==`TEXPARAMA@ARRAY_1D)*1) + ((paramA==`TEXPARAMA@ARRAY_2D)*1) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*1))) + (((lodlc==`LODLC@LB)*1 + (lodlc==`LODLC@LL)*1 + (lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*2)) + (aoffi==`AOFFI@AOFFI) + (dc==`DC@DC) + 1) <= 4) :
  "More than 4 coordinates are not allowed for .SCR"
ILLEGAL_INSTR_ENCODING_ERROR
 ((f16rm !=`F16RM@INVALID3)) :
 "Invalid f16rm field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((lodlc !=`LODLC@INVALID6)&&(lodlc !=`LODLC@INVALID7)) :
 "Invalid lodlc field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((paramA !=`TEXPARAMA@INVALID6)) :
 "Invalid paramA field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((wmsk == 1)||(wmsk == 2)||(wmsk == 3)||(wmsk == 4)||(wmsk == 5)||(wmsk == 6)||(wmsk == 7)||(wmsk == 8)||(wmsk == 9)||(wmsk == 10)||(wmsk == 11)||(wmsk == 12)||(wmsk == 13)||(wmsk == 14)||(wmsk == 15)) :
 "Invalid wmsk field value"
OOR_REG_ERROR
 (((Rd2)==`Register@RZ)||(((Rd2)<=(%MAX_REG_COUNT-1))&&((Rd2)!=`Register@R254))) :
 "Register Rd2 is out of range"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rb)!=`Register@RZ) :
 "Disallowed register Rb"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
ILLEGAL_INSTR_ENCODING_ERROR
 (((paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@ARRAY_CUBE))) -> (((aoffi == `AOFFI@noaoffi))) :
 "Invalid instruction combination ( rule name: CUBE)"
ILLEGAL_INSTR_ENCODING_ERROR
 (((paramA == `TEXPARAMA@"3D"))) -> (((dc == `DC@nodc))) :
 "Invalid instruction combination ( rule name: 3D)"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@CUBE))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@CUBE))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@CUBE))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@nolodlc))&&((paramA == `TEXPARAMA@"3D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LC))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LL))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LB.LC))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_2D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@CUBE))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@CUBE))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@CUBE))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((dc == `DC@DC))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((dc == `DC@nodc))&&((lodlc == `LODLC@LZ))&&((paramA == `TEXPARAMA@"3D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)==`Register@RZ)||((Rd2)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)+((Rd2)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@TEX_B ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<INDEX(Rd2));
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);

PREDICATES
 IDEST_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>=2) ? (32 + ((f16rm==0)*32)) : 32;
 IDEST2_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>2) ? (32 + (((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))==4)*(f16rm==0)*32)) : 0;
 ISRC_B_SIZE = ((((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@"3D")*3) + ((paramA==`TEXPARAMA@CUBE)*3) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*4))) - (((lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*1)*((((paramA==`TEXPARAMA@ARRAY_1D)*1) + ((paramA==`TEXPARAMA@ARRAY_2D)*1) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*1)))) + (((lodlc==`LODLC@LB)*1 + (lodlc==`LODLC@LL)*1 + (lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*2)) + (aoffi==`AOFFI@AOFFI) + (dc==`DC@DC) + 1)==4) ? 64 : 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@"3D")*3) + ((paramA==`TEXPARAMA@CUBE)*3) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*4))) - (((lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*1)*((((paramA==`TEXPARAMA@ARRAY_1D)*1) + ((paramA==`TEXPARAMA@ARRAY_2D)*1) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*1)))) + (((lodlc==`LODLC@LB)*1 + (lodlc==`LODLC@LL)*1 + (lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*2)) + (aoffi==`AOFFI@AOFFI) + (dc==`DC@DC) + 1)>2) ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        TEXmio_pipe =  0b101101100010;
        TEX =  0b101101100010;

ENCODING
!tex_scr_b_tid__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_60_60_scr=*scr;
BITS_1_59_59_b=*b;
BITS_2_80_79_sem=f16rm;
BITS_3_89_87_Pp=lodlc;
BITS_1_76_76_private=aoffi;
BITS_1_78_78_ofmt=dc;
BITS_3_86_84_cop=cop;
BITS_1_77_77_ntz=ndv;
BITS_1_90_90_Pp_not=nodep;
BITS_3_83_81_Pu=Pu;
BITS_8_71_64_Rc=Rd2;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_6_45_40_hdrtblbase6=hdrtblbase6;
BITS_8_53_46_tid8=tid8;
BITS_3_63_61_dim=paramA;
BITS_4_75_72_PixMaskU04=wmsk;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "tld4_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /TexComp:comp /F16RM("nof16rm"):f16rm /TOFF("notoff"):toff /DC("nodc"):dc /COP("EN"):cop /NODEP("nonodep"):nodep
Predicate("PT"):Pu
','Register:Rd2
','Register:Rd
','NonZeroRegister:Ra
','Register("RZ"):Rb
','UImm(5)*:bank5
','UImm(14)*:tsPtrIdx ','PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D:paramA ','UImm(4/15)*:wmsk
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((f16rm !=`F16RM@INVALID3)) :
 "Invalid f16rm field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((toff !=`TOFF@INVALID3)) :
 "Invalid toff field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((paramA !=`PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@INVALID0)&&(paramA !=`PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@INVALID2)&&(paramA !=`PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@INVALID4)&&(paramA !=`PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@INVALID6)) :
 "Invalid paramA field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((wmsk == 1)||(wmsk == 2)||(wmsk == 3)||(wmsk == 4)||(wmsk == 5)||(wmsk == 6)||(wmsk == 7)||(wmsk == 8)||(wmsk == 9)||(wmsk == 10)||(wmsk == 11)||(wmsk == 12)||(wmsk == 13)||(wmsk == 14)||(wmsk == 15)) :
 "Invalid wmsk field value"
OOR_REG_ERROR
 (((Rd2)==`Register@RZ)||(((Rd2)<=(%MAX_REG_COUNT-1))&&((Rd2)!=`Register@R254))) :
 "Register Rd2 is out of range"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
ILLEGAL_INSTR_ENCODING_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@CUBE)||(paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_CUBE))) -> (((toff == `TOFF@notoff))) :
 "Invalid instruction combination ( rule name: CUBE)"
OOR_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@CUBE))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@CUBE))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@CUBE))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_CUBE))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_CUBE))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_CUBE))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@AOFFI))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@notoff))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@PTP))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@PTP))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@PTP))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@AOFFI))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@AOFFI))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@AOFFI))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@PTP))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@PTP))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@PTP))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)==`Register@RZ)||((Rd2)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)+((Rd2)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@TLD4 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<INDEX(Rd2));
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);

PREDICATES
 IDEST_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>=2) ? (32 + ((f16rm==0)*32)) : 32;
 IDEST2_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>2) ? (32 + (((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))==4)*(f16rm==0)*32)) : 0;
 ISRC_B_SIZE = ((toff==`TOFF@AOFFI)*32 + (toff==`TOFF@PTP)*64 + (dc==`DC@DC)*32);
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@CUBE)*3) + ((paramA==`TEXPARAMA@ARRAY_2D)*3) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*4)))*32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        TLD4mio_pipe =  0b101101100011;
        TLD4 =  0b101101100011;

ENCODING
!tld4__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_60_60_scr=0;
BITS_2_88_87_comp=comp;
BITS_1_59_59_b=0;
BITS_2_80_79_sem=f16rm;
BITS_2_77_76_msi=toff;
BITS_1_78_78_ofmt=dc;
BITS_3_86_84_cop=cop;
BITS_1_90_90_Pp_not=nodep;
BITS_3_83_81_Pu=Pu;
BITS_8_71_64_Rc=Rd2;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_14_53_40_Sb_addr=tsPtrIdx;
BITS_3_63_61_dim=paramA;
BITS_4_75_72_PixMaskU04=wmsk;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "tld4_scr_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /SCRONLY:scr /TexComp:comp /F16RM("nof16rm"):f16rm /TOFF("notoff"):toff /DC("nodc"):dc /COP("EN"):cop /NODEP("nonodep"):nodep
Predicate("PT"):Pu
','Register:Rd2
','Register:Rd
','NonZeroRegister:Ra
','Register("RZ"):Rb
','UImm(5)*:bank5
','UImm(14)*:tsPtrIdx ','PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D:paramA ','UImm(4/15)*:wmsk
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@"3D")*3) + ((paramA==`TEXPARAMA@CUBE)*3) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*4))) + (toff==`TOFF@AOFFI) + (toff==`TOFF@PTP)*2 + (dc==`DC@DC))<=4) :
 "More than 4 coordinates are not allowed for .SCR"
ILLEGAL_INSTR_ENCODING_ERROR
 ((f16rm !=`F16RM@INVALID3)) :
 "Invalid f16rm field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((toff !=`TOFF@INVALID3)) :
 "Invalid toff field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((paramA !=`PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@INVALID0)&&(paramA !=`PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@INVALID2)&&(paramA !=`PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@INVALID4)&&(paramA !=`PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@INVALID6)) :
 "Invalid paramA field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((wmsk == 1)||(wmsk == 2)||(wmsk == 3)||(wmsk == 4)||(wmsk == 5)||(wmsk == 6)||(wmsk == 7)||(wmsk == 8)||(wmsk == 9)||(wmsk == 10)||(wmsk == 11)||(wmsk == 12)||(wmsk == 13)||(wmsk == 14)||(wmsk == 15)) :
 "Invalid wmsk field value"
OOR_REG_ERROR
 (((Rd2)==`Register@RZ)||(((Rd2)<=(%MAX_REG_COUNT-1))&&((Rd2)!=`Register@R254))) :
 "Register Rd2 is out of range"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
ILLEGAL_INSTR_ENCODING_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@CUBE)||(paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_CUBE))) -> (((toff == `TOFF@notoff))) :
 "Invalid instruction combination ( rule name: CUBE)"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@notoff))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_2D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@notoff))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_2D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@notoff))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_2D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@notoff))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_2D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@AOFFI))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_2D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@AOFFI))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_2D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@AOFFI))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_2D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@notoff))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@CUBE))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@notoff))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@CUBE))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@notoff))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@CUBE))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@notoff))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@CUBE))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@AOFFI))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@CUBE))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@AOFFI))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@CUBE))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@AOFFI))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@CUBE))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@notoff))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_CUBE))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@notoff))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_CUBE))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@notoff))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_CUBE))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@notoff))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@notoff))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@AOFFI))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@AOFFI))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@AOFFI))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@AOFFI))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@PTP))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@PTP))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@PTP))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)==`Register@RZ)||((Rd2)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)+((Rd2)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@TLD4 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<INDEX(Rd2));
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);

PREDICATES
 IDEST_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>=2) ? (32 + ((f16rm==0)*32)) : 32;
 IDEST2_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>2) ? (32 + (((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))==4)*(f16rm==0)*32)) : 0;
 ISRC_B_SIZE = ((((((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@CUBE)*3) + ((paramA==`TEXPARAMA@ARRAY_2D)*3) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*4))) + (toff==`TOFF@AOFFI) + (toff==`TOFF@PTP)*2 + (dc==`DC@DC))==4) ? 64 : 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((((((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@CUBE)*3) + ((paramA==`TEXPARAMA@ARRAY_2D)*3) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*4))) + (toff==`TOFF@AOFFI) + (toff==`TOFF@PTP)*2 + (dc==`DC@DC))>2) ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        TLD4mio_pipe =  0b101101100011;
        TLD4 =  0b101101100011;

ENCODING
!tld4_scr__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_60_60_scr=*scr;
BITS_2_88_87_comp=comp;
BITS_1_59_59_b=0;
BITS_2_80_79_sem=f16rm;
BITS_2_77_76_msi=toff;
BITS_1_78_78_ofmt=dc;
BITS_3_86_84_cop=cop;
BITS_1_90_90_Pp_not=nodep;
BITS_3_83_81_Pu=Pu;
BITS_8_71_64_Rc=Rd2;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_14_53_40_Sb_addr=tsPtrIdx;
BITS_3_63_61_dim=paramA;
BITS_4_75_72_PixMaskU04=wmsk;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "tld4_b_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /TexComp:comp /BONLY:b /F16RM("nof16rm"):f16rm /TOFF("notoff"):toff /DC("nodc"):dc /COP("EN"):cop /NODEP("nonodep"):nodep
Predicate("PT"):Pu
','Register:Rd2
','Register:Rd
','NonZeroRegister:Ra
','NonZeroRegister:Rb
','UImm(5)*:bank5
','UImm(14)*:tsPtrIdx ','PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D:paramA ','UImm(4/15)*:wmsk
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((f16rm !=`F16RM@INVALID3)) :
 "Invalid f16rm field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((toff !=`TOFF@INVALID3)) :
 "Invalid toff field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((paramA !=`PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@INVALID0)&&(paramA !=`PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@INVALID2)&&(paramA !=`PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@INVALID4)&&(paramA !=`PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@INVALID6)) :
 "Invalid paramA field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((wmsk == 1)||(wmsk == 2)||(wmsk == 3)||(wmsk == 4)||(wmsk == 5)||(wmsk == 6)||(wmsk == 7)||(wmsk == 8)||(wmsk == 9)||(wmsk == 10)||(wmsk == 11)||(wmsk == 12)||(wmsk == 13)||(wmsk == 14)||(wmsk == 15)) :
 "Invalid wmsk field value"
OOR_REG_ERROR
 (((Rd2)==`Register@RZ)||(((Rd2)<=(%MAX_REG_COUNT-1))&&((Rd2)!=`Register@R254))) :
 "Register Rd2 is out of range"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rb)!=`Register@RZ) :
 "Disallowed register Rb"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
ILLEGAL_INSTR_ENCODING_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@CUBE)||(paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_CUBE))) -> (((toff == `TOFF@notoff))) :
 "Invalid instruction combination ( rule name: CUBE)"
OOR_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@CUBE))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@CUBE))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@CUBE))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_CUBE))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_CUBE))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_CUBE))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@AOFFI))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@AOFFI))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@AOFFI))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@notoff))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@notoff))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@notoff))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@PTP))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@PTP))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@PTP))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@AOFFI))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@AOFFI))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@AOFFI))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@PTP))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@PTP))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@PTP))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)==`Register@RZ)||((Rd2)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)+((Rd2)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@TLD4 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<INDEX(Rd2));
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);

PREDICATES
 IDEST_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>=2) ? (32 + ((f16rm==0)*32)) : 32;
 IDEST2_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>2) ? (32 + (((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))==4)*(f16rm==0)*32)) : 0;
 ISRC_B_SIZE = (32 + (toff==`TOFF@AOFFI)*32 + (toff==`TOFF@PTP)*64 + (dc==`DC@DC)*32);
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@CUBE)*3) + ((paramA==`TEXPARAMA@ARRAY_2D)*3) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*4)))*32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        TLD4mio_pipe =  0b101101100011;
        TLD4 =  0b101101100011;

ENCODING
!tld4_b__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_60_60_scr=0;
BITS_2_88_87_comp=comp;
BITS_1_59_59_b=*b;
BITS_2_80_79_sem=f16rm;
BITS_2_77_76_msi=toff;
BITS_1_78_78_ofmt=dc;
BITS_3_86_84_cop=cop;
BITS_1_90_90_Pp_not=nodep;
BITS_3_83_81_Pu=Pu;
BITS_8_71_64_Rc=Rd2;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_14_53_40_Sb_addr=tsPtrIdx;
BITS_3_63_61_dim=paramA;
BITS_4_75_72_PixMaskU04=wmsk;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "tld4_scr_b_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /SCRONLY:scr /TexComp:comp /BONLY:b /F16RM("nof16rm"):f16rm /TOFF("notoff"):toff /DC("nodc"):dc /COP("EN"):cop /NODEP("nonodep"):nodep
Predicate("PT"):Pu
','Register:Rd2
','Register:Rd
','NonZeroRegister:Ra
','NonZeroRegister:Rb
','UImm(5)*:bank5
','UImm(14)*:tsPtrIdx ','PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D:paramA ','UImm(4/15)*:wmsk
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@"3D")*3) + ((paramA==`TEXPARAMA@CUBE)*3) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*4))) + (toff==`TOFF@AOFFI) + (toff==`TOFF@PTP)*2 + (dc==`DC@DC) + 1)<=4) :
 "More than 4 coordinates are not allowed for .SCR"
ILLEGAL_INSTR_ENCODING_ERROR
 ((f16rm !=`F16RM@INVALID3)) :
 "Invalid f16rm field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((toff !=`TOFF@INVALID3)) :
 "Invalid toff field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((paramA !=`PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@INVALID0)&&(paramA !=`PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@INVALID2)&&(paramA !=`PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@INVALID4)&&(paramA !=`PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@INVALID6)) :
 "Invalid paramA field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((wmsk == 1)||(wmsk == 2)||(wmsk == 3)||(wmsk == 4)||(wmsk == 5)||(wmsk == 6)||(wmsk == 7)||(wmsk == 8)||(wmsk == 9)||(wmsk == 10)||(wmsk == 11)||(wmsk == 12)||(wmsk == 13)||(wmsk == 14)||(wmsk == 15)) :
 "Invalid wmsk field value"
OOR_REG_ERROR
 (((Rd2)==`Register@RZ)||(((Rd2)<=(%MAX_REG_COUNT-1))&&((Rd2)!=`Register@R254))) :
 "Register Rd2 is out of range"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rb)!=`Register@RZ) :
 "Disallowed register Rb"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
ILLEGAL_INSTR_ENCODING_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@CUBE)||(paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_CUBE))) -> (((toff == `TOFF@notoff))) :
 "Invalid instruction combination ( rule name: CUBE)"
OOR_REG_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@notoff))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_2D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@notoff))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_2D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@notoff))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_2D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@notoff))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@CUBE))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@notoff))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@CUBE))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@notoff))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@CUBE))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@notoff))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@notoff))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@notoff))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@notoff))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@AOFFI))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@AOFFI))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@AOFFI))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)==`Register@RZ)||((Rd2)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)+((Rd2)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@TLD4 ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<INDEX(Rd2));
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);

PREDICATES
 IDEST_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>=2) ? (32 + ((f16rm==0)*32)) : 32;
 IDEST2_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>2) ? (32 + (((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))==4)*(f16rm==0)*32)) : 0;
 ISRC_B_SIZE = ((((((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@CUBE)*3) + ((paramA==`TEXPARAMA@ARRAY_2D)*3) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*4))) + (toff==`TOFF@AOFFI) + (toff==`TOFF@PTP)*2 + (dc==`DC@DC) + 1)==4) ? 64 : 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((((((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@CUBE)*3) + ((paramA==`TEXPARAMA@ARRAY_2D)*3) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*4))) + (toff==`TOFF@AOFFI) + (toff==`TOFF@PTP)*2 + (dc==`DC@DC) + 1)>2) ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        TLD4mio_pipe =  0b101101100011;
        TLD4 =  0b101101100011;

ENCODING
!tld4_scr_b__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_60_60_scr=*scr;
BITS_2_88_87_comp=comp;
BITS_1_59_59_b=*b;
BITS_2_80_79_sem=f16rm;
BITS_2_77_76_msi=toff;
BITS_1_78_78_ofmt=dc;
BITS_3_86_84_cop=cop;
BITS_1_90_90_Pp_not=nodep;
BITS_3_83_81_Pu=Pu;
BITS_8_71_64_Rc=Rd2;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_14_53_40_Sb_addr=tsPtrIdx;
BITS_3_63_61_dim=paramA;
BITS_4_75_72_PixMaskU04=wmsk;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "tld4_b_noConst_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /TexComp:comp /BONLY:b /F16RM("nof16rm"):f16rm /TOFF("notoff"):toff /DC("nodc"):dc /COP("EN"):cop /NODEP("nonodep"):nodep
Predicate("PT"):Pu
','Register:Rd2
','Register:Rd
','NonZeroRegister:Ra
','NonZeroRegister:Rb ','PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D:paramA ','UImm(4/15)*:wmsk
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((f16rm !=`F16RM@INVALID3)) :
 "Invalid f16rm field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((toff !=`TOFF@INVALID3)) :
 "Invalid toff field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((paramA !=`PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@INVALID0)&&(paramA !=`PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@INVALID2)&&(paramA !=`PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@INVALID4)&&(paramA !=`PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@INVALID6)) :
 "Invalid paramA field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((wmsk == 1)||(wmsk == 2)||(wmsk == 3)||(wmsk == 4)||(wmsk == 5)||(wmsk == 6)||(wmsk == 7)||(wmsk == 8)||(wmsk == 9)||(wmsk == 10)||(wmsk == 11)||(wmsk == 12)||(wmsk == 13)||(wmsk == 14)||(wmsk == 15)) :
 "Invalid wmsk field value"
OOR_REG_ERROR
 (((Rd2)==`Register@RZ)||(((Rd2)<=(%MAX_REG_COUNT-1))&&((Rd2)!=`Register@R254))) :
 "Register Rd2 is out of range"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rb)!=`Register@RZ) :
 "Disallowed register Rb"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
ILLEGAL_INSTR_ENCODING_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@CUBE)||(paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_CUBE))) -> (((toff == `TOFF@notoff))) :
 "Invalid instruction combination ( rule name: CUBE)"
OOR_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@CUBE))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@CUBE))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@CUBE))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_CUBE))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_CUBE))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_CUBE))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@AOFFI))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@AOFFI))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@AOFFI))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@notoff))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@notoff))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@notoff))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@PTP))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@PTP))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@PTP))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@AOFFI))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@AOFFI))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@AOFFI))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@PTP))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@PTP))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@PTP))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)==`Register@RZ)||((Rd2)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)+((Rd2)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@TLD4_B_noConst ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<INDEX(Rd2));
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);

PREDICATES
 IDEST_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>=2) ? (32 + ((f16rm==0)*32)) : 32;
 IDEST2_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>2) ? (32 + (((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))==4)*(f16rm==0)*32)) : 0;
 ISRC_B_SIZE = (32 + (toff==`TOFF@AOFFI)*32 + (toff==`TOFF@PTP)*64 + (dc==`DC@DC)*32);
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@CUBE)*3) + ((paramA==`TEXPARAMA@ARRAY_2D)*3) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*4)))*32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        TLD4mio_pipe =  0b1101100100;
        TLD4 =  0b1101100100;

ENCODING
!tld4_b_noConst__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_60_60_scr=0;
BITS_2_88_87_comp=comp;
BITS_1_59_59_b=*b;
BITS_2_80_79_sem=f16rm;
BITS_2_77_76_msi=toff;
BITS_1_78_78_ofmt=dc;
BITS_3_86_84_cop=cop;
BITS_1_90_90_Pp_not=nodep;
BITS_3_83_81_Pu=Pu;
BITS_8_71_64_Rc=Rd2;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_3_63_61_dim=paramA;
BITS_4_75_72_PixMaskU04=wmsk;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "tld4_scr_b_noConst_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /SCRONLY:scr /TexComp:comp /BONLY:b /F16RM("nof16rm"):f16rm /TOFF("notoff"):toff /DC("nodc"):dc /COP("EN"):cop /NODEP("nonodep"):nodep
Predicate("PT"):Pu
','Register:Rd2
','Register:Rd
','NonZeroRegister:Ra
','NonZeroRegister:Rb ','PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D:paramA ','UImm(4/15)*:wmsk
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@"3D")*3) + ((paramA==`TEXPARAMA@CUBE)*3) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*4))) + (toff==`TOFF@AOFFI) + (toff==`TOFF@PTP)*2 + (dc==`DC@DC) + 1)<=4) :
 "More than 4 coordinates are not allowed for .SCR"
ILLEGAL_INSTR_ENCODING_ERROR
 ((f16rm !=`F16RM@INVALID3)) :
 "Invalid f16rm field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((toff !=`TOFF@INVALID3)) :
 "Invalid toff field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((paramA !=`PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@INVALID0)&&(paramA !=`PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@INVALID2)&&(paramA !=`PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@INVALID4)&&(paramA !=`PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@INVALID6)) :
 "Invalid paramA field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((wmsk == 1)||(wmsk == 2)||(wmsk == 3)||(wmsk == 4)||(wmsk == 5)||(wmsk == 6)||(wmsk == 7)||(wmsk == 8)||(wmsk == 9)||(wmsk == 10)||(wmsk == 11)||(wmsk == 12)||(wmsk == 13)||(wmsk == 14)||(wmsk == 15)) :
 "Invalid wmsk field value"
OOR_REG_ERROR
 (((Rd2)==`Register@RZ)||(((Rd2)<=(%MAX_REG_COUNT-1))&&((Rd2)!=`Register@R254))) :
 "Register Rd2 is out of range"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rb)!=`Register@RZ) :
 "Disallowed register Rb"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
ILLEGAL_INSTR_ENCODING_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@CUBE)||(paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_CUBE))) -> (((toff == `TOFF@notoff))) :
 "Invalid instruction combination ( rule name: CUBE)"
OOR_REG_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@notoff))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_2D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@notoff))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_2D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@notoff))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_2D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@notoff))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@CUBE))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@notoff))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@CUBE))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@notoff))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@CUBE))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@notoff))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@notoff))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@notoff))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@notoff))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@AOFFI))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@AOFFI))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@AOFFI))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)==`Register@RZ)||((Rd2)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)+((Rd2)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@TLD4_B_noConst ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<INDEX(Rd2));
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);

PREDICATES
 IDEST_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>=2) ? (32 + ((f16rm==0)*32)) : 32;
 IDEST2_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>2) ? (32 + (((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))==4)*(f16rm==0)*32)) : 0;
 ISRC_B_SIZE = ((((((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@CUBE)*3) + ((paramA==`TEXPARAMA@ARRAY_2D)*3) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*4))) + (toff==`TOFF@AOFFI) + (toff==`TOFF@PTP)*2 + (dc==`DC@DC) + 1)==4) ? 64 : 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((((((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@CUBE)*3) + ((paramA==`TEXPARAMA@ARRAY_2D)*3) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*4))) + (toff==`TOFF@AOFFI) + (toff==`TOFF@PTP)*2 + (dc==`DC@DC) + 1)>2) ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        TLD4mio_pipe =  0b1101100100;
        TLD4 =  0b1101100100;

ENCODING
!tld4_scr_b_noConst__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_60_60_scr=*scr;
BITS_2_88_87_comp=comp;
BITS_1_59_59_b=*b;
BITS_2_80_79_sem=f16rm;
BITS_2_77_76_msi=toff;
BITS_1_78_78_ofmt=dc;
BITS_3_86_84_cop=cop;
BITS_1_90_90_Pp_not=nodep;
BITS_3_83_81_Pu=Pu;
BITS_8_71_64_Rc=Rd2;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_3_63_61_dim=paramA;
BITS_4_75_72_PixMaskU04=wmsk;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "tld4_b_tid_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /TexComp:comp /BONLY:b /F16RM("nof16rm"):f16rm /TOFF("notoff"):toff /DC("nodc"):dc /COP("EN"):cop /NODEP("nonodep"):nodep
Predicate("PT"):Pu
','Register:Rd2
','Register:Rd
','NonZeroRegister:Ra
','NonZeroRegister:Rb
','UImm(5)*:bank5
','UImm(6)*:hdrtblbase6
','UImm(8)*:tid8 ','PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D:paramA ','UImm(4/15)*:wmsk
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((f16rm !=`F16RM@INVALID3)) :
 "Invalid f16rm field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((toff !=`TOFF@INVALID3)) :
 "Invalid toff field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((paramA !=`PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@INVALID0)&&(paramA !=`PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@INVALID2)&&(paramA !=`PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@INVALID4)&&(paramA !=`PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@INVALID6)) :
 "Invalid paramA field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((wmsk == 1)||(wmsk == 2)||(wmsk == 3)||(wmsk == 4)||(wmsk == 5)||(wmsk == 6)||(wmsk == 7)||(wmsk == 8)||(wmsk == 9)||(wmsk == 10)||(wmsk == 11)||(wmsk == 12)||(wmsk == 13)||(wmsk == 14)||(wmsk == 15)) :
 "Invalid wmsk field value"
OOR_REG_ERROR
 (((Rd2)==`Register@RZ)||(((Rd2)<=(%MAX_REG_COUNT-1))&&((Rd2)!=`Register@R254))) :
 "Register Rd2 is out of range"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rb)!=`Register@RZ) :
 "Disallowed register Rb"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
ILLEGAL_INSTR_ENCODING_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@CUBE)||(paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_CUBE))) -> (((toff == `TOFF@notoff))) :
 "Invalid instruction combination ( rule name: CUBE)"
OOR_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@CUBE))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@CUBE))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@CUBE))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_CUBE))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_CUBE))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_CUBE))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@AOFFI))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@AOFFI))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@AOFFI))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@notoff))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@notoff))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@notoff))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@PTP))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@PTP))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@PTP))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@AOFFI))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@AOFFI))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@AOFFI))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@PTP))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@PTP))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@PTP))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)==`Register@RZ)||((Rd2)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)+((Rd2)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@TLD4_B ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<INDEX(Rd2));
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);

PREDICATES
 IDEST_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>=2) ? (32 + ((f16rm==0)*32)) : 32;
 IDEST2_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>2) ? (32 + (((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))==4)*(f16rm==0)*32)) : 0;
 ISRC_B_SIZE = (32 + (toff==`TOFF@AOFFI)*32 + (toff==`TOFF@PTP)*64 + (dc==`DC@DC)*32);
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@CUBE)*3) + ((paramA==`TEXPARAMA@ARRAY_2D)*3) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*4)))*32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        TLD4mio_pipe =  0b101101100101;
        TLD4 =  0b101101100101;

ENCODING
!tld4_b_tid__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_60_60_scr=0;
BITS_2_88_87_comp=comp;
BITS_1_59_59_b=*b;
BITS_2_80_79_sem=f16rm;
BITS_2_77_76_msi=toff;
BITS_1_78_78_ofmt=dc;
BITS_3_86_84_cop=cop;
BITS_1_90_90_Pp_not=nodep;
BITS_3_83_81_Pu=Pu;
BITS_8_71_64_Rc=Rd2;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_6_45_40_hdrtblbase6=hdrtblbase6;
BITS_8_53_46_tid8=tid8;
BITS_3_63_61_dim=paramA;
BITS_4_75_72_PixMaskU04=wmsk;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "tld4_scr_b_tid_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /SCRONLY:scr /TexComp:comp /BONLY:b /F16RM("nof16rm"):f16rm /TOFF("notoff"):toff /DC("nodc"):dc /COP("EN"):cop /NODEP("nonodep"):nodep
Predicate("PT"):Pu
','Register:Rd2
','Register:Rd
','NonZeroRegister:Ra
','NonZeroRegister:Rb
','UImm(5)*:bank5
','UImm(6)*:hdrtblbase6
','UImm(8)*:tid8 ','PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D:paramA ','UImm(4/15)*:wmsk
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@"3D")*3) + ((paramA==`TEXPARAMA@CUBE)*3) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*4))) + (toff==`TOFF@AOFFI) + (toff==`TOFF@PTP)*2 + (dc==`DC@DC) + 1)<=4) :
 "More than 4 coordinates are not allowed for .SCR"
ILLEGAL_INSTR_ENCODING_ERROR
 ((f16rm !=`F16RM@INVALID3)) :
 "Invalid f16rm field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((toff !=`TOFF@INVALID3)) :
 "Invalid toff field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((paramA !=`PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@INVALID0)&&(paramA !=`PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@INVALID2)&&(paramA !=`PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@INVALID4)&&(paramA !=`PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@INVALID6)) :
 "Invalid paramA field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((wmsk == 1)||(wmsk == 2)||(wmsk == 3)||(wmsk == 4)||(wmsk == 5)||(wmsk == 6)||(wmsk == 7)||(wmsk == 8)||(wmsk == 9)||(wmsk == 10)||(wmsk == 11)||(wmsk == 12)||(wmsk == 13)||(wmsk == 14)||(wmsk == 15)) :
 "Invalid wmsk field value"
OOR_REG_ERROR
 (((Rd2)==`Register@RZ)||(((Rd2)<=(%MAX_REG_COUNT-1))&&((Rd2)!=`Register@R254))) :
 "Register Rd2 is out of range"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rb)!=`Register@RZ) :
 "Disallowed register Rb"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
ILLEGAL_INSTR_ENCODING_ERROR
 (((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@CUBE)||(paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_CUBE))) -> (((toff == `TOFF@notoff))) :
 "Invalid instruction combination ( rule name: CUBE)"
OOR_REG_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@notoff))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_2D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@notoff))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_2D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@notoff))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@ARRAY_2D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@notoff))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@CUBE))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@notoff))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@CUBE))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@notoff))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@CUBE))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@notoff))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@notoff))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@notoff))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@DC))&&((toff == `TOFF@notoff))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@AOFFI))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@AOFFI))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((dc == `DC@nodc))&&((toff == `TOFF@AOFFI))&&((paramA == `PARAMA_ARRAY_2D_CUBE_ARRAY_CUBE_2D@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)==`Register@RZ)||((Rd2)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)+((Rd2)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@TLD4_B ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<INDEX(Rd2));
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);

PREDICATES
 IDEST_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>=2) ? (32 + ((f16rm==0)*32)) : 32;
 IDEST2_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>2) ? (32 + (((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))==4)*(f16rm==0)*32)) : 0;
 ISRC_B_SIZE = ((((((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@CUBE)*3) + ((paramA==`TEXPARAMA@ARRAY_2D)*3) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*4))) + (toff==`TOFF@AOFFI) + (toff==`TOFF@PTP)*2 + (dc==`DC@DC) + 1)==4) ? 64 : 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((((((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@CUBE)*3) + ((paramA==`TEXPARAMA@ARRAY_2D)*3) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*4))) + (toff==`TOFF@AOFFI) + (toff==`TOFF@PTP)*2 + (dc==`DC@DC) + 1)>2) ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        TLD4mio_pipe =  0b101101100101;
        TLD4 =  0b101101100101;

ENCODING
!tld4_scr_b_tid__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_60_60_scr=*scr;
BITS_2_88_87_comp=comp;
BITS_1_59_59_b=*b;
BITS_2_80_79_sem=f16rm;
BITS_2_77_76_msi=toff;
BITS_1_78_78_ofmt=dc;
BITS_3_86_84_cop=cop;
BITS_1_90_90_Pp_not=nodep;
BITS_3_83_81_Pu=Pu;
BITS_8_71_64_Rc=Rd2;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_6_45_40_hdrtblbase6=hdrtblbase6;
BITS_8_53_46_tid8=tid8;
BITS_3_63_61_dim=paramA;
BITS_4_75_72_PixMaskU04=wmsk;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "tld_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /F16RM("nof16rm"):f16rm /LODLC_LL_LZ:lodlc /AOFFI("noaoffi"):aoffi /COP("EN"):cop /MS("noms"):ms /CL("nocl"):cl /NODEP("nonodep"):nodep
Predicate("PT"):Pu
','Register:Rd2
','Register:Rd
','NonZeroRegister:Ra
','Register("RZ"):Rb
','UImm(5)*:bank5
','UImm(14)*:tsPtrIdx ','PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D:paramA ','UImm(4/15)*:wmsk
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((f16rm !=`F16RM@INVALID3)) :
 "Invalid f16rm field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((lodlc !=`LODLC_LL_LZ@INVALID0)&&(lodlc !=`LODLC_LL_LZ@INVALID2)&&(lodlc !=`LODLC_LL_LZ@INVALID4)&&(lodlc !=`LODLC_LL_LZ@INVALID5)&&(lodlc !=`LODLC_LL_LZ@INVALID6)&&(lodlc !=`LODLC_LL_LZ@INVALID7)) :
 "Invalid lodlc field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((paramA !=`PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@INVALID3)&&(paramA !=`PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@INVALID6)&&(paramA !=`PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@INVALID7)) :
 "Invalid paramA field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((wmsk == 1)||(wmsk == 2)||(wmsk == 3)||(wmsk == 4)||(wmsk == 5)||(wmsk == 6)||(wmsk == 7)||(wmsk == 8)||(wmsk == 9)||(wmsk == 10)||(wmsk == 11)||(wmsk == 12)||(wmsk == 13)||(wmsk == 14)||(wmsk == 15)) :
 "Invalid wmsk field value"
OOR_REG_ERROR
 (((Rd2)==`Register@RZ)||(((Rd2)<=(%MAX_REG_COUNT-1))&&((Rd2)!=`Register@R254))) :
 "Register Rd2 is out of range"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
ILLEGAL_INSTR_ENCODING_ERROR
 (((ms == `MS@MS))) -> (((cl == `CL@nocl))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) :
 "Invalid instruction combination ( rule name: MS)"
OOR_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)==`Register@RZ)||((Rd2)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)+((Rd2)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@TLD ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<INDEX(Rd2));
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);

PREDICATES
 IDEST_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>=2) ? (32 + ((f16rm==0)*32)) : 32;
 IDEST2_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>2) ? (32 + (((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))==4)*(f16rm==0)*32)) : 0;
 ISRC_B_SIZE = ((aoffi==`AOFFI@AOFFI)*32 + (((lodlc==`LODLC@LB)*1 + (lodlc==`LODLC@LL)*1 + (lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*2) - ((lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*1))*32 + (ms==`MS@MS)*32);
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@"3D")*3) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3)))*32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        TLDmio_pipe =  0b101101100110;
        TLD =  0b101101100110;

ENCODING
!tld__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_60_60_scr=0;
BITS_1_59_59_b=0;
BITS_2_80_79_sem=f16rm;
BITS_3_89_87_Pp=lodlc;
BITS_1_76_76_private=aoffi;
BITS_3_86_84_cop=cop;
BITS_1_78_78_ofmt=ms;
BITS_1_77_77_ntz=cl;
BITS_1_90_90_Pp_not=nodep;
BITS_3_83_81_Pu=Pu;
BITS_8_71_64_Rc=Rd2;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_14_53_40_Sb_addr=tsPtrIdx;
BITS_3_63_61_dim=paramA;
BITS_4_75_72_PixMaskU04=wmsk;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "tld_scr_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /SCRONLY:scr /F16RM("nof16rm"):f16rm /LODLC_LL_LZ:lodlc /AOFFI("noaoffi"):aoffi /COP("EN"):cop /MS("noms"):ms /CL("nocl"):cl /NODEP("nonodep"):nodep
Predicate("PT"):Pu
','Register:Rd2
','Register:Rd
','NonZeroRegister:Ra
','Register("RZ"):Rb
','UImm(5)*:bank5
','UImm(14)*:tsPtrIdx ','PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D:paramA ','UImm(4/15)*:wmsk
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@"3D")*3) + ((paramA==`TEXPARAMA@CUBE)*3) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*4))) + (((lodlc==`LODLC@LB)*1 + (lodlc==`LODLC@LL)*1 + (lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*2) - ((lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*1)) + (aoffi==`AOFFI@AOFFI) + (ms==`MS@MS))<=4) :
 "More than 4 coordinates are not allowed for .SCR"
ILLEGAL_INSTR_ENCODING_ERROR
 ((f16rm !=`F16RM@INVALID3)) :
 "Invalid f16rm field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((lodlc !=`LODLC_LL_LZ@INVALID0)&&(lodlc !=`LODLC_LL_LZ@INVALID2)&&(lodlc !=`LODLC_LL_LZ@INVALID4)&&(lodlc !=`LODLC_LL_LZ@INVALID5)&&(lodlc !=`LODLC_LL_LZ@INVALID6)&&(lodlc !=`LODLC_LL_LZ@INVALID7)) :
 "Invalid lodlc field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((paramA !=`PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@INVALID3)&&(paramA !=`PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@INVALID6)&&(paramA !=`PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@INVALID7)) :
 "Invalid paramA field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((wmsk == 1)||(wmsk == 2)||(wmsk == 3)||(wmsk == 4)||(wmsk == 5)||(wmsk == 6)||(wmsk == 7)||(wmsk == 8)||(wmsk == 9)||(wmsk == 10)||(wmsk == 11)||(wmsk == 12)||(wmsk == 13)||(wmsk == 14)||(wmsk == 15)) :
 "Invalid wmsk field value"
OOR_REG_ERROR
 (((Rd2)==`Register@RZ)||(((Rd2)<=(%MAX_REG_COUNT-1))&&((Rd2)!=`Register@R254))) :
 "Register Rd2 is out of range"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
ILLEGAL_INSTR_ENCODING_ERROR
 (((ms == `MS@MS))) -> (((cl == `CL@nocl))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) :
 "Invalid instruction combination ( rule name: MS)"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_2D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_2D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_2D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"3D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_2D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_2D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_2D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_2D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_2D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_2D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_2D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)==`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"3D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"3D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"3D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)==`Register@RZ)||((Rd2)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)+((Rd2)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@TLD ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<INDEX(Rd2));
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);

PREDICATES
 IDEST_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>=2) ? (32 + ((f16rm==0)*32)) : 32;
 IDEST2_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>2) ? (32 + (((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))==4)*(f16rm==0)*32)) : 0;
 ISRC_B_SIZE = ((((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@"3D")*3) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3))) + (((lodlc==`LODLC@LB)*1 + (lodlc==`LODLC@LL)*1 + (lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*2) - ((lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*1)) + (aoffi==`AOFFI@AOFFI) + (ms==`MS@MS))==4) ? 64 : 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@"3D")*3) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3))) + (((lodlc==`LODLC@LB)*1 + (lodlc==`LODLC@LL)*1 + (lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*2) - ((lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*1)) + (aoffi==`AOFFI@AOFFI) + (ms==`MS@MS))>2) ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        TLDmio_pipe =  0b101101100110;
        TLD =  0b101101100110;

ENCODING
!tld_scr__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_60_60_scr=*scr;
BITS_1_59_59_b=0;
BITS_2_80_79_sem=f16rm;
BITS_3_89_87_Pp=lodlc;
BITS_1_76_76_private=aoffi;
BITS_3_86_84_cop=cop;
BITS_1_78_78_ofmt=ms;
BITS_1_77_77_ntz=cl;
BITS_1_90_90_Pp_not=nodep;
BITS_3_83_81_Pu=Pu;
BITS_8_71_64_Rc=Rd2;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_14_53_40_Sb_addr=tsPtrIdx;
BITS_3_63_61_dim=paramA;
BITS_4_75_72_PixMaskU04=wmsk;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "tld_b_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BONLY:b /F16RM("nof16rm"):f16rm /LODLC_LL_LZ:lodlc /AOFFI("noaoffi"):aoffi /COP("EN"):cop /MS("noms"):ms /CL("nocl"):cl /NODEP("nonodep"):nodep
Predicate("PT"):Pu
','Register:Rd2
','Register:Rd
','NonZeroRegister:Ra
','NonZeroRegister:Rb
','UImm(5)*:bank5
','UImm(14)*:tsPtrIdx ','PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D:paramA ','UImm(4/15)*:wmsk
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((f16rm !=`F16RM@INVALID3)) :
 "Invalid f16rm field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((lodlc !=`LODLC_LL_LZ@INVALID0)&&(lodlc !=`LODLC_LL_LZ@INVALID2)&&(lodlc !=`LODLC_LL_LZ@INVALID4)&&(lodlc !=`LODLC_LL_LZ@INVALID5)&&(lodlc !=`LODLC_LL_LZ@INVALID6)&&(lodlc !=`LODLC_LL_LZ@INVALID7)) :
 "Invalid lodlc field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((paramA !=`PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@INVALID3)&&(paramA !=`PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@INVALID6)&&(paramA !=`PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@INVALID7)) :
 "Invalid paramA field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((wmsk == 1)||(wmsk == 2)||(wmsk == 3)||(wmsk == 4)||(wmsk == 5)||(wmsk == 6)||(wmsk == 7)||(wmsk == 8)||(wmsk == 9)||(wmsk == 10)||(wmsk == 11)||(wmsk == 12)||(wmsk == 13)||(wmsk == 14)||(wmsk == 15)) :
 "Invalid wmsk field value"
OOR_REG_ERROR
 (((Rd2)==`Register@RZ)||(((Rd2)<=(%MAX_REG_COUNT-1))&&((Rd2)!=`Register@R254))) :
 "Register Rd2 is out of range"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rb)!=`Register@RZ) :
 "Disallowed register Rb"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
ILLEGAL_INSTR_ENCODING_ERROR
 (((ms == `MS@MS))) -> (((cl == `CL@nocl))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) :
 "Invalid instruction combination ( rule name: MS)"
OOR_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)==`Register@RZ)||((Rd2)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)+((Rd2)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@TLD ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<INDEX(Rd2));
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);

PREDICATES
 IDEST_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>=2) ? (32 + ((f16rm==0)*32)) : 32;
 IDEST2_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>2) ? (32 + (((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))==4)*(f16rm==0)*32)) : 0;
 ISRC_B_SIZE = (32 + (aoffi==`AOFFI@AOFFI)*32 + (((lodlc==`LODLC@LB)*1 + (lodlc==`LODLC@LL)*1 + (lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*2) - ((lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*1))*32 + (ms==`MS@MS)*32);
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@"3D")*3) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3)))*32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        TLDmio_pipe =  0b101101100110;
        TLD =  0b101101100110;

ENCODING
!tld_b__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_60_60_scr=0;
BITS_1_59_59_b=*b;
BITS_2_80_79_sem=f16rm;
BITS_3_89_87_Pp=lodlc;
BITS_1_76_76_private=aoffi;
BITS_3_86_84_cop=cop;
BITS_1_78_78_ofmt=ms;
BITS_1_77_77_ntz=cl;
BITS_1_90_90_Pp_not=nodep;
BITS_3_83_81_Pu=Pu;
BITS_8_71_64_Rc=Rd2;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_14_53_40_Sb_addr=tsPtrIdx;
BITS_3_63_61_dim=paramA;
BITS_4_75_72_PixMaskU04=wmsk;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "tld_scr_b_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /SCRONLY:scr /BONLY:b /F16RM("nof16rm"):f16rm /LODLC_LL_LZ:lodlc /AOFFI("noaoffi"):aoffi /COP("EN"):cop /MS("noms"):ms /CL("nocl"):cl /NODEP("nonodep"):nodep
Predicate("PT"):Pu
','Register:Rd2
','Register:Rd
','NonZeroRegister:Ra
','NonZeroRegister:Rb
','UImm(5)*:bank5
','UImm(14)*:tsPtrIdx ','PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D:paramA ','UImm(4/15)*:wmsk
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@"3D")*3) + ((paramA==`TEXPARAMA@CUBE)*3) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*4))) + (((lodlc==`LODLC@LB)*1 + (lodlc==`LODLC@LL)*1 + (lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*2) - ((lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*1)) + (aoffi==`AOFFI@AOFFI) + (ms==`MS@MS) + 1)<=4) :
 "More than 4 coordinates are not allowed for .SCR"
ILLEGAL_INSTR_ENCODING_ERROR
 ((f16rm !=`F16RM@INVALID3)) :
 "Invalid f16rm field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((lodlc !=`LODLC_LL_LZ@INVALID0)&&(lodlc !=`LODLC_LL_LZ@INVALID2)&&(lodlc !=`LODLC_LL_LZ@INVALID4)&&(lodlc !=`LODLC_LL_LZ@INVALID5)&&(lodlc !=`LODLC_LL_LZ@INVALID6)&&(lodlc !=`LODLC_LL_LZ@INVALID7)) :
 "Invalid lodlc field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((paramA !=`PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@INVALID3)&&(paramA !=`PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@INVALID6)&&(paramA !=`PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@INVALID7)) :
 "Invalid paramA field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((wmsk == 1)||(wmsk == 2)||(wmsk == 3)||(wmsk == 4)||(wmsk == 5)||(wmsk == 6)||(wmsk == 7)||(wmsk == 8)||(wmsk == 9)||(wmsk == 10)||(wmsk == 11)||(wmsk == 12)||(wmsk == 13)||(wmsk == 14)||(wmsk == 15)) :
 "Invalid wmsk field value"
OOR_REG_ERROR
 (((Rd2)==`Register@RZ)||(((Rd2)<=(%MAX_REG_COUNT-1))&&((Rd2)!=`Register@R254))) :
 "Register Rd2 is out of range"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rb)!=`Register@RZ) :
 "Disallowed register Rb"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
ILLEGAL_INSTR_ENCODING_ERROR
 (((ms == `MS@MS))) -> (((cl == `CL@nocl))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) :
 "Invalid instruction combination ( rule name: MS)"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_2D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_2D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_2D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"3D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)==`Register@RZ)||((Rd2)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)+((Rd2)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@TLD ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<INDEX(Rd2));
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);

PREDICATES
 IDEST_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>=2) ? (32 + ((f16rm==0)*32)) : 32;
 IDEST2_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>2) ? (32 + (((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))==4)*(f16rm==0)*32)) : 0;
 ISRC_B_SIZE = ((((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@"3D")*3) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3))) + (((lodlc==`LODLC@LB)*1 + (lodlc==`LODLC@LL)*1 + (lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*2) - ((lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*1)) + (aoffi==`AOFFI@AOFFI) + (ms==`MS@MS) + 1)==4) ? 64 : 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@"3D")*3) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3))) + (((lodlc==`LODLC@LB)*1 + (lodlc==`LODLC@LL)*1 + (lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*2) - ((lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*1)) + (aoffi==`AOFFI@AOFFI) + (ms==`MS@MS) + 1)>2) ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        TLDmio_pipe =  0b101101100110;
        TLD =  0b101101100110;

ENCODING
!tld_scr_b__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_60_60_scr=*scr;
BITS_1_59_59_b=*b;
BITS_2_80_79_sem=f16rm;
BITS_3_89_87_Pp=lodlc;
BITS_1_76_76_private=aoffi;
BITS_3_86_84_cop=cop;
BITS_1_78_78_ofmt=ms;
BITS_1_77_77_ntz=cl;
BITS_1_90_90_Pp_not=nodep;
BITS_3_83_81_Pu=Pu;
BITS_8_71_64_Rc=Rd2;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_14_53_40_Sb_addr=tsPtrIdx;
BITS_3_63_61_dim=paramA;
BITS_4_75_72_PixMaskU04=wmsk;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "tld_b_noConst_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BONLY:b /F16RM("nof16rm"):f16rm /LODLC_LL_LZ:lodlc /AOFFI("noaoffi"):aoffi /COP("EN"):cop /MS("noms"):ms /CL("nocl"):cl /NODEP("nonodep"):nodep
Predicate("PT"):Pu
','Register:Rd2
','Register:Rd
','NonZeroRegister:Ra
','NonZeroRegister:Rb ','PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D:paramA ','UImm(4/15)*:wmsk
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((f16rm !=`F16RM@INVALID3)) :
 "Invalid f16rm field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((lodlc !=`LODLC_LL_LZ@INVALID0)&&(lodlc !=`LODLC_LL_LZ@INVALID2)&&(lodlc !=`LODLC_LL_LZ@INVALID4)&&(lodlc !=`LODLC_LL_LZ@INVALID5)&&(lodlc !=`LODLC_LL_LZ@INVALID6)&&(lodlc !=`LODLC_LL_LZ@INVALID7)) :
 "Invalid lodlc field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((paramA !=`PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@INVALID3)&&(paramA !=`PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@INVALID6)&&(paramA !=`PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@INVALID7)) :
 "Invalid paramA field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((wmsk == 1)||(wmsk == 2)||(wmsk == 3)||(wmsk == 4)||(wmsk == 5)||(wmsk == 6)||(wmsk == 7)||(wmsk == 8)||(wmsk == 9)||(wmsk == 10)||(wmsk == 11)||(wmsk == 12)||(wmsk == 13)||(wmsk == 14)||(wmsk == 15)) :
 "Invalid wmsk field value"
OOR_REG_ERROR
 (((Rd2)==`Register@RZ)||(((Rd2)<=(%MAX_REG_COUNT-1))&&((Rd2)!=`Register@R254))) :
 "Register Rd2 is out of range"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rb)!=`Register@RZ) :
 "Disallowed register Rb"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
ILLEGAL_INSTR_ENCODING_ERROR
 (((ms == `MS@MS))) -> (((cl == `CL@nocl))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) :
 "Invalid instruction combination ( rule name: MS)"
OOR_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)==`Register@RZ)||((Rd2)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)+((Rd2)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@TLD_B_noConst ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<INDEX(Rd2));
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);

PREDICATES
 IDEST_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>=2) ? (32 + ((f16rm==0)*32)) : 32;
 IDEST2_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>2) ? (32 + (((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))==4)*(f16rm==0)*32)) : 0;
 ISRC_B_SIZE = (32 + (aoffi==`AOFFI@AOFFI)*32 + (((lodlc==`LODLC@LB)*1 + (lodlc==`LODLC@LL)*1 + (lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*2) - ((lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*1))*32 + (ms==`MS@MS)*32);
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@"3D")*3) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3)))*32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        TLDmio_pipe =  0b1101100111;
        TLD =  0b1101100111;

ENCODING
!tld_b_noConst__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_60_60_scr=0;
BITS_1_59_59_b=*b;
BITS_2_80_79_sem=f16rm;
BITS_3_89_87_Pp=lodlc;
BITS_1_76_76_private=aoffi;
BITS_3_86_84_cop=cop;
BITS_1_78_78_ofmt=ms;
BITS_1_77_77_ntz=cl;
BITS_1_90_90_Pp_not=nodep;
BITS_3_83_81_Pu=Pu;
BITS_8_71_64_Rc=Rd2;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_3_63_61_dim=paramA;
BITS_4_75_72_PixMaskU04=wmsk;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "tld_scr_b_noConst_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /SCRONLY:scr /BONLY:b /F16RM("nof16rm"):f16rm /LODLC_LL_LZ:lodlc /AOFFI("noaoffi"):aoffi /COP("EN"):cop /MS("noms"):ms /CL("nocl"):cl /NODEP("nonodep"):nodep
Predicate("PT"):Pu
','Register:Rd2
','Register:Rd
','NonZeroRegister:Ra
','NonZeroRegister:Rb ','PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D:paramA ','UImm(4/15)*:wmsk
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@"3D")*3) + ((paramA==`TEXPARAMA@CUBE)*3) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*4))) + (((lodlc==`LODLC@LB)*1 + (lodlc==`LODLC@LL)*1 + (lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*2) - ((lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*1)) + (aoffi==`AOFFI@AOFFI) + (ms==`MS@MS) + 1)<=4) :
 "More than 4 coordinates are not allowed for .SCR"
ILLEGAL_INSTR_ENCODING_ERROR
 ((f16rm !=`F16RM@INVALID3)) :
 "Invalid f16rm field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((lodlc !=`LODLC_LL_LZ@INVALID0)&&(lodlc !=`LODLC_LL_LZ@INVALID2)&&(lodlc !=`LODLC_LL_LZ@INVALID4)&&(lodlc !=`LODLC_LL_LZ@INVALID5)&&(lodlc !=`LODLC_LL_LZ@INVALID6)&&(lodlc !=`LODLC_LL_LZ@INVALID7)) :
 "Invalid lodlc field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((paramA !=`PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@INVALID3)&&(paramA !=`PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@INVALID6)&&(paramA !=`PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@INVALID7)) :
 "Invalid paramA field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((wmsk == 1)||(wmsk == 2)||(wmsk == 3)||(wmsk == 4)||(wmsk == 5)||(wmsk == 6)||(wmsk == 7)||(wmsk == 8)||(wmsk == 9)||(wmsk == 10)||(wmsk == 11)||(wmsk == 12)||(wmsk == 13)||(wmsk == 14)||(wmsk == 15)) :
 "Invalid wmsk field value"
OOR_REG_ERROR
 (((Rd2)==`Register@RZ)||(((Rd2)<=(%MAX_REG_COUNT-1))&&((Rd2)!=`Register@R254))) :
 "Register Rd2 is out of range"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rb)!=`Register@RZ) :
 "Disallowed register Rb"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
ILLEGAL_INSTR_ENCODING_ERROR
 (((ms == `MS@MS))) -> (((cl == `CL@nocl))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) :
 "Invalid instruction combination ( rule name: MS)"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_2D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_2D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_2D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"3D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)==`Register@RZ)||((Rd2)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)+((Rd2)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@TLD_B_noConst ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<INDEX(Rd2));
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);

PREDICATES
 IDEST_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>=2) ? (32 + ((f16rm==0)*32)) : 32;
 IDEST2_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>2) ? (32 + (((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))==4)*(f16rm==0)*32)) : 0;
 ISRC_B_SIZE = ((((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@"3D")*3) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3))) + (((lodlc==`LODLC@LB)*1 + (lodlc==`LODLC@LL)*1 + (lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*2) - ((lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*1)) + (aoffi==`AOFFI@AOFFI) + (ms==`MS@MS) + 1)==4) ? 64 : 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@"3D")*3) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3))) + (((lodlc==`LODLC@LB)*1 + (lodlc==`LODLC@LL)*1 + (lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*2) - ((lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*1)) + (aoffi==`AOFFI@AOFFI) + (ms==`MS@MS) + 1)>2) ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        TLDmio_pipe =  0b1101100111;
        TLD =  0b1101100111;

ENCODING
!tld_scr_b_noConst__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_60_60_scr=*scr;
BITS_1_59_59_b=*b;
BITS_2_80_79_sem=f16rm;
BITS_3_89_87_Pp=lodlc;
BITS_1_76_76_private=aoffi;
BITS_3_86_84_cop=cop;
BITS_1_78_78_ofmt=ms;
BITS_1_77_77_ntz=cl;
BITS_1_90_90_Pp_not=nodep;
BITS_3_83_81_Pu=Pu;
BITS_8_71_64_Rc=Rd2;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_3_63_61_dim=paramA;
BITS_4_75_72_PixMaskU04=wmsk;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "tld_b_tid_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BONLY:b /F16RM("nof16rm"):f16rm /LODLC_LL_LZ:lodlc /AOFFI("noaoffi"):aoffi /COP("EN"):cop /MS("noms"):ms /CL("nocl"):cl /NODEP("nonodep"):nodep
Predicate("PT"):Pu
','Register:Rd2
','Register:Rd
','NonZeroRegister:Ra
','NonZeroRegister:Rb
','UImm(5)*:bank5
','UImm(6)*:hdrtblbase6
','UImm(8)*:tid8 ','PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D:paramA ','UImm(4/15)*:wmsk
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((f16rm !=`F16RM@INVALID3)) :
 "Invalid f16rm field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((lodlc !=`LODLC_LL_LZ@INVALID0)&&(lodlc !=`LODLC_LL_LZ@INVALID2)&&(lodlc !=`LODLC_LL_LZ@INVALID4)&&(lodlc !=`LODLC_LL_LZ@INVALID5)&&(lodlc !=`LODLC_LL_LZ@INVALID6)&&(lodlc !=`LODLC_LL_LZ@INVALID7)) :
 "Invalid lodlc field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((paramA !=`PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@INVALID3)&&(paramA !=`PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@INVALID6)&&(paramA !=`PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@INVALID7)) :
 "Invalid paramA field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((wmsk == 1)||(wmsk == 2)||(wmsk == 3)||(wmsk == 4)||(wmsk == 5)||(wmsk == 6)||(wmsk == 7)||(wmsk == 8)||(wmsk == 9)||(wmsk == 10)||(wmsk == 11)||(wmsk == 12)||(wmsk == 13)||(wmsk == 14)||(wmsk == 15)) :
 "Invalid wmsk field value"
OOR_REG_ERROR
 (((Rd2)==`Register@RZ)||(((Rd2)<=(%MAX_REG_COUNT-1))&&((Rd2)!=`Register@R254))) :
 "Register Rd2 is out of range"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rb)!=`Register@RZ) :
 "Disallowed register Rb"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
ILLEGAL_INSTR_ENCODING_ERROR
 (((ms == `MS@MS))) -> (((cl == `CL@nocl))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) :
 "Invalid instruction combination ( rule name: MS)"
OOR_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)==`Register@RZ)||((Rd2)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)+((Rd2)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@TLD_B ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<INDEX(Rd2));
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);

PREDICATES
 IDEST_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>=2) ? (32 + ((f16rm==0)*32)) : 32;
 IDEST2_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>2) ? (32 + (((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))==4)*(f16rm==0)*32)) : 0;
 ISRC_B_SIZE = (32 + (aoffi==`AOFFI@AOFFI)*32 + (((lodlc==`LODLC@LB)*1 + (lodlc==`LODLC@LL)*1 + (lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*2) - ((lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*1))*32 + (ms==`MS@MS)*32);
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@"3D")*3) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3)))*32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        TLDmio_pipe =  0b101101101000;
        TLD =  0b101101101000;

ENCODING
!tld_b_tid__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_60_60_scr=0;
BITS_1_59_59_b=*b;
BITS_2_80_79_sem=f16rm;
BITS_3_89_87_Pp=lodlc;
BITS_1_76_76_private=aoffi;
BITS_3_86_84_cop=cop;
BITS_1_78_78_ofmt=ms;
BITS_1_77_77_ntz=cl;
BITS_1_90_90_Pp_not=nodep;
BITS_3_83_81_Pu=Pu;
BITS_8_71_64_Rc=Rd2;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_6_45_40_hdrtblbase6=hdrtblbase6;
BITS_8_53_46_tid8=tid8;
BITS_3_63_61_dim=paramA;
BITS_4_75_72_PixMaskU04=wmsk;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "tld_scr_b_tid_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /SCRONLY:scr /BONLY:b /F16RM("nof16rm"):f16rm /LODLC_LL_LZ:lodlc /AOFFI("noaoffi"):aoffi /COP("EN"):cop /MS("noms"):ms /CL("nocl"):cl /NODEP("nonodep"):nodep
Predicate("PT"):Pu
','Register:Rd2
','Register:Rd
','NonZeroRegister:Ra
','NonZeroRegister:Rb
','UImm(5)*:bank5
','UImm(6)*:hdrtblbase6
','UImm(8)*:tid8 ','PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D:paramA ','UImm(4/15)*:wmsk
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@"3D")*3) + ((paramA==`TEXPARAMA@CUBE)*3) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*4))) + (((lodlc==`LODLC@LB)*1 + (lodlc==`LODLC@LL)*1 + (lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*2) - ((lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*1)) + (aoffi==`AOFFI@AOFFI) + (ms==`MS@MS) + 1)<=4) :
 "More than 4 coordinates are not allowed for .SCR"
ILLEGAL_INSTR_ENCODING_ERROR
 ((f16rm !=`F16RM@INVALID3)) :
 "Invalid f16rm field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((lodlc !=`LODLC_LL_LZ@INVALID0)&&(lodlc !=`LODLC_LL_LZ@INVALID2)&&(lodlc !=`LODLC_LL_LZ@INVALID4)&&(lodlc !=`LODLC_LL_LZ@INVALID5)&&(lodlc !=`LODLC_LL_LZ@INVALID6)&&(lodlc !=`LODLC_LL_LZ@INVALID7)) :
 "Invalid lodlc field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((paramA !=`PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@INVALID3)&&(paramA !=`PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@INVALID6)&&(paramA !=`PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@INVALID7)) :
 "Invalid paramA field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((wmsk == 1)||(wmsk == 2)||(wmsk == 3)||(wmsk == 4)||(wmsk == 5)||(wmsk == 6)||(wmsk == 7)||(wmsk == 8)||(wmsk == 9)||(wmsk == 10)||(wmsk == 11)||(wmsk == 12)||(wmsk == 13)||(wmsk == 14)||(wmsk == 15)) :
 "Invalid wmsk field value"
OOR_REG_ERROR
 (((Rd2)==`Register@RZ)||(((Rd2)<=(%MAX_REG_COUNT-1))&&((Rd2)!=`Register@R254))) :
 "Register Rd2 is out of range"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rb)!=`Register@RZ) :
 "Disallowed register Rb"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
ILLEGAL_INSTR_ENCODING_ERROR
 (((ms == `MS@MS))) -> (((cl == `CL@nocl))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) :
 "Invalid instruction combination ( rule name: MS)"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LL))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_2D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_2D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_2D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"2D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((ms == `MS@MS))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"1D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))&&((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)&&((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((ms == `MS@noms))&&((lodlc == `LODLC_LL_LZ@LZ))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D_3D@"3D"))) -> ((((Ra)!=`Register@RZ))&&(((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)==`Register@RZ)||((Rd2)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)+((Rd2)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@TLD_B ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<INDEX(Rd2));
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);

PREDICATES
 IDEST_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>=2) ? (32 + ((f16rm==0)*32)) : 32;
 IDEST2_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>2) ? (32 + (((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))==4)*(f16rm==0)*32)) : 0;
 ISRC_B_SIZE = ((((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@"3D")*3) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3))) + (((lodlc==`LODLC@LB)*1 + (lodlc==`LODLC@LL)*1 + (lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*2) - ((lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*1)) + (aoffi==`AOFFI@AOFFI) + (ms==`MS@MS) + 1)==4) ? 64 : 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@"3D")*3) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3))) + (((lodlc==`LODLC@LB)*1 + (lodlc==`LODLC@LL)*1 + (lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*2) - ((lodlc==`LODLC@LC)*1 + (lodlc==`LODLC@"LB.LC")*1)) + (aoffi==`AOFFI@AOFFI) + (ms==`MS@MS) + 1)>2) ? 64 : 32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        TLDmio_pipe =  0b101101101000;
        TLD =  0b101101101000;

ENCODING
!tld_scr_b_tid__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_60_60_scr=*scr;
BITS_1_59_59_b=*b;
BITS_2_80_79_sem=f16rm;
BITS_3_89_87_Pp=lodlc;
BITS_1_76_76_private=aoffi;
BITS_3_86_84_cop=cop;
BITS_1_78_78_ofmt=ms;
BITS_1_77_77_ntz=cl;
BITS_1_90_90_Pp_not=nodep;
BITS_3_83_81_Pu=Pu;
BITS_8_71_64_Rc=Rd2;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_6_45_40_hdrtblbase6=hdrtblbase6;
BITS_8_53_46_tid8=tid8;
BITS_3_63_61_dim=paramA;
BITS_4_75_72_PixMaskU04=wmsk;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "tmml_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /LODOnly:lod /NDV("nondv"):ndv /NODEP("nonodep"):nodep
Register:Rd2
','Register:Rd
','NonZeroRegister:Ra
','Register("RZ"):Rb
','UImm(5)*:bank5
','UImm(14)*:tsPtrIdx ','TEXPARAMA:paramA ','UImm(4/15)*:wmsk
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((paramA !=`TEXPARAMA@INVALID6)) :
 "Invalid paramA field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((wmsk == 1)||(wmsk == 2)||(wmsk == 3)||(wmsk == 4)||(wmsk == 5)||(wmsk == 6)||(wmsk == 7)||(wmsk == 8)||(wmsk == 9)||(wmsk == 10)||(wmsk == 11)||(wmsk == 12)||(wmsk == 13)||(wmsk == 14)||(wmsk == 15)) :
 "Invalid wmsk field value"
OOR_REG_ERROR
 (((Rd2)==`Register@RZ)||(((Rd2)<=(%MAX_REG_COUNT-1))&&((Rd2)!=`Register@R254))) :
 "Register Rd2 is out of range"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_1D)||(paramA == `TEXPARAMA@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_1D)||(paramA == `TEXPARAMA@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `TEXPARAMA@ARRAY_1D)||(paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_2D)||(paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_2D)||(paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `TEXPARAMA@ARRAY_2D)||(paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_CUBE))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_CUBE))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `TEXPARAMA@ARRAY_CUBE))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((wmsk==0xf))) -> (((((Rd2)==`Register@RZ)||((Rd2)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((wmsk==0xf))) -> (((((Rd2)+((Rd2)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@TMML ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<INDEX(Rd2));
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);

PREDICATES
 IDEST_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>=2) ? 64 : 32;
 IDEST2_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>2) ? (32 + (((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))==4)*32)) : 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@"3D")*3) + ((paramA==`TEXPARAMA@CUBE)*3) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*4)))*32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        TMMLmio_pipe =  0b101101101001;
        TMML =  0b101101101001;

ENCODING
!tmml__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_59_59_b=0;
BITS_1_77_77_ntz=ndv;
BITS_1_90_90_Pp_not=nodep;
BITS_8_71_64_Rc=Rd2;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_14_53_40_Sb_addr=tsPtrIdx;
BITS_3_63_61_dim=paramA;
BITS_4_75_72_PixMaskU04=wmsk;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "tmml_b_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BONLY:b /LODOnly:lod /NDV("nondv"):ndv /NODEP("nonodep"):nodep
Register:Rd2
','Register:Rd
','NonZeroRegister:Ra
','NonZeroRegister:Rb
','UImm(5)*:bank5
','UImm(14)*:tsPtrIdx ','TEXPARAMA:paramA ','UImm(4/15)*:wmsk
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((paramA !=`TEXPARAMA@INVALID6)) :
 "Invalid paramA field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((wmsk == 1)||(wmsk == 2)||(wmsk == 3)||(wmsk == 4)||(wmsk == 5)||(wmsk == 6)||(wmsk == 7)||(wmsk == 8)||(wmsk == 9)||(wmsk == 10)||(wmsk == 11)||(wmsk == 12)||(wmsk == 13)||(wmsk == 14)||(wmsk == 15)) :
 "Invalid wmsk field value"
OOR_REG_ERROR
 (((Rd2)==`Register@RZ)||(((Rd2)<=(%MAX_REG_COUNT-1))&&((Rd2)!=`Register@R254))) :
 "Register Rd2 is out of range"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rb)!=`Register@RZ) :
 "Disallowed register Rb"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_1D)||(paramA == `TEXPARAMA@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_1D)||(paramA == `TEXPARAMA@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `TEXPARAMA@ARRAY_1D)||(paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_2D)||(paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_2D)||(paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `TEXPARAMA@ARRAY_2D)||(paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_CUBE))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_CUBE))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `TEXPARAMA@ARRAY_CUBE))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((wmsk==0xf))) -> (((((Rd2)==`Register@RZ)||((Rd2)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((wmsk==0xf))) -> (((((Rd2)+((Rd2)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@TMML ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<INDEX(Rd2));
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);

PREDICATES
 IDEST_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>=2) ? 64 : 32;
 IDEST2_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>2) ? (32 + (((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))==4)*32)) : 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@"3D")*3) + ((paramA==`TEXPARAMA@CUBE)*3) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*4)))*32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        TMMLmio_pipe =  0b101101101001;
        TMML =  0b101101101001;

ENCODING
!tmml_b__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_59_59_b=*b;
BITS_1_77_77_ntz=ndv;
BITS_1_90_90_Pp_not=nodep;
BITS_8_71_64_Rc=Rd2;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_14_53_40_Sb_addr=tsPtrIdx;
BITS_3_63_61_dim=paramA;
BITS_4_75_72_PixMaskU04=wmsk;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "tmml_b_noConst_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BONLY:b /LODOnly:lod /NDV("nondv"):ndv /NODEP("nonodep"):nodep
Register:Rd2
','Register:Rd
','NonZeroRegister:Ra
','NonZeroRegister:Rb ','TEXPARAMA:paramA ','UImm(4/15)*:wmsk
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((paramA !=`TEXPARAMA@INVALID6)) :
 "Invalid paramA field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((wmsk == 1)||(wmsk == 2)||(wmsk == 3)||(wmsk == 4)||(wmsk == 5)||(wmsk == 6)||(wmsk == 7)||(wmsk == 8)||(wmsk == 9)||(wmsk == 10)||(wmsk == 11)||(wmsk == 12)||(wmsk == 13)||(wmsk == 14)||(wmsk == 15)) :
 "Invalid wmsk field value"
OOR_REG_ERROR
 (((Rd2)==`Register@RZ)||(((Rd2)<=(%MAX_REG_COUNT-1))&&((Rd2)!=`Register@R254))) :
 "Register Rd2 is out of range"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rb)!=`Register@RZ) :
 "Disallowed register Rb"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_1D)||(paramA == `TEXPARAMA@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_1D)||(paramA == `TEXPARAMA@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `TEXPARAMA@ARRAY_1D)||(paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_2D)||(paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_2D)||(paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `TEXPARAMA@ARRAY_2D)||(paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_CUBE))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_CUBE))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `TEXPARAMA@ARRAY_CUBE))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((wmsk==0xf))) -> (((((Rd2)==`Register@RZ)||((Rd2)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((wmsk==0xf))) -> (((((Rd2)+((Rd2)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@TMML_B_noConst ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<INDEX(Rd2));
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);

PREDICATES
 IDEST_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>=2) ? 64 : 32;
 IDEST2_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>2) ? (32 + (((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))==4)*32)) : 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@"3D")*3) + ((paramA==`TEXPARAMA@CUBE)*3) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*4)))*32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        TMMLmio_pipe =  0b1101101010;
        TMML =  0b1101101010;

ENCODING
!tmml_b_noConst__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_59_59_b=*b;
BITS_1_77_77_ntz=ndv;
BITS_1_90_90_Pp_not=nodep;
BITS_8_71_64_Rc=Rd2;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_3_63_61_dim=paramA;
BITS_4_75_72_PixMaskU04=wmsk;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "tmml_b_tid_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BONLY:b /LODOnly:lod /NDV("nondv"):ndv /NODEP("nonodep"):nodep
Register:Rd2
','Register:Rd
','NonZeroRegister:Ra
','NonZeroRegister:Rb
','UImm(5)*:bank5
','UImm(6)*:hdrtblbase6
','UImm(8)*:tid8 ','TEXPARAMA:paramA ','UImm(4/15)*:wmsk
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((paramA !=`TEXPARAMA@INVALID6)) :
 "Invalid paramA field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((wmsk == 1)||(wmsk == 2)||(wmsk == 3)||(wmsk == 4)||(wmsk == 5)||(wmsk == 6)||(wmsk == 7)||(wmsk == 8)||(wmsk == 9)||(wmsk == 10)||(wmsk == 11)||(wmsk == 12)||(wmsk == 13)||(wmsk == 14)||(wmsk == 15)) :
 "Invalid wmsk field value"
OOR_REG_ERROR
 (((Rd2)==`Register@RZ)||(((Rd2)<=(%MAX_REG_COUNT-1))&&((Rd2)!=`Register@R254))) :
 "Register Rd2 is out of range"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Rb)!=`Register@RZ) :
 "Disallowed register Rb"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_1D)||(paramA == `TEXPARAMA@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_1D)||(paramA == `TEXPARAMA@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `TEXPARAMA@ARRAY_1D)||(paramA == `TEXPARAMA@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_2D)||(paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@"3D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_2D)||(paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@"3D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `TEXPARAMA@ARRAY_2D)||(paramA == `TEXPARAMA@CUBE)||(paramA == `TEXPARAMA@"3D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_CUBE))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `TEXPARAMA@ARRAY_CUBE))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `TEXPARAMA@ARRAY_CUBE))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((wmsk==0xf))) -> (((((Rd2)==`Register@RZ)||((Rd2)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((wmsk==0xf))) -> (((((Rd2)+((Rd2)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@TMML_B ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<INDEX(Rd2));
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);

PREDICATES
 IDEST_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>=2) ? 64 : 32;
 IDEST2_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>2) ? (32 + (((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))==4)*32)) : 0;
 ISRC_B_SIZE = 32;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@"3D")*3) + ((paramA==`TEXPARAMA@CUBE)*3) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*4)))*32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        TMMLmio_pipe =  0b101101101011;
        TMML =  0b101101101011;

ENCODING
!tmml_b_tid__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_59_59_b=*b;
BITS_1_77_77_ntz=ndv;
BITS_1_90_90_Pp_not=nodep;
BITS_8_71_64_Rc=Rd2;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_6_45_40_hdrtblbase6=hdrtblbase6;
BITS_8_53_46_tid8=tid8;
BITS_3_63_61_dim=paramA;
BITS_4_75_72_PixMaskU04=wmsk;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "txd_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /F16RM("nof16rm"):f16rm /LC("nolc"):lc /AOFFI("noaoffi"):aoffi /COP("EN"):cop /NODEP("nonodep"):nodep
Predicate("PT"):Pu
','Register:Rd2
','Register:Rd
','NonZeroRegister:Ra
','Register:Rb
','UImm(5)*:bank5
','UImm(14)*:tsPtrIdx ','PARAMA_ARRAY_2D_ARRAY_1D_2D_1D:paramA ','UImm(4/15)*:wmsk
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((f16rm !=`F16RM@INVALID3)) :
 "Invalid f16rm field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((paramA !=`PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@INVALID2)&&(paramA !=`PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@INVALID3)&&(paramA !=`PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@INVALID6)&&(paramA !=`PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@INVALID7)) :
 "Invalid paramA field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((wmsk == 1)||(wmsk == 2)||(wmsk == 3)||(wmsk == 4)||(wmsk == 5)||(wmsk == 6)||(wmsk == 7)||(wmsk == 8)||(wmsk == 9)||(wmsk == 10)||(wmsk == 11)||(wmsk == 12)||(wmsk == 13)||(wmsk == 14)||(wmsk == 15)) :
 "Invalid wmsk field value"
OOR_REG_ERROR
 (((Rd2)==`Register@RZ)||(((Rd2)<=(%MAX_REG_COUNT-1))&&((Rd2)!=`Register@R254))) :
 "Register Rd2 is out of range"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((lc == `LC@LC))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((lc == `LC@LC))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((lc == `LC@LC))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"1D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"1D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((lc == `LC@nolc))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((lc == `LC@nolc))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((lc == `LC@nolc))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((lc == `LC@LC))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((lc == `LC@LC))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((lc == `LC@LC))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_2D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_2D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_2D))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_1D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"1D"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_1D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"1D"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_1D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"1D"))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)==`Register@RZ)||((Rd2)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)+((Rd2)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@TXD ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<INDEX(Rd2));
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);

PREDICATES
 IDEST_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>=2) ? (32 + ((f16rm==0)*32)) : 32;
 IDEST2_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>2) ? (32 + (((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))==4)*(f16rm==0)*32)) : 0;
 ISRC_B_SIZE = 64 + ((paramA==`TEXPARAMA@"2D")||(paramA==`TEXPARAMA@"ARRAY_2D"))*64;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = ((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3)))*32 + (((lc==`LC@LC)||(aoffi==`AOFFI@AOFFI)) - (((paramA==`TEXPARAMA@ARRAY_1D)*1) + ((paramA==`TEXPARAMA@ARRAY_2D)*1) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*1)))*32*((lc==`LC@LC)||(aoffi==`AOFFI@AOFFI));
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        TXDmio_pipe =  0b101101101100;
        TXD =  0b101101101100;

ENCODING
!txd__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_59_59_b=0;
BITS_2_80_79_sem=f16rm;
BITS_1_87_87_cas=lc;
BITS_1_76_76_private=aoffi;
BITS_3_86_84_cop=cop;
BITS_1_90_90_Pp_not=nodep;
BITS_3_83_81_Pu=Pu;
BITS_8_71_64_Rc=Rd2;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_14_53_40_Sb_addr=tsPtrIdx;
BITS_3_63_61_dim=paramA;
BITS_4_75_72_PixMaskU04=wmsk;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "txd_b_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BONLY:b /F16RM("nof16rm"):f16rm /LC("nolc"):lc /AOFFI("noaoffi"):aoffi /COP("EN"):cop /NODEP("nonodep"):nodep
Predicate("PT"):Pu
','Register:Rd2
','Register:Rd
','NonZeroRegister:Ra
','Register:Rb
','UImm(5)*:bank5
','UImm(14)*:tsPtrIdx ','PARAMA_ARRAY_2D_ARRAY_1D_2D_1D:paramA ','UImm(4/15)*:wmsk
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((f16rm !=`F16RM@INVALID3)) :
 "Invalid f16rm field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((paramA !=`PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@INVALID2)&&(paramA !=`PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@INVALID3)&&(paramA !=`PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@INVALID6)&&(paramA !=`PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@INVALID7)) :
 "Invalid paramA field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((wmsk == 1)||(wmsk == 2)||(wmsk == 3)||(wmsk == 4)||(wmsk == 5)||(wmsk == 6)||(wmsk == 7)||(wmsk == 8)||(wmsk == 9)||(wmsk == 10)||(wmsk == 11)||(wmsk == 12)||(wmsk == 13)||(wmsk == 14)||(wmsk == 15)) :
 "Invalid wmsk field value"
OOR_REG_ERROR
 (((Rd2)==`Register@RZ)||(((Rd2)<=(%MAX_REG_COUNT-1))&&((Rd2)!=`Register@R254))) :
 "Register Rd2 is out of range"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((lc == `LC@LC))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((lc == `LC@LC))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((lc == `LC@LC))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"1D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"1D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_2D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_2D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_2D))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((lc == `LC@nolc))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((lc == `LC@nolc))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((lc == `LC@nolc))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((lc == `LC@LC))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((lc == `LC@LC))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((lc == `LC@LC))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_1D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"1D"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_1D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"1D"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_1D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"1D"))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)==`Register@RZ)||((Rd2)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)+((Rd2)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@TXD ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<INDEX(Rd2));
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);

PREDICATES
 IDEST_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>=2) ? (32 + ((f16rm==0)*32)) : 32;
 IDEST2_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>2) ? (32 + (((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))==4)*(f16rm==0)*32)) : 0;
 ISRC_B_SIZE = 64 + ((paramA==`TEXPARAMA@"2D")||(paramA==`TEXPARAMA@"ARRAY_2D"))*64;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32 + ((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3)))*32 + (((lc==`LC@LC)||(aoffi==`AOFFI@AOFFI)) - (((paramA==`TEXPARAMA@ARRAY_1D)*1) + ((paramA==`TEXPARAMA@ARRAY_2D)*1) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*1)))*32*((lc==`LC@LC)||(aoffi==`AOFFI@AOFFI));
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        TXDmio_pipe =  0b101101101100;
        TXD =  0b101101101100;

ENCODING
!txd_b__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_59_59_b=*b;
BITS_2_80_79_sem=f16rm;
BITS_1_87_87_cas=lc;
BITS_1_76_76_private=aoffi;
BITS_3_86_84_cop=cop;
BITS_1_90_90_Pp_not=nodep;
BITS_3_83_81_Pu=Pu;
BITS_8_71_64_Rc=Rd2;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_14_53_40_Sb_addr=tsPtrIdx;
BITS_3_63_61_dim=paramA;
BITS_4_75_72_PixMaskU04=wmsk;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "txd_b_noConst_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BONLY:b /F16RM("nof16rm"):f16rm /LC("nolc"):lc /AOFFI("noaoffi"):aoffi /COP("EN"):cop /NODEP("nonodep"):nodep
Predicate("PT"):Pu
','Register:Rd2
','Register:Rd
','NonZeroRegister:Ra
','Register:Rb ','PARAMA_ARRAY_2D_ARRAY_1D_2D_1D:paramA ','UImm(4/15)*:wmsk
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((f16rm !=`F16RM@INVALID3)) :
 "Invalid f16rm field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((paramA !=`PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@INVALID2)&&(paramA !=`PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@INVALID3)&&(paramA !=`PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@INVALID6)&&(paramA !=`PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@INVALID7)) :
 "Invalid paramA field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((wmsk == 1)||(wmsk == 2)||(wmsk == 3)||(wmsk == 4)||(wmsk == 5)||(wmsk == 6)||(wmsk == 7)||(wmsk == 8)||(wmsk == 9)||(wmsk == 10)||(wmsk == 11)||(wmsk == 12)||(wmsk == 13)||(wmsk == 14)||(wmsk == 15)) :
 "Invalid wmsk field value"
OOR_REG_ERROR
 (((Rd2)==`Register@RZ)||(((Rd2)<=(%MAX_REG_COUNT-1))&&((Rd2)!=`Register@R254))) :
 "Register Rd2 is out of range"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((lc == `LC@LC))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((lc == `LC@LC))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((lc == `LC@LC))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"1D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"1D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_2D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_2D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_2D))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((lc == `LC@nolc))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((lc == `LC@nolc))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((lc == `LC@nolc))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((lc == `LC@LC))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((lc == `LC@LC))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((lc == `LC@LC))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_1D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"1D"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_1D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"1D"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_1D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"1D"))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)==`Register@RZ)||((Rd2)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)+((Rd2)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@TXD_B_noConst ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<INDEX(Rd2));
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);

PREDICATES
 IDEST_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>=2) ? (32 + ((f16rm==0)*32)) : 32;
 IDEST2_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>2) ? (32 + (((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))==4)*(f16rm==0)*32)) : 0;
 ISRC_B_SIZE = 64 + ((paramA==`TEXPARAMA@"2D")||(paramA==`TEXPARAMA@"ARRAY_2D"))*64;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32 + ((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3)))*32 + (((lc==`LC@LC)||(aoffi==`AOFFI@AOFFI)) - (((paramA==`TEXPARAMA@ARRAY_1D)*1) + ((paramA==`TEXPARAMA@ARRAY_2D)*1) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*1)))*32*((lc==`LC@LC)||(aoffi==`AOFFI@AOFFI));
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        TXDmio_pipe =  0b1101101101;
        TXD =  0b1101101101;

ENCODING
!txd_b_noConst__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_59_59_b=*b;
BITS_2_80_79_sem=f16rm;
BITS_1_87_87_cas=lc;
BITS_1_76_76_private=aoffi;
BITS_3_86_84_cop=cop;
BITS_1_90_90_Pp_not=nodep;
BITS_3_83_81_Pu=Pu;
BITS_8_71_64_Rc=Rd2;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_3_63_61_dim=paramA;
BITS_4_75_72_PixMaskU04=wmsk;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "txd_b_tid_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BONLY:b /F16RM("nof16rm"):f16rm /LC("nolc"):lc /AOFFI("noaoffi"):aoffi /COP("EN"):cop /NODEP("nonodep"):nodep
Predicate("PT"):Pu
','Register:Rd2
','Register:Rd
','NonZeroRegister:Ra
','Register:Rb
','UImm(5)*:bank5
','UImm(6)*:hdrtblbase6
','UImm(8)*:tid8 ','PARAMA_ARRAY_2D_ARRAY_1D_2D_1D:paramA ','UImm(4/15)*:wmsk
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((f16rm !=`F16RM@INVALID3)) :
 "Invalid f16rm field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((cop !=`COP@INVALID6)&&(cop !=`COP@INVALID7)) :
 "Invalid cop field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((paramA !=`PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@INVALID2)&&(paramA !=`PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@INVALID3)&&(paramA !=`PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@INVALID6)&&(paramA !=`PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@INVALID7)) :
 "Invalid paramA field value"
ILLEGAL_INSTR_ENCODING_ERROR
 ((wmsk == 1)||(wmsk == 2)||(wmsk == 3)||(wmsk == 4)||(wmsk == 5)||(wmsk == 6)||(wmsk == 7)||(wmsk == 8)||(wmsk == 9)||(wmsk == 10)||(wmsk == 11)||(wmsk == 12)||(wmsk == 13)||(wmsk == 14)||(wmsk == 15)) :
 "Invalid wmsk field value"
OOR_REG_ERROR
 (((Rd2)==`Register@RZ)||(((Rd2)<=(%MAX_REG_COUNT-1))&&((Rd2)!=`Register@R254))) :
 "Register Rd2 is out of range"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-2))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
MISALIGNED_REG_ERROR
 (((Ra)+((Ra)==`Register@RZ)) % 2) == 0 :
 "Register Ra is misaligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
OOR_REG_ERROR
 (((Rb)==`Register@RZ)||(((Rb)<=(%MAX_REG_COUNT-1))&&((Rb)!=`Register@R254))) :
 "Register Rb is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((lc == `LC@LC))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((lc == `LC@LC))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((lc == `LC@LC))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"1D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"1D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"1D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"1D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_1D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_1D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_1D))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_2D))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_2D))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_2D))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((lc == `LC@nolc))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-3)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((lc == `LC@nolc))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@noaoffi))&&((lc == `LC@nolc))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((lc == `LC@LC))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((lc == `LC@LC))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((lc == `LC@LC))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> (((((Ra)+((Ra)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((aoffi == `AOFFI@AOFFI))&&((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_1D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"1D"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_1D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"1D"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_1D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"1D"))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> (((((Rb)==`Register@RZ)||((Rb)<=%MAX_REG_COUNT-4)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> (((((Rb)+((Rb)==`Register@RZ)) % 4) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@ARRAY_2D)||(paramA == `PARAMA_ARRAY_2D_ARRAY_1D_2D_1D@"2D"))) -> ((((Rb)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)==`Register@RZ)||((Rd2)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((f16rm == `F16RM@nof16rm))&&((wmsk==0xf))) -> (((((Rd2)+((Rd2)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@TXD_B ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<INDEX(Rd2));
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_B_OPERAND_MAP = (1<<INDEX(Rb));
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);

PREDICATES
 IDEST_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>=2) ? (32 + ((f16rm==0)*32)) : 32;
 IDEST2_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>2) ? (32 + (((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))==4)*(f16rm==0)*32)) : 0;
 ISRC_B_SIZE = 64 + ((paramA==`TEXPARAMA@"2D")||(paramA==`TEXPARAMA@"ARRAY_2D"))*64;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32 + ((((paramA==`TEXPARAMA@"1D")*1) + ((paramA==`TEXPARAMA@"2D")*2) + ((paramA==`TEXPARAMA@ARRAY_1D)*2) + ((paramA==`TEXPARAMA@ARRAY_2D)*3)))*32 + (((lc==`LC@LC)||(aoffi==`AOFFI@AOFFI)) - (((paramA==`TEXPARAMA@ARRAY_1D)*1) + ((paramA==`TEXPARAMA@ARRAY_2D)*1) + ((paramA==`TEXPARAMA@ARRAY_CUBE)*1)))*32*((lc==`LC@LC)||(aoffi==`AOFFI@AOFFI));
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        TXDmio_pipe =  0b101101101110;
        TXD =  0b101101101110;

ENCODING
!txd_b_tid__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_59_59_b=*b;
BITS_2_80_79_sem=f16rm;
BITS_1_87_87_cas=lc;
BITS_1_76_76_private=aoffi;
BITS_3_86_84_cop=cop;
BITS_1_90_90_Pp_not=nodep;
BITS_3_83_81_Pu=Pu;
BITS_8_71_64_Rc=Rd2;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_8_39_32_Rb=Rb;
BITS_5_58_54_Sb_bank=bank5;
BITS_6_45_40_hdrtblbase6=hdrtblbase6;
BITS_8_53_46_tid8=tid8;
BITS_3_63_61_dim=paramA;
BITS_4_75_72_PixMaskU04=wmsk;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "txq_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /NODEP("nonodep"):nodep
Register:Rd2
','Register:Rd
','Register:Ra
','TXQQUERY:query
','UImm(5)*:bank5
','UImm(14)*:tsPtrIdx ','UImm(4)*:wmsk
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((wmsk == 1)||(wmsk == 2)||(wmsk == 3)||(wmsk == 4)||(wmsk == 5)||(wmsk == 6)||(wmsk == 7)||(wmsk == 8)||(wmsk == 9)||(wmsk == 10)||(wmsk == 11)||(wmsk == 12)||(wmsk == 13)||(wmsk == 14)||(wmsk == 15)) :
 "Invalid wmsk field value"
OOR_REG_ERROR
 (((Rd2)==`Register@RZ)||(((Rd2)<=(%MAX_REG_COUNT-1))&&((Rd2)!=`Register@R254))) :
 "Register Rd2 is out of range"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_ERROR
 ((query !=`TXQQUERY@INVALID3)) :
 "Invalid query field value"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((query == `TXQQUERY@TEX_HEADER_SAMPLER_POS)||(query == `TXQQUERY@TEX_HEADER_DIMENSION))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((wmsk==0xf))) -> (((((Rd2)==`Register@RZ)||((Rd2)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((wmsk==0xf))) -> (((((Rd2)+((Rd2)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@TXQ ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<INDEX(Rd2));
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);

PREDICATES
 IDEST_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>=2) ? 64 : 32;
 IDEST2_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>2) ? (32 + (((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))==4)*32)) : 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        TXQmio_pipe =  0b101101101111;
        TXQ =  0b101101101111;

ENCODING
!txq__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_59_59_b=0;
BITS_1_90_90_Pp_not=nodep;
BITS_8_71_64_Rc=Rd2;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_2_63_62_vtgmode=query;
BITS_5_58_54_Sb_bank=bank5;
BITS_14_53_40_Sb_addr=tsPtrIdx;
BITS_4_75_72_PixMaskU04=wmsk;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "txq_b_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BONLY:b /NODEP("nonodep"):nodep
Register:Rd2
','Register:Rd
','NonZeroRegister:Ra
','TXQQUERY:query
','UImm(5)*:bank5
','UImm(14)*:tsPtrIdx ','UImm(4)*:wmsk
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((wmsk == 1)||(wmsk == 2)||(wmsk == 3)||(wmsk == 4)||(wmsk == 5)||(wmsk == 6)||(wmsk == 7)||(wmsk == 8)||(wmsk == 9)||(wmsk == 10)||(wmsk == 11)||(wmsk == 12)||(wmsk == 13)||(wmsk == 14)||(wmsk == 15)) :
 "Invalid wmsk field value"
OOR_REG_ERROR
 (((Rd2)==`Register@RZ)||(((Rd2)<=(%MAX_REG_COUNT-1))&&((Rd2)!=`Register@R254))) :
 "Register Rd2 is out of range"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_ERROR
 ((query !=`TXQQUERY@INVALID3)) :
 "Invalid query field value"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((query == `TXQQUERY@TEX_HEADER_SAMPLER_POS)||(query == `TXQQUERY@TEX_HEADER_DIMENSION))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((query == `TXQQUERY@TEX_HEADER_SAMPLER_POS)||(query == `TXQQUERY@TEX_HEADER_DIMENSION))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((query == `TXQQUERY@TEX_HEADER_SAMPLER_POS)||(query == `TXQQUERY@TEX_HEADER_DIMENSION))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((wmsk==0xf))) -> (((((Rd2)==`Register@RZ)||((Rd2)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((wmsk==0xf))) -> (((((Rd2)+((Rd2)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@TXQ ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<INDEX(Rd2));
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);

PREDICATES
 IDEST_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>=2) ? 64 : 32;
 IDEST2_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>2) ? (32 + (((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))==4)*32)) : 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32 + ((query==`TXQQUERY@TEX_HEADER_DIMENSION)||(query==`TXQQUERY@TEX_HEADER_SAMPLER_POS))*32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        TXQmio_pipe =  0b101101101111;
        TXQ =  0b101101101111;

ENCODING
!txq_b__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_59_59_b=*b;
BITS_1_90_90_Pp_not=nodep;
BITS_8_71_64_Rc=Rd2;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_2_63_62_vtgmode=query;
BITS_5_58_54_Sb_bank=bank5;
BITS_14_53_40_Sb_addr=tsPtrIdx;
BITS_4_75_72_PixMaskU04=wmsk;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "txq_b_noConst_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BONLY:b /NODEP("nonodep"):nodep
Register:Rd2
','Register:Rd
','NonZeroRegister:Ra
','TXQQUERY:query ','UImm(4)*:wmsk
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((wmsk == 1)||(wmsk == 2)||(wmsk == 3)||(wmsk == 4)||(wmsk == 5)||(wmsk == 6)||(wmsk == 7)||(wmsk == 8)||(wmsk == 9)||(wmsk == 10)||(wmsk == 11)||(wmsk == 12)||(wmsk == 13)||(wmsk == 14)||(wmsk == 15)) :
 "Invalid wmsk field value"
OOR_REG_ERROR
 (((Rd2)==`Register@RZ)||(((Rd2)<=(%MAX_REG_COUNT-1))&&((Rd2)!=`Register@R254))) :
 "Register Rd2 is out of range"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_ERROR
 ((query !=`TXQQUERY@INVALID3)) :
 "Invalid query field value"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((query == `TXQQUERY@TEX_HEADER_SAMPLER_POS)||(query == `TXQQUERY@TEX_HEADER_DIMENSION))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((query == `TXQQUERY@TEX_HEADER_SAMPLER_POS)||(query == `TXQQUERY@TEX_HEADER_DIMENSION))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((query == `TXQQUERY@TEX_HEADER_SAMPLER_POS)||(query == `TXQQUERY@TEX_HEADER_DIMENSION))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((wmsk==0xf))) -> (((((Rd2)==`Register@RZ)||((Rd2)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((wmsk==0xf))) -> (((((Rd2)+((Rd2)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@TXQ_B_noConst ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<INDEX(Rd2));
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);

PREDICATES
 IDEST_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>=2) ? 64 : 32;
 IDEST2_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>2) ? (32 + (((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))==4)*32)) : 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32 + ((query==`TXQQUERY@TEX_HEADER_DIMENSION)||(query==`TXQQUERY@TEX_HEADER_SAMPLER_POS))*32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        TXQmio_pipe =  0b1101110000;
        TXQ =  0b1101110000;

ENCODING
!txq_b_noConst__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_59_59_b=*b;
BITS_1_90_90_Pp_not=nodep;
BITS_8_71_64_Rc=Rd2;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_2_63_62_vtgmode=query;
BITS_4_75_72_PixMaskU04=wmsk;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);



CLASS "txq_b_tid_"
FORMAT PREDICATE @[!]Predicate(PT):Pg Opcode /BONLY:b /NODEP("nonodep"):nodep
Register:Rd2
','Register:Rd
','NonZeroRegister:Ra
','TXQQUERY:query
','UImm(5)*:bank5
','UImm(6)*:hdrtblbase6
','UImm(8)*:tid8 ','UImm(4)*:wmsk
$( { '&' REQ:req '=' BITSET(6/0x0000):req_bit_set } )$
$( { '&' RD:rd '=' UImm(3/0x7):src_rel_sb } )$
$( { '&' WR:wr '=' UImm(3/0x7):dst_wr_sb } )$
$( { '?' USCHED_INFO("DRAIN"):usched_info } )$
$( { '?' BATCH_T("NOP"):batch_t } )$ ;

CONDITIONS

ILLEGAL_INSTR_ENCODING_ERROR
 ((wmsk == 1)||(wmsk == 2)||(wmsk == 3)||(wmsk == 4)||(wmsk == 5)||(wmsk == 6)||(wmsk == 7)||(wmsk == 8)||(wmsk == 9)||(wmsk == 10)||(wmsk == 11)||(wmsk == 12)||(wmsk == 13)||(wmsk == 14)||(wmsk == 15)) :
 "Invalid wmsk field value"
OOR_REG_ERROR
 (((Rd2)==`Register@RZ)||(((Rd2)<=(%MAX_REG_COUNT-1))&&((Rd2)!=`Register@R254))) :
 "Register Rd2 is out of range"
OOR_REG_ERROR
 (((Rd)==`Register@RZ)||(((Rd)<=(%MAX_REG_COUNT-1))&&((Rd)!=`Register@R254))) :
 "Register Rd is out of range"
OOR_REG_ERROR
 (((Ra)==`Register@RZ)||(((Ra)<=(%MAX_REG_COUNT-1))&&((Ra)!=`Register@R254))) :
 "Register Ra is out of range"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 ((Ra)!=`Register@RZ) :
 "Disallowed register Ra"
ILLEGAL_INSTR_ENCODING_ERROR
 ((query !=`TXQQUERY@INVALID3)) :
 "Invalid query field value"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 DEFINED TABLES_opex_0(batch_t,usched_info) :
 "Invalid combination of batch_t, usched_info"
OOR_REG_ERROR
 (((query == `TXQQUERY@TEX_HEADER_SAMPLER_POS)||(query == `TXQQUERY@TEX_HEADER_DIMENSION))) -> (((((Ra)==`Register@RZ)||((Ra)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((query == `TXQQUERY@TEX_HEADER_SAMPLER_POS)||(query == `TXQQUERY@TEX_HEADER_DIMENSION))) -> (((((Ra)+((Ra)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
ILLEGAL_INSTR_ENCODING_SASS_ONLY_ERROR
 (((query == `TXQQUERY@TEX_HEADER_SAMPLER_POS)||(query == `TXQQUERY@TEX_HEADER_DIMENSION))) -> ((((Ra)!=`Register@RZ))) :
 "Disallowed register"
OOR_REG_ERROR
 (((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)==`Register@RZ)||((Rd)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((wmsk==0x3)||(wmsk==0x5)||(wmsk==0x6)||(wmsk==0x7)||(wmsk==0x9)||(wmsk==0xa)||(wmsk==0xb)||(wmsk==0xc)||(wmsk==0xd)||(wmsk==0xe)||(wmsk==0xf))) -> (((((Rd)+((Rd)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"
OOR_REG_ERROR
 (((wmsk==0xf))) -> (((((Rd2)==`Register@RZ)||((Rd2)<=%MAX_REG_COUNT-2)))) :
 "Register is out of range"
MISALIGNED_REG_ERROR
 (((wmsk==0xf))) -> (((((Rd2)+((Rd2)==`Register@RZ)) % 2) == 0)) :
 "Register incorrectly aligned"


PROPERTIES
 INSTRUCTION_TYPE = INST_TYPE_DECOUPLED_RD_WR_SCBD;
 IERRORS = (1<<IERROR_ILLEGAL_INSTR_DECODING)+(1<<IERROR_MISALIGNED_REG)+(1<<IERROR_OOR_REG)+(1<<IERROR_PC_WRAP)+0;
 MIN_WAIT_NEEDED = 1 ;
 SIDL_NAME = `SIDL_NAMES@TXQ_B ;
 VALID_IN_SHADERS = ISHADER_ALL ;
 IDEST_OPERAND_MAP = (1<<INDEX(Rd));
 IDEST_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 IDEST2_OPERAND_MAP = (1<<INDEX(Rd2));
 IDEST2_OPERAND_TYPE = (1<<IOPERAND_TYPE_FLOAT);
 ISRC_B_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_B_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_MAP = (1<<IOPERAND_MAP_NON_EXISTENT_OPERAND);
 ISRC_C_OPERAND_TYPE = (1<<IOPERAND_TYPE_NON_EXISTENT_OPERAND);
 ISRC_A_OPERAND_MAP = (1<<INDEX(Ra));
 ISRC_A_OPERAND_TYPE = (1<<IOPERAND_TYPE_TEX);

PREDICATES
 IDEST_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>=2) ? 64 : 32;
 IDEST2_SIZE = ((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))>2) ? (32 + (((((wmsk)&0x1) + ((wmsk>>1)&0x1) + ((wmsk>>2)&0x1) + ((wmsk>>3)&0x1))==4)*32)) : 0;
 ISRC_B_SIZE = 0;
 ISRC_C_SIZE = 0;
 ISRC_A_SIZE = 32 + ((query==`TXQQUERY@TEX_HEADER_DIMENSION)||(query==`TXQQUERY@TEX_HEADER_SAMPLER_POS))*32;
 VIRTUAL_QUEUE = $VQ_TEX ;

OPCODES
        TXQmio_pipe =  0b101101110001;
        TXQ =  0b101101110001;

ENCODING
!txq_b_tid__unused;
BITS_3_14_12_Pg = Pg;
BITS_1_15_15_Pg_not = Pg@not;
BITS_12_11_0_opcode=Opcode;
BITS_1_59_59_b=*b;
BITS_1_90_90_Pp_not=nodep;
BITS_8_71_64_Rc=Rd2;
BITS_8_23_16_Rd=Rd;
BITS_8_31_24_Ra=Ra;
BITS_2_63_62_vtgmode=query;
BITS_5_58_54_Sb_bank=bank5;
BITS_6_45_40_hdrtblbase6=hdrtblbase6;
BITS_8_53_46_tid8=tid8;
BITS_4_75_72_PixMaskU04=wmsk;
BITS_6_121_116_req_bit_set=req_bit_set;
BITS_3_115_113_src_rel_sb=VarLatOperandEnc(src_rel_sb);
BITS_3_112_110_dst_wr_sb=VarLatOperandEnc(dst_wr_sb);
BITS_8_124_122_109_105_opex=TABLES_opex_0(batch_t,usched_info);
